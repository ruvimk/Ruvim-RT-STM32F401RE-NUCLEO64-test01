
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002b9 	.word	0x080002b9
 8000008:	080002bb 	.word	0x080002bb
 800000c:	080002ba 	.word	0x080002ba
 8000010:	080002ba 	.word	0x080002ba
 8000014:	080002ba 	.word	0x080002ba
 8000018:	080002ba 	.word	0x080002ba
 800001c:	080002ba 	.word	0x080002ba
 8000020:	080002ba 	.word	0x080002ba
 8000024:	080002ba 	.word	0x080002ba
 8000028:	080002ba 	.word	0x080002ba
 800002c:	08001501 	.word	0x08001501
 8000030:	080002ba 	.word	0x080002ba
 8000034:	080002ba 	.word	0x080002ba
 8000038:	080002ba 	.word	0x080002ba
 800003c:	080002ba 	.word	0x080002ba
 8000040:	080002ba 	.word	0x080002ba
 8000044:	080002ba 	.word	0x080002ba
 8000048:	080002ba 	.word	0x080002ba
 800004c:	080002ba 	.word	0x080002ba
 8000050:	080002ba 	.word	0x080002ba
 8000054:	080002ba 	.word	0x080002ba
 8000058:	080002ba 	.word	0x080002ba
 800005c:	080002ba 	.word	0x080002ba
 8000060:	080002ba 	.word	0x080002ba
 8000064:	080002ba 	.word	0x080002ba
 8000068:	080002ba 	.word	0x080002ba
 800006c:	08002941 	.word	0x08002941
 8000070:	08002911 	.word	0x08002911
 8000074:	080028e1 	.word	0x080028e1
 8000078:	080028b1 	.word	0x080028b1
 800007c:	08002881 	.word	0x08002881
 8000080:	08002851 	.word	0x08002851
 8000084:	08002821 	.word	0x08002821
 8000088:	08002971 	.word	0x08002971
 800008c:	080002ba 	.word	0x080002ba
 8000090:	080002ba 	.word	0x080002ba
 8000094:	080002ba 	.word	0x080002ba
 8000098:	080002ba 	.word	0x080002ba
 800009c:	080002ba 	.word	0x080002ba
 80000a0:	080002ba 	.word	0x080002ba
 80000a4:	080002ba 	.word	0x080002ba
 80000a8:	080002ba 	.word	0x080002ba
 80000ac:	080002ba 	.word	0x080002ba
 80000b0:	080025d1 	.word	0x080025d1
 80000b4:	080025b1 	.word	0x080025b1
 80000b8:	080002ba 	.word	0x080002ba
 80000bc:	080002ba 	.word	0x080002ba
 80000c0:	080002ba 	.word	0x080002ba
 80000c4:	080002ba 	.word	0x080002ba
 80000c8:	080002ba 	.word	0x080002ba
 80000cc:	080002ba 	.word	0x080002ba
 80000d0:	080002ba 	.word	0x080002ba
 80000d4:	080002ba 	.word	0x080002ba
 80000d8:	080023d1 	.word	0x080023d1
 80000dc:	080002ba 	.word	0x080002ba
 80000e0:	080002ba 	.word	0x080002ba
 80000e4:	080002ba 	.word	0x080002ba
 80000e8:	080002ba 	.word	0x080002ba
 80000ec:	080002ba 	.word	0x080002ba
 80000f0:	080002ba 	.word	0x080002ba
 80000f4:	080002ba 	.word	0x080002ba
 80000f8:	080002ba 	.word	0x080002ba
 80000fc:	080027f1 	.word	0x080027f1
 8000100:	080002ba 	.word	0x080002ba
 8000104:	080002ba 	.word	0x080002ba
 8000108:	08002591 	.word	0x08002591
 800010c:	080002ba 	.word	0x080002ba
 8000110:	080002ba 	.word	0x080002ba
 8000114:	080002ba 	.word	0x080002ba
 8000118:	080002ba 	.word	0x080002ba
 800011c:	080002ba 	.word	0x080002ba
 8000120:	080027c1 	.word	0x080027c1
 8000124:	08002791 	.word	0x08002791
 8000128:	08002761 	.word	0x08002761
 800012c:	08002731 	.word	0x08002731
 8000130:	08002701 	.word	0x08002701
 8000134:	080002ba 	.word	0x080002ba
 8000138:	080002ba 	.word	0x080002ba
 800013c:	080002ba 	.word	0x080002ba
 8000140:	080002ba 	.word	0x080002ba
 8000144:	080002ba 	.word	0x080002ba
 8000148:	080002ba 	.word	0x080002ba
 800014c:	080002ba 	.word	0x080002ba
 8000150:	080026d1 	.word	0x080026d1
 8000154:	080026a1 	.word	0x080026a1
 8000158:	08002671 	.word	0x08002671
 800015c:	080002ba 	.word	0x080002ba
 8000160:	080002ba 	.word	0x080002ba
 8000164:	080002ba 	.word	0x080002ba
 8000168:	080002ba 	.word	0x080002ba
 800016c:	080002ba 	.word	0x080002ba
 8000170:	080002ba 	.word	0x080002ba
 8000174:	080002ba 	.word	0x080002ba
 8000178:	080002ba 	.word	0x080002ba
 800017c:	080002ba 	.word	0x080002ba
 8000180:	080002ba 	.word	0x080002ba
 8000184:	080002ba 	.word	0x080002ba
 8000188:	080002ba 	.word	0x080002ba
 800018c:	080002ba 	.word	0x080002ba
 8000190:	080002ba 	.word	0x080002ba
 8000194:	080002ba 	.word	0x080002ba
 8000198:	080002ba 	.word	0x080002ba
 800019c:	080002ba 	.word	0x080002ba
 80001a0:	080002ba 	.word	0x080002ba
 80001a4:	080002ba 	.word	0x080002ba
 80001a8:	080002ba 	.word	0x080002ba
 80001ac:	080002ba 	.word	0x080002ba
 80001b0:	080002ba 	.word	0x080002ba
 80001b4:	080002ba 	.word	0x080002ba
 80001b8:	080002ba 	.word	0x080002ba
 80001bc:	080002ba 	.word	0x080002ba
 80001c0:	080002ba 	.word	0x080002ba
 80001c4:	080002ba 	.word	0x080002ba
 80001c8:	080002ba 	.word	0x080002ba
 80001cc:	080002ba 	.word	0x080002ba
 80001d0:	080002ba 	.word	0x080002ba
 80001d4:	080002ba 	.word	0x080002ba
 80001d8:	080002ba 	.word	0x080002ba
 80001dc:	080002ba 	.word	0x080002ba

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4827      	ldr	r0, [pc, #156]	; (8000280 <endfiniloop+0x4>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4826      	ldr	r0, [pc, #152]	; (8000284 <endfiniloop+0x8>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ee:	4826      	ldr	r0, [pc, #152]	; (8000288 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001f0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001f4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001f8:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 80001fa:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 80001fc:	f380 8814 	msr	CONTROL, r0
                isb
 8000200:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000204:	f002 fc3c 	bl	8002a80 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000208:	f002 f802 	bl	8002210 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800020c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000210:	491e      	ldr	r1, [pc, #120]	; (800028c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000212:	4a1b      	ldr	r2, [pc, #108]	; (8000280 <endfiniloop+0x4>)

08000214 <msloop>:
msloop:
                cmp     r1, r2
 8000214:	4291      	cmp	r1, r2
                itt     lo
 8000216:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000218:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800021c:	e7fa      	bcc.n	8000214 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800021e:	491c      	ldr	r1, [pc, #112]	; (8000290 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000220:	4a18      	ldr	r2, [pc, #96]	; (8000284 <endfiniloop+0x8>)

08000222 <psloop>:
psloop:
                cmp     r1, r2
 8000222:	4291      	cmp	r1, r2
                itt     lo
 8000224:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000226:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800022a:	e7fa      	bcc.n	8000222 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 800022c:	4919      	ldr	r1, [pc, #100]	; (8000294 <endfiniloop+0x18>)
                ldr     r2, =_data_start
 800022e:	4a1a      	ldr	r2, [pc, #104]	; (8000298 <endfiniloop+0x1c>)
                ldr     r3, =_data_end
 8000230:	4b1a      	ldr	r3, [pc, #104]	; (800029c <endfiniloop+0x20>)

08000232 <dloop>:
dloop:
                cmp     r2, r3
 8000232:	429a      	cmp	r2, r3
                ittt    lo
 8000234:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000236:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800023a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800023e:	e7f8      	bcc.n	8000232 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000240:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 8000242:	4917      	ldr	r1, [pc, #92]	; (80002a0 <endfiniloop+0x24>)
                ldr     r2, =_bss_end
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <endfiniloop+0x28>)

08000246 <bloop>:
bloop:
                cmp     r1, r2
 8000246:	4291      	cmp	r1, r2
                itt     lo
 8000248:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800024a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800024e:	e7fa      	bcc.n	8000246 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000250:	f002 fbce 	bl	80029f0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000254:	f002 fc0c 	bl	8002a70 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 8000258:	4c13      	ldr	r4, [pc, #76]	; (80002a8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end
 800025a:	4d14      	ldr	r5, [pc, #80]	; (80002ac <endfiniloop+0x30>)

0800025c <initloop>:
initloop:
                cmp     r4, r5
 800025c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800025e:	da03      	bge.n	8000268 <endinitloop>
                ldr     r1, [r4], #4
 8000260:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000264:	4788      	blx	r1
                b       initloop
 8000266:	e7f9      	b.n	800025c <initloop>

08000268 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000268:	f001 fbea 	bl	8001a40 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 800026c:	4c10      	ldr	r4, [pc, #64]	; (80002b0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end
 800026e:	4d11      	ldr	r5, [pc, #68]	; (80002b4 <endfiniloop+0x38>)

08000270 <finiloop>:
finiloop:
                cmp     r4, r5
 8000270:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000272:	da03      	bge.n	800027c <endfiniloop>
                ldr     r1, [r4], #4
 8000274:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000278:	4788      	blx	r1
                b       finiloop
 800027a:	e7f9      	b.n	8000270 <finiloop>

0800027c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800027c:	f002 bbf0 	b.w	8002a60 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000280:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000284:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000288:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800028c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000290:	20000400 	.word	0x20000400
                ldr     r1, =_textdata_start
 8000294:	08002c78 	.word	0x08002c78
                ldr     r2, =_data_start
 8000298:	20000800 	.word	0x20000800
                ldr     r3, =_data_end
 800029c:	20000878 	.word	0x20000878
                ldr     r1, =_bss_start
 80002a0:	20000878 	.word	0x20000878
                ldr     r2, =_bss_end
 80002a4:	200050f8 	.word	0x200050f8
                ldr     r4, =__init_array_start
 80002a8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end
 80002ac:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_start
 80002b0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end
 80002b4:	080001e0 	.word	0x080001e0

080002b8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002b8:	e792      	b.n	80001e0 <_crt0_entry>

080002ba <NMI_Handler>:
Vector3F0:
Vector3F4:
Vector3F8:
Vector3FC:
#endif
        bl          _unhandled_exception
 80002ba:	f000 f800 	bl	80002be <_unhandled_exception>

080002be <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002be:	e7fe      	b.n	80002be <_unhandled_exception>

080002c0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002c4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002c8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ca:	469d      	mov	sp, r3
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002d0 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002d0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002d2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002d6:	4628      	mov	r0, r5
                blx     r4
 80002d8:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 80002da:	2000      	movs	r0, #0
                bl      chThdExit
 80002dc:	f001 f920 	bl	8001520 <chThdExit>

080002e0 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 80002e0:	f001 f946 	bl	8001570 <chSchDoReschedule>

080002e4 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002e4:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80002e6:	e7fe      	b.n	80002e6 <_port_exit_from_isr+0x2>

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b972 	b.w	80005e4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	4688      	mov	r8, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14b      	bne.n	80003be <__udivmoddi4+0xa6>
 8000326:	428a      	cmp	r2, r1
 8000328:	4615      	mov	r5, r2
 800032a:	d967      	bls.n	80003fc <__udivmoddi4+0xe4>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0720 	rsb	r7, r2, #32
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	fa20 f707 	lsr.w	r7, r0, r7
 800033e:	4095      	lsls	r5, r2
 8000340:	ea47 0803 	orr.w	r8, r7, r3
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000350:	fa1f fc85 	uxth.w	ip, r5
 8000354:	fb0e 8817 	mls	r8, lr, r7, r8
 8000358:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035c:	fb07 f10c 	mul.w	r1, r7, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f107 30ff 	add.w	r0, r7, #4294967295
 800036a:	f080 811b 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8118 	bls.w	80005a4 <__udivmoddi4+0x28c>
 8000374:	3f02      	subs	r7, #2
 8000376:	442b      	add	r3, r5
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000380:	fb0e 3310 	mls	r3, lr, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fc0c 	mul.w	ip, r0, ip
 800038c:	45a4      	cmp	ip, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	192c      	adds	r4, r5, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8107 	bcs.w	80005a8 <__udivmoddi4+0x290>
 800039a:	45a4      	cmp	ip, r4
 800039c:	f240 8104 	bls.w	80005a8 <__udivmoddi4+0x290>
 80003a0:	3802      	subs	r0, #2
 80003a2:	442c      	add	r4, r5
 80003a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a8:	eba4 040c 	sub.w	r4, r4, ip
 80003ac:	2700      	movs	r7, #0
 80003ae:	b11e      	cbz	r6, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c6 4300 	strd	r4, r3, [r6]
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d909      	bls.n	80003d6 <__udivmoddi4+0xbe>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80eb 	beq.w	800059e <__udivmoddi4+0x286>
 80003c8:	2700      	movs	r7, #0
 80003ca:	e9c6 0100 	strd	r0, r1, [r6]
 80003ce:	4638      	mov	r0, r7
 80003d0:	4639      	mov	r1, r7
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	fab3 f783 	clz	r7, r3
 80003da:	2f00      	cmp	r7, #0
 80003dc:	d147      	bne.n	800046e <__udivmoddi4+0x156>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xd0>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 80fa 	bhi.w	80005dc <__udivmoddi4+0x2c4>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb61 0303 	sbc.w	r3, r1, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4698      	mov	r8, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d0e0      	beq.n	80003b8 <__udivmoddi4+0xa0>
 80003f6:	e9c6 4800 	strd	r4, r8, [r6]
 80003fa:	e7dd      	b.n	80003b8 <__udivmoddi4+0xa0>
 80003fc:	b902      	cbnz	r2, 8000400 <__udivmoddi4+0xe8>
 80003fe:	deff      	udf	#255	; 0xff
 8000400:	fab2 f282 	clz	r2, r2
 8000404:	2a00      	cmp	r2, #0
 8000406:	f040 808f 	bne.w	8000528 <__udivmoddi4+0x210>
 800040a:	1b49      	subs	r1, r1, r5
 800040c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000410:	fa1f f885 	uxth.w	r8, r5
 8000414:	2701      	movs	r7, #1
 8000416:	fbb1 fcfe 	udiv	ip, r1, lr
 800041a:	0c23      	lsrs	r3, r4, #16
 800041c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb08 f10c 	mul.w	r1, r8, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x124>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4299      	cmp	r1, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 800043a:	4684      	mov	ip, r0
 800043c:	1a59      	subs	r1, r3, r1
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb1 f0fe 	udiv	r0, r1, lr
 8000444:	fb0e 1410 	mls	r4, lr, r0, r1
 8000448:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800044c:	fb08 f800 	mul.w	r8, r8, r0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x14c>
 8000454:	192c      	adds	r4, r5, r4
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x14a>
 800045c:	45a0      	cmp	r8, r4
 800045e:	f200 80b6 	bhi.w	80005ce <__udivmoddi4+0x2b6>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 0408 	sub.w	r4, r4, r8
 8000468:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800046c:	e79f      	b.n	80003ae <__udivmoddi4+0x96>
 800046e:	f1c7 0c20 	rsb	ip, r7, #32
 8000472:	40bb      	lsls	r3, r7
 8000474:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000478:	ea4e 0e03 	orr.w	lr, lr, r3
 800047c:	fa01 f407 	lsl.w	r4, r1, r7
 8000480:	fa20 f50c 	lsr.w	r5, r0, ip
 8000484:	fa21 f30c 	lsr.w	r3, r1, ip
 8000488:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800048c:	4325      	orrs	r5, r4
 800048e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000492:	0c2c      	lsrs	r4, r5, #16
 8000494:	fb08 3319 	mls	r3, r8, r9, r3
 8000498:	fa1f fa8e 	uxth.w	sl, lr
 800049c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a0:	fb09 f40a 	mul.w	r4, r9, sl
 80004a4:	429c      	cmp	r4, r3
 80004a6:	fa02 f207 	lsl.w	r2, r2, r7
 80004aa:	fa00 f107 	lsl.w	r1, r0, r7
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1e 0303 	adds.w	r3, lr, r3
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	f080 8087 	bcs.w	80005ca <__udivmoddi4+0x2b2>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f240 8084 	bls.w	80005ca <__udivmoddi4+0x2b2>
 80004c2:	f1a9 0902 	sub.w	r9, r9, #2
 80004c6:	4473      	add	r3, lr
 80004c8:	1b1b      	subs	r3, r3, r4
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3310 	mls	r3, r8, r0, r3
 80004d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004dc:	45a2      	cmp	sl, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1e 0404 	adds.w	r4, lr, r4
 80004e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e8:	d26b      	bcs.n	80005c2 <__udivmoddi4+0x2aa>
 80004ea:	45a2      	cmp	sl, r4
 80004ec:	d969      	bls.n	80005c2 <__udivmoddi4+0x2aa>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4474      	add	r4, lr
 80004f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	eba4 040a 	sub.w	r4, r4, sl
 80004fe:	454c      	cmp	r4, r9
 8000500:	46c2      	mov	sl, r8
 8000502:	464b      	mov	r3, r9
 8000504:	d354      	bcc.n	80005b0 <__udivmoddi4+0x298>
 8000506:	d051      	beq.n	80005ac <__udivmoddi4+0x294>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d069      	beq.n	80005e0 <__udivmoddi4+0x2c8>
 800050c:	ebb1 050a 	subs.w	r5, r1, sl
 8000510:	eb64 0403 	sbc.w	r4, r4, r3
 8000514:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000518:	40fd      	lsrs	r5, r7
 800051a:	40fc      	lsrs	r4, r7
 800051c:	ea4c 0505 	orr.w	r5, ip, r5
 8000520:	e9c6 5400 	strd	r5, r4, [r6]
 8000524:	2700      	movs	r7, #0
 8000526:	e747      	b.n	80003b8 <__udivmoddi4+0xa0>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f703 	lsr.w	r7, r0, r3
 8000530:	4095      	lsls	r5, r2
 8000532:	fa01 f002 	lsl.w	r0, r1, r2
 8000536:	fa21 f303 	lsr.w	r3, r1, r3
 800053a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800053e:	4338      	orrs	r0, r7
 8000540:	0c01      	lsrs	r1, r0, #16
 8000542:	fbb3 f7fe 	udiv	r7, r3, lr
 8000546:	fa1f f885 	uxth.w	r8, r5
 800054a:	fb0e 3317 	mls	r3, lr, r7, r3
 800054e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000552:	fb07 f308 	mul.w	r3, r7, r8
 8000556:	428b      	cmp	r3, r1
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x256>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f107 3cff 	add.w	ip, r7, #4294967295
 8000564:	d22f      	bcs.n	80005c6 <__udivmoddi4+0x2ae>
 8000566:	428b      	cmp	r3, r1
 8000568:	d92d      	bls.n	80005c6 <__udivmoddi4+0x2ae>
 800056a:	3f02      	subs	r7, #2
 800056c:	4429      	add	r1, r5
 800056e:	1acb      	subs	r3, r1, r3
 8000570:	b281      	uxth	r1, r0
 8000572:	fbb3 f0fe 	udiv	r0, r3, lr
 8000576:	fb0e 3310 	mls	r3, lr, r0, r3
 800057a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057e:	fb00 f308 	mul.w	r3, r0, r8
 8000582:	428b      	cmp	r3, r1
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x27e>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f100 3cff 	add.w	ip, r0, #4294967295
 800058c:	d217      	bcs.n	80005be <__udivmoddi4+0x2a6>
 800058e:	428b      	cmp	r3, r1
 8000590:	d915      	bls.n	80005be <__udivmoddi4+0x2a6>
 8000592:	3802      	subs	r0, #2
 8000594:	4429      	add	r1, r5
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800059c:	e73b      	b.n	8000416 <__udivmoddi4+0xfe>
 800059e:	4637      	mov	r7, r6
 80005a0:	4630      	mov	r0, r6
 80005a2:	e709      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a4:	4607      	mov	r7, r0
 80005a6:	e6e7      	b.n	8000378 <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fb      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005ac:	4541      	cmp	r1, r8
 80005ae:	d2ab      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b4:	eb69 020e 	sbc.w	r2, r9, lr
 80005b8:	3801      	subs	r0, #1
 80005ba:	4613      	mov	r3, r2
 80005bc:	e7a4      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005be:	4660      	mov	r0, ip
 80005c0:	e7e9      	b.n	8000596 <__udivmoddi4+0x27e>
 80005c2:	4618      	mov	r0, r3
 80005c4:	e795      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c6:	4667      	mov	r7, ip
 80005c8:	e7d1      	b.n	800056e <__udivmoddi4+0x256>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e77c      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005ce:	3802      	subs	r0, #2
 80005d0:	442c      	add	r4, r5
 80005d2:	e747      	b.n	8000464 <__udivmoddi4+0x14c>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	442b      	add	r3, r5
 80005da:	e72f      	b.n	800043c <__udivmoddi4+0x124>
 80005dc:	4638      	mov	r0, r7
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xda>
 80005e0:	4637      	mov	r7, r6
 80005e2:	e6e9      	b.n	80003b8 <__udivmoddi4+0xa0>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <memcpy>:
 80005e8:	4684      	mov	ip, r0
 80005ea:	ea41 0300 	orr.w	r3, r1, r0
 80005ee:	f013 0303 	ands.w	r3, r3, #3
 80005f2:	d16d      	bne.n	80006d0 <memcpy+0xe8>
 80005f4:	3a40      	subs	r2, #64	; 0x40
 80005f6:	d341      	bcc.n	800067c <memcpy+0x94>
 80005f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80005fc:	f840 3b04 	str.w	r3, [r0], #4
 8000600:	f851 3b04 	ldr.w	r3, [r1], #4
 8000604:	f840 3b04 	str.w	r3, [r0], #4
 8000608:	f851 3b04 	ldr.w	r3, [r1], #4
 800060c:	f840 3b04 	str.w	r3, [r0], #4
 8000610:	f851 3b04 	ldr.w	r3, [r1], #4
 8000614:	f840 3b04 	str.w	r3, [r0], #4
 8000618:	f851 3b04 	ldr.w	r3, [r1], #4
 800061c:	f840 3b04 	str.w	r3, [r0], #4
 8000620:	f851 3b04 	ldr.w	r3, [r1], #4
 8000624:	f840 3b04 	str.w	r3, [r0], #4
 8000628:	f851 3b04 	ldr.w	r3, [r1], #4
 800062c:	f840 3b04 	str.w	r3, [r0], #4
 8000630:	f851 3b04 	ldr.w	r3, [r1], #4
 8000634:	f840 3b04 	str.w	r3, [r0], #4
 8000638:	f851 3b04 	ldr.w	r3, [r1], #4
 800063c:	f840 3b04 	str.w	r3, [r0], #4
 8000640:	f851 3b04 	ldr.w	r3, [r1], #4
 8000644:	f840 3b04 	str.w	r3, [r0], #4
 8000648:	f851 3b04 	ldr.w	r3, [r1], #4
 800064c:	f840 3b04 	str.w	r3, [r0], #4
 8000650:	f851 3b04 	ldr.w	r3, [r1], #4
 8000654:	f840 3b04 	str.w	r3, [r0], #4
 8000658:	f851 3b04 	ldr.w	r3, [r1], #4
 800065c:	f840 3b04 	str.w	r3, [r0], #4
 8000660:	f851 3b04 	ldr.w	r3, [r1], #4
 8000664:	f840 3b04 	str.w	r3, [r0], #4
 8000668:	f851 3b04 	ldr.w	r3, [r1], #4
 800066c:	f840 3b04 	str.w	r3, [r0], #4
 8000670:	f851 3b04 	ldr.w	r3, [r1], #4
 8000674:	f840 3b04 	str.w	r3, [r0], #4
 8000678:	3a40      	subs	r2, #64	; 0x40
 800067a:	d2bd      	bcs.n	80005f8 <memcpy+0x10>
 800067c:	3230      	adds	r2, #48	; 0x30
 800067e:	d311      	bcc.n	80006a4 <memcpy+0xbc>
 8000680:	f851 3b04 	ldr.w	r3, [r1], #4
 8000684:	f840 3b04 	str.w	r3, [r0], #4
 8000688:	f851 3b04 	ldr.w	r3, [r1], #4
 800068c:	f840 3b04 	str.w	r3, [r0], #4
 8000690:	f851 3b04 	ldr.w	r3, [r1], #4
 8000694:	f840 3b04 	str.w	r3, [r0], #4
 8000698:	f851 3b04 	ldr.w	r3, [r1], #4
 800069c:	f840 3b04 	str.w	r3, [r0], #4
 80006a0:	3a10      	subs	r2, #16
 80006a2:	d2ed      	bcs.n	8000680 <memcpy+0x98>
 80006a4:	320c      	adds	r2, #12
 80006a6:	d305      	bcc.n	80006b4 <memcpy+0xcc>
 80006a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80006ac:	f840 3b04 	str.w	r3, [r0], #4
 80006b0:	3a04      	subs	r2, #4
 80006b2:	d2f9      	bcs.n	80006a8 <memcpy+0xc0>
 80006b4:	3204      	adds	r2, #4
 80006b6:	d008      	beq.n	80006ca <memcpy+0xe2>
 80006b8:	07d2      	lsls	r2, r2, #31
 80006ba:	bf1c      	itt	ne
 80006bc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80006c0:	f800 3b01 	strbne.w	r3, [r0], #1
 80006c4:	d301      	bcc.n	80006ca <memcpy+0xe2>
 80006c6:	880b      	ldrh	r3, [r1, #0]
 80006c8:	8003      	strh	r3, [r0, #0]
 80006ca:	4660      	mov	r0, ip
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	2a08      	cmp	r2, #8
 80006d2:	d313      	bcc.n	80006fc <memcpy+0x114>
 80006d4:	078b      	lsls	r3, r1, #30
 80006d6:	d08d      	beq.n	80005f4 <memcpy+0xc>
 80006d8:	f010 0303 	ands.w	r3, r0, #3
 80006dc:	d08a      	beq.n	80005f4 <memcpy+0xc>
 80006de:	f1c3 0304 	rsb	r3, r3, #4
 80006e2:	1ad2      	subs	r2, r2, r3
 80006e4:	07db      	lsls	r3, r3, #31
 80006e6:	bf1c      	itt	ne
 80006e8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80006ec:	f800 3b01 	strbne.w	r3, [r0], #1
 80006f0:	d380      	bcc.n	80005f4 <memcpy+0xc>
 80006f2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80006f6:	f820 3b02 	strh.w	r3, [r0], #2
 80006fa:	e77b      	b.n	80005f4 <memcpy+0xc>
 80006fc:	3a04      	subs	r2, #4
 80006fe:	d3d9      	bcc.n	80006b4 <memcpy+0xcc>
 8000700:	3a01      	subs	r2, #1
 8000702:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000706:	f800 3b01 	strb.w	r3, [r0], #1
 800070a:	d2f9      	bcs.n	8000700 <memcpy+0x118>
 800070c:	780b      	ldrb	r3, [r1, #0]
 800070e:	7003      	strb	r3, [r0, #0]
 8000710:	784b      	ldrb	r3, [r1, #1]
 8000712:	7043      	strb	r3, [r0, #1]
 8000714:	788b      	ldrb	r3, [r1, #2]
 8000716:	7083      	strb	r3, [r0, #2]
 8000718:	4660      	mov	r0, ip
 800071a:	4770      	bx	lr
 800071c:	0000      	movs	r0, r0
	...

08000720 <adc_lld_start_conversion.constprop.25>:
 * @notapi
 */
void adc_lld_start_conversion(ADCDriver *adcp) {
  uint32_t mode;
  uint32_t cr2;
  const ADCConversionGroup *grpp = adcp->grpp;
 8000720:	4a22      	ldr	r2, [pc, #136]	; (80007ac <adc_lld_start_conversion.constprop.25+0x8c>)
 8000722:	6913      	ldr	r3, [r2, #16]
 8000724:	68d1      	ldr	r1, [r2, #12]

  /* DMA setup.*/
  mode = adcp->dmamode;
  if (grpp->circular) {
 8000726:	7818      	ldrb	r0, [r3, #0]
void adc_lld_start_conversion(ADCDriver *adcp) {
 8000728:	b4f0      	push	{r4, r5, r6, r7}
  mode = adcp->dmamode;
 800072a:	6b14      	ldr	r4, [r2, #48]	; 0x30
  if (grpp->circular) {
 800072c:	b128      	cbz	r0, 800073a <adc_lld_start_conversion.constprop.25+0x1a>
    mode |= STM32_DMA_CR_CIRC;
    if (adcp->depth > 1) {
 800072e:	2901      	cmp	r1, #1
    mode |= STM32_DMA_CR_CIRC;
 8000730:	bf94      	ite	ls
 8000732:	f444 7480 	orrls.w	r4, r4, #256	; 0x100
      /* If circular buffer depth > 1, then the half transfer interrupt
         is enabled in order to allow streaming processing.*/
      mode |= STM32_DMA_CR_HTIE;
 8000736:	f444 7484 	orrhi.w	r4, r4, #264	; 0x108
    }
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 800073a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 800073c:	885d      	ldrh	r5, [r3, #2]
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 800073e:	6800      	ldr	r0, [r0, #0]
 8000740:	6896      	ldr	r6, [r2, #8]
 8000742:	60c6      	str	r6, [r0, #12]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 8000744:	fb01 f105 	mul.w	r1, r1, r5
 8000748:	6041      	str	r1, [r0, #4]
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
  adcp->adc->SQR2  = grpp->sqr2;
  adcp->adc->SQR3  = grpp->sqr3;

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 800074a:	68d9      	ldr	r1, [r3, #12]
  dmaStreamSetMode(adcp->dmastp, mode);
 800074c:	6004      	str	r4, [r0, #0]
  dmaStreamEnable(adcp->dmastp);
 800074e:	6807      	ldr	r7, [r0, #0]
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
 8000750:	69de      	ldr	r6, [r3, #28]
  adcp->adc->SR    = 0;
 8000752:	6a92      	ldr	r2, [r2, #40]	; 0x28

  /* Enforcing the mandatory bits in CR2.*/
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_ADON;
 8000754:	691c      	ldr	r4, [r3, #16]
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
 8000756:	3d01      	subs	r5, #1
  dmaStreamEnable(adcp->dmastp);
 8000758:	f047 0701 	orr.w	r7, r7, #1
 800075c:	6007      	str	r7, [r0, #0]
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
 800075e:	ea46 5505 	orr.w	r5, r6, r5, lsl #20
  adcp->adc->SMPR1 = grpp->smpr1;
 8000762:	6958      	ldr	r0, [r3, #20]
  adcp->adc->SR    = 0;
 8000764:	2600      	movs	r6, #0
 8000766:	6016      	str	r6, [r2, #0]
  adcp->adc->SMPR2 = grpp->smpr2;
 8000768:	699e      	ldr	r6, [r3, #24]
  adcp->adc->SMPR1 = grpp->smpr1;
 800076a:	60d0      	str	r0, [r2, #12]
  adcp->adc->SQR3  = grpp->sqr3;
 800076c:	e9d3 0308 	ldrd	r0, r3, [r3, #32]
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8000770:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  adcp->adc->SMPR2 = grpp->smpr2;
 8000774:	6116      	str	r6, [r2, #16]
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8000776:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
 800077a:	62d5      	str	r5, [r2, #44]	; 0x2c
  adcp->adc->SQR2  = grpp->sqr2;
 800077c:	6310      	str	r0, [r2, #48]	; 0x30
  adcp->adc->SQR3  = grpp->sqr3;
 800077e:	6353      	str	r3, [r2, #52]	; 0x34

  /* The start method is different dependign if HW or SW triggered, the
     start is performed using the method specified in the CR2 configuration.*/
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
 8000780:	0063      	lsls	r3, r4, #1
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8000782:	6051      	str	r1, [r2, #4]
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
 8000784:	d406      	bmi.n	8000794 <adc_lld_start_conversion.constprop.25+0x74>
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_ADON;
 8000786:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 800078a:	f044 0401 	orr.w	r4, r4, #1

    /* Finally enabling ADC_CR2_SWSTART.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
  }
  else
    adcp->adc->CR2 = cr2;
 800078e:	6094      	str	r4, [r2, #8]
}
 8000790:	bcf0      	pop	{r4, r5, r6, r7}
 8000792:	4770      	bx	lr
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 8000794:	f024 4380 	bic.w	r3, r4, #1073741824	; 0x40000000
 8000798:	f240 3103 	movw	r1, #771	; 0x303
 800079c:	f023 0302 	bic.w	r3, r3, #2
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 80007a0:	430c      	orrs	r4, r1
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 80007a2:	430b      	orrs	r3, r1
 80007a4:	6093      	str	r3, [r2, #8]
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 80007a6:	6094      	str	r4, [r2, #8]
}
 80007a8:	bcf0      	pop	{r4, r5, r6, r7}
 80007aa:	4770      	bx	lr
 80007ac:	20000878 	.word	0x20000878

080007b0 <chTMStartMeasurementX.constprop.11>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80007b0:	4b01      	ldr	r3, [pc, #4]	; (80007b8 <chTMStartMeasurementX.constprop.11+0x8>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 80007b4:	6083      	str	r3, [r0, #8]
}
 80007b6:	4770      	bx	lr
 80007b8:	e0001000 	.word	0xe0001000
 80007bc:	00000000 	.word	0x00000000

080007c0 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 80007c0:	b4f0      	push	{r4, r5, r6, r7}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80007c2:	2320      	movs	r3, #32
 80007c4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80007c8:	4d0d      	ldr	r5, [pc, #52]	; (8000800 <chCoreAllocAlignedWithOffset+0x40>)
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 80007ca:	e9d5 7400 	ldrd	r7, r4, [r5]
 80007ce:	1e4e      	subs	r6, r1, #1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80007d0:	443a      	add	r2, r7
  size = MEM_ALIGN_NEXT(size, align);
 80007d2:	1983      	adds	r3, r0, r6
 80007d4:	4249      	negs	r1, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80007d6:	1990      	adds	r0, r2, r6
  size = MEM_ALIGN_NEXT(size, align);
 80007d8:	400b      	ands	r3, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80007da:	4008      	ands	r0, r1
  next = p + size;
 80007dc:	4403      	add	r3, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 80007de:	42a3      	cmp	r3, r4
 80007e0:	d807      	bhi.n	80007f2 <chCoreAllocAlignedWithOffset+0x32>
 80007e2:	429f      	cmp	r7, r3
 80007e4:	d805      	bhi.n	80007f2 <chCoreAllocAlignedWithOffset+0x32>
  ch_memcore.nextmem = next;
 80007e6:	602b      	str	r3, [r5, #0]
 80007e8:	2300      	movs	r3, #0
 80007ea:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
 80007ee:	bcf0      	pop	{r4, r5, r6, r7}
 80007f0:	4770      	bx	lr
    return NULL;
 80007f2:	2000      	movs	r0, #0
 80007f4:	2300      	movs	r3, #0
 80007f6:	f383 8811 	msr	BASEPRI, r3
}
 80007fa:	bcf0      	pop	{r4, r5, r6, r7}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	20000af8 	.word	0x20000af8
	...

08000810 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 8000810:	4a02      	ldr	r2, [pc, #8]	; (800081c <notify2+0xc>)
 8000812:	68d3      	ldr	r3, [r2, #12]
 8000814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000818:	60d3      	str	r3, [r2, #12]
}
 800081a:	4770      	bx	lr
 800081c:	40004400 	.word	0x40004400

08000820 <_port_irq_epilogue>:
 8000820:	2320      	movs	r3, #32
 8000822:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <_port_irq_epilogue+0x44>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800082e:	d102      	bne.n	8000836 <_port_irq_epilogue+0x16>
 8000830:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000834:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000836:	f3ef 8309 	mrs	r3, PSP
    ctxp->xpsr = (regarm_t)0x01000000;
 800083a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800083e:	f843 2c04 	str.w	r2, [r3, #-4]
    ctxp--;
 8000842:	f1a3 0220 	sub.w	r2, r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000846:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 800084a:	4a07      	ldr	r2, [pc, #28]	; (8000868 <_port_irq_epilogue+0x48>)
 800084c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 800084e:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 8000850:	6889      	ldr	r1, [r1, #8]
 8000852:	6892      	ldr	r2, [r2, #8]
 8000854:	4291      	cmp	r1, r2
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000856:	bf8c      	ite	hi
 8000858:	4a04      	ldrhi	r2, [pc, #16]	; (800086c <_port_irq_epilogue+0x4c>)
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800085a:	4a05      	ldrls	r2, [pc, #20]	; (8000870 <_port_irq_epilogue+0x50>)
 800085c:	f843 2c08 	str.w	r2, [r3, #-8]
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000ed00 	.word	0xe000ed00
 8000868:	20000960 	.word	0x20000960
 800086c:	080002e1 	.word	0x080002e1
 8000870:	080002e4 	.word	0x080002e4
	...

08000880 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8000880:	b470      	push	{r4, r5, r6}
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000882:	4c0b      	ldr	r4, [pc, #44]	; (80008b0 <chCoreAllocAlignedI+0x30>)
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8000884:	e9d4 6300 	ldrd	r6, r3, [r4]
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000888:	1e72      	subs	r2, r6, #1
  size = MEM_ALIGN_NEXT(size, align);
 800088a:	424d      	negs	r5, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 800088c:	440a      	add	r2, r1
  size = MEM_ALIGN_NEXT(size, align);
 800088e:	3901      	subs	r1, #1
 8000890:	4401      	add	r1, r0
 8000892:	4029      	ands	r1, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000894:	ea02 0005 	and.w	r0, r2, r5
  next = p + size;
 8000898:	4401      	add	r1, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 800089a:	4299      	cmp	r1, r3
 800089c:	d804      	bhi.n	80008a8 <chCoreAllocAlignedI+0x28>
 800089e:	428e      	cmp	r6, r1
 80008a0:	d802      	bhi.n	80008a8 <chCoreAllocAlignedI+0x28>
  ch_memcore.nextmem = next;
 80008a2:	6021      	str	r1, [r4, #0]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 80008a4:	bc70      	pop	{r4, r5, r6}
 80008a6:	4770      	bx	lr
    return NULL;
 80008a8:	2000      	movs	r0, #0
 80008aa:	bc70      	pop	{r4, r5, r6}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20000af8 	.word	0x20000af8
	...

080008c0 <chTMStopMeasurementX>:
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80008c2:	4a0f      	ldr	r2, [pc, #60]	; (8000900 <chTMStopMeasurementX+0x40>)
 80008c4:	685b      	ldr	r3, [r3, #4]
  tmp->n++;
 80008c6:	68c1      	ldr	r1, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80008c8:	b4f0      	push	{r4, r5, r6, r7}
  tmp->last = (now - tmp->last) - offset;
 80008ca:	6884      	ldr	r4, [r0, #8]
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80008cc:	6f56      	ldr	r6, [r2, #116]	; 0x74
  if (tmp->last > tmp->worst) {
 80008ce:	6842      	ldr	r2, [r0, #4]
  tmp->last = (now - tmp->last) - offset;
 80008d0:	1b1b      	subs	r3, r3, r4
  tmp->cumulative += (rttime_t)tmp->last;
 80008d2:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 80008d6:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 80008d8:	18e6      	adds	r6, r4, r3
 80008da:	f145 0700 	adc.w	r7, r5, #0
  if (tmp->last > tmp->worst) {
 80008de:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 80008e0:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 80008e2:	bf88      	it	hi
 80008e4:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 80008e6:	3101      	adds	r1, #1
  if (tmp->last < tmp->best) {
 80008e8:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 80008ea:	e9c0 6704 	strd	r6, r7, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 80008ee:	e9c0 3102 	strd	r3, r1, [r0, #8]
    tmp->best = tmp->last;
 80008f2:	bf38      	it	cc
 80008f4:	6003      	strcc	r3, [r0, #0]
}
 80008f6:	bcf0      	pop	{r4, r5, r6, r7}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e0001000 	.word	0xe0001000
 8000900:	20000960 	.word	0x20000960
	...

08000910 <wakeup>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000910:	2320      	movs	r3, #32
 8000912:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 8000916:	f890 3020 	ldrb.w	r3, [r0, #32]
 800091a:	2b07      	cmp	r3, #7
 800091c:	d80e      	bhi.n	800093c <wakeup+0x2c>
 800091e:	e8df f003 	tbb	[pc, r3]
 8000922:	0d28      	.short	0x0d28
 8000924:	0408240d 	.word	0x0408240d
 8000928:	080d      	.short	0x080d
    chSemFastSignalI(tp->u.wtsemp);
 800092a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 800092c:	6893      	ldr	r3, [r2, #8]
 800092e:	3301      	adds	r3, #1
 8000930:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8000932:	e9d0 2300 	ldrd	r2, r3, [r0]
 8000936:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000938:	6802      	ldr	r2, [r0, #0]
 800093a:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 800093c:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 800093e:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 8000940:	f04f 34ff 	mov.w	r4, #4294967295
  } while (cp->prio >= tp->prio);
 8000944:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <wakeup+0x6c>)
  tp->u.rdymsg = MSG_TIMEOUT;
 8000948:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 800094a:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 800094e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000950:	689a      	ldr	r2, [r3, #8]
 8000952:	428a      	cmp	r2, r1
 8000954:	d2fb      	bcs.n	800094e <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
 8000956:	685a      	ldr	r2, [r3, #4]
 8000958:	2100      	movs	r1, #0
 800095a:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 800095e:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000960:	6058      	str	r0, [r3, #4]
 8000962:	f381 8811 	msr	BASEPRI, r1
}
 8000966:	bc10      	pop	{r4}
 8000968:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 800096a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	e7e4      	b.n	800093c <wakeup+0x2c>
 8000972:	2300      	movs	r3, #0
 8000974:	f383 8811 	msr	BASEPRI, r3
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000960 	.word	0x20000960

08000980 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
 8000980:	4601      	mov	r1, r0
  tp->state = CH_STATE_READY;
 8000982:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.queue;
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <chSchReadyI+0x24>)
  } while (cp->prio >= tp->prio);
 8000986:	6880      	ldr	r0, [r0, #8]
  tp->state = CH_STATE_READY;
 8000988:	f881 2020 	strb.w	r2, [r1, #32]
    cp = cp->queue.next;
 800098c:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800098e:	689a      	ldr	r2, [r3, #8]
 8000990:	4282      	cmp	r2, r0
 8000992:	d2fb      	bcs.n	800098c <chSchReadyI+0xc>
  tp->queue.prev             = cp->queue.prev;
 8000994:	685a      	ldr	r2, [r3, #4]
}
 8000996:	4608      	mov	r0, r1
  tp->queue.prev             = cp->queue.prev;
 8000998:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 800099c:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 800099e:	6059      	str	r1, [r3, #4]
}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20000960 	.word	0x20000960
	...

080009b0 <chEvtBroadcastFlagsI.constprop.20>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80009b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 80009b2:	4f16      	ldr	r7, [pc, #88]	; (8000a0c <chEvtBroadcastFlagsI.constprop.20+0x5c>)
 80009b4:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80009b8:	42bc      	cmp	r4, r7
 80009ba:	d020      	beq.n	80009fe <chEvtBroadcastFlagsI.constprop.20+0x4e>
 80009bc:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 80009be:	2600      	movs	r6, #0
 80009c0:	e004      	b.n	80009cc <chEvtBroadcastFlagsI.constprop.20+0x1c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80009c2:	2a0b      	cmp	r2, #11
 80009c4:	d01c      	beq.n	8000a00 <chEvtBroadcastFlagsI.constprop.20+0x50>
    elp = elp->next;
 80009c6:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80009c8:	42bc      	cmp	r4, r7
 80009ca:	d018      	beq.n	80009fe <chEvtBroadcastFlagsI.constprop.20+0x4e>
    elp->flags |= flags;
 80009cc:	68e3      	ldr	r3, [r4, #12]
 80009ce:	432b      	orrs	r3, r5
 80009d0:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 80009d2:	b115      	cbz	r5, 80009da <chEvtBroadcastFlagsI.constprop.20+0x2a>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
 80009d4:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 80009d6:	4213      	tst	r3, r2
 80009d8:	d0f5      	beq.n	80009c6 <chEvtBroadcastFlagsI.constprop.20+0x16>
  tp->epending |= events;
 80009da:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 80009de:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80009e0:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 80009e4:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 80009e6:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 80009e8:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80009ea:	d1ea      	bne.n	80009c2 <chEvtBroadcastFlagsI.constprop.20+0x12>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80009ec:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 80009ee:	4213      	tst	r3, r2
 80009f0:	d0e9      	beq.n	80009c6 <chEvtBroadcastFlagsI.constprop.20+0x16>
    tp->u.rdymsg = MSG_OK;
 80009f2:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80009f4:	f7ff ffc4 	bl	8000980 <chSchReadyI>
    elp = elp->next;
 80009f8:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80009fa:	42bc      	cmp	r4, r7
 80009fc:	d1e6      	bne.n	80009cc <chEvtBroadcastFlagsI.constprop.20+0x1c>
}
 80009fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8000a00:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8000a02:	ea32 0303 	bics.w	r3, r2, r3
 8000a06:	d1de      	bne.n	80009c6 <chEvtBroadcastFlagsI.constprop.20+0x16>
 8000a08:	e7f3      	b.n	80009f2 <chEvtBroadcastFlagsI.constprop.20+0x42>
 8000a0a:	bf00      	nop
 8000a0c:	200008e4 	.word	0x200008e4

08000a10 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8000a10:	e7fe      	b.n	8000a10 <_idle_thread>
 8000a12:	bf00      	nop
	...

08000a20 <pwm_lld_serve_interrupt>:
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 8000a20:	6983      	ldr	r3, [r0, #24]
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 8000a22:	b570      	push	{r4, r5, r6, lr}
  sr  = pwmp->tim->SR;
 8000a24:	691a      	ldr	r2, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8000a26:	68dc      	ldr	r4, [r3, #12]
 8000a28:	4014      	ands	r4, r2
 8000a2a:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 8000a2c:	43d2      	mvns	r2, r2
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8000a2e:	07a6      	lsls	r6, r4, #30
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 8000a30:	4605      	mov	r5, r0
  pwmp->tim->SR = ~sr;
 8000a32:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8000a34:	d503      	bpl.n	8000a3e <pwm_lld_serve_interrupt+0x1e>
      (pwmp->config->channels[0].callback != NULL))
 8000a36:	6843      	ldr	r3, [r0, #4]
 8000a38:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8000a3a:	b103      	cbz	r3, 8000a3e <pwm_lld_serve_interrupt+0x1e>
    pwmp->config->channels[0].callback(pwmp);
 8000a3c:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8000a3e:	0760      	lsls	r0, r4, #29
 8000a40:	d504      	bpl.n	8000a4c <pwm_lld_serve_interrupt+0x2c>
      (pwmp->config->channels[1].callback != NULL))
 8000a42:	686b      	ldr	r3, [r5, #4]
 8000a44:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8000a46:	b10b      	cbz	r3, 8000a4c <pwm_lld_serve_interrupt+0x2c>
    pwmp->config->channels[1].callback(pwmp);
 8000a48:	4628      	mov	r0, r5
 8000a4a:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8000a4c:	0721      	lsls	r1, r4, #28
 8000a4e:	d504      	bpl.n	8000a5a <pwm_lld_serve_interrupt+0x3a>
      (pwmp->config->channels[2].callback != NULL))
 8000a50:	686b      	ldr	r3, [r5, #4]
 8000a52:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8000a54:	b10b      	cbz	r3, 8000a5a <pwm_lld_serve_interrupt+0x3a>
    pwmp->config->channels[2].callback(pwmp);
 8000a56:	4628      	mov	r0, r5
 8000a58:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8000a5a:	06e2      	lsls	r2, r4, #27
 8000a5c:	d504      	bpl.n	8000a68 <pwm_lld_serve_interrupt+0x48>
      (pwmp->config->channels[3].callback != NULL))
 8000a5e:	686b      	ldr	r3, [r5, #4]
 8000a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8000a62:	b10b      	cbz	r3, 8000a68 <pwm_lld_serve_interrupt+0x48>
    pwmp->config->channels[3].callback(pwmp);
 8000a64:	4628      	mov	r0, r5
 8000a66:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 8000a68:	07e3      	lsls	r3, r4, #31
 8000a6a:	d506      	bpl.n	8000a7a <pwm_lld_serve_interrupt+0x5a>
 8000a6c:	686b      	ldr	r3, [r5, #4]
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	b11b      	cbz	r3, 8000a7a <pwm_lld_serve_interrupt+0x5a>
    pwmp->config->callback(pwmp);
 8000a72:	4628      	mov	r0, r5
}
 8000a74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pwmp->config->callback(pwmp);
 8000a78:	4718      	bx	r3
}
 8000a7a:	bd70      	pop	{r4, r5, r6, pc}
 8000a7c:	0000      	movs	r0, r0
	...

08000a80 <pwm_lld_start>:
void pwm_lld_start(PWMDriver *pwmp) {
 8000a80:	b430      	push	{r4, r5}
  if (pwmp->state == PWM_STOP) {
 8000a82:	7803      	ldrb	r3, [r0, #0]
 8000a84:	6982      	ldr	r2, [r0, #24]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d04d      	beq.n	8000b26 <pwm_lld_start+0xa6>
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	6013      	str	r3, [r2, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 8000a8e:	6353      	str	r3, [r2, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 8000a90:	6393      	str	r3, [r2, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 8000a92:	63d3      	str	r3, [r2, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 8000a94:	6413      	str	r3, [r2, #64]	; 0x40
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 8000a96:	6253      	str	r3, [r2, #36]	; 0x24
  pwmp->tim->ARR  = pwmp->period - 1;
 8000a98:	e9d0 1401 	ldrd	r1, r4, [r0, #4]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8000a9c:	68cb      	ldr	r3, [r1, #12]
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8000a9e:	680d      	ldr	r5, [r1, #0]
 8000aa0:	6940      	ldr	r0, [r0, #20]
 8000aa2:	fbb0 f0f5 	udiv	r0, r0, r5
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8000aa6:	f003 030f 	and.w	r3, r3, #15
  pwmp->tim->CR2  = pwmp->config->cr2;
 8000aaa:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  pwmp->tim->ARR  = pwmp->period - 1;
 8000aac:	3c01      	subs	r4, #1
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8000aae:	3801      	subs	r0, #1
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8000ab0:	2b01      	cmp	r3, #1
  pwmp->tim->PSC  = psc;
 8000ab2:	6290      	str	r0, [r2, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
 8000ab4:	62d4      	str	r4, [r2, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
 8000ab6:	6055      	str	r5, [r2, #4]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8000ab8:	d040      	beq.n	8000b3c <pwm_lld_start+0xbc>
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d131      	bne.n	8000b22 <pwm_lld_start+0xa2>
    ccer |= STM32_TIM_CCER_CC1E;
 8000abe:	f043 0301 	orr.w	r3, r3, #1
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
 8000ac2:	6948      	ldr	r0, [r1, #20]
 8000ac4:	f000 000f 	and.w	r0, r0, #15
 8000ac8:	2801      	cmp	r0, #1
 8000aca:	d027      	beq.n	8000b1c <pwm_lld_start+0x9c>
 8000acc:	2802      	cmp	r0, #2
 8000ace:	d023      	beq.n	8000b18 <pwm_lld_start+0x98>
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
 8000ad0:	69c8      	ldr	r0, [r1, #28]
 8000ad2:	f000 000f 	and.w	r0, r0, #15
 8000ad6:	2801      	cmp	r0, #1
 8000ad8:	d01b      	beq.n	8000b12 <pwm_lld_start+0x92>
 8000ada:	2802      	cmp	r0, #2
 8000adc:	d017      	beq.n	8000b0e <pwm_lld_start+0x8e>
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
 8000ade:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8000ae0:	f000 000f 	and.w	r0, r0, #15
 8000ae4:	2801      	cmp	r0, #1
 8000ae6:	d003      	beq.n	8000af0 <pwm_lld_start+0x70>
 8000ae8:	2802      	cmp	r0, #2
 8000aea:	d103      	bne.n	8000af4 <pwm_lld_start+0x74>
    ccer |= STM32_TIM_CCER_CC4P;
 8000aec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    ccer |= STM32_TIM_CCER_CC4E;
 8000af0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8000af4:	6b09      	ldr	r1, [r1, #48]	; 0x30
  pwmp->tim->CCER  = ccer;
 8000af6:	6213      	str	r3, [r2, #32]
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8000af8:	2401      	movs	r4, #1
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8000afa:	f021 03ff 	bic.w	r3, r1, #255	; 0xff
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8000afe:	2000      	movs	r0, #0
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8000b00:	2185      	movs	r1, #133	; 0x85
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8000b02:	6154      	str	r4, [r2, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8000b04:	6110      	str	r0, [r2, #16]
}
 8000b06:	bc30      	pop	{r4, r5}
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8000b08:	60d3      	str	r3, [r2, #12]
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8000b0a:	6011      	str	r1, [r2, #0]
}
 8000b0c:	4770      	bx	lr
    ccer |= STM32_TIM_CCER_CC3P;
 8000b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    ccer |= STM32_TIM_CCER_CC3E;
 8000b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b16:	e7e2      	b.n	8000ade <pwm_lld_start+0x5e>
    ccer |= STM32_TIM_CCER_CC2P;
 8000b18:	f043 0320 	orr.w	r3, r3, #32
    ccer |= STM32_TIM_CCER_CC2E;
 8000b1c:	f043 0310 	orr.w	r3, r3, #16
 8000b20:	e7d6      	b.n	8000ad0 <pwm_lld_start+0x50>
  ccer = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	e7cd      	b.n	8000ac2 <pwm_lld_start+0x42>
    if (&PWMD3 == pwmp) {
 8000b26:	4b21      	ldr	r3, [pc, #132]	; (8000bac <pwm_lld_start+0x12c>)
 8000b28:	4298      	cmp	r0, r3
 8000b2a:	d009      	beq.n	8000b40 <pwm_lld_start+0xc0>
    if (&PWMD5 == pwmp) {
 8000b2c:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <pwm_lld_start+0x130>)
 8000b2e:	4298      	cmp	r0, r3
 8000b30:	d021      	beq.n	8000b76 <pwm_lld_start+0xf6>
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 8000b32:	f646 0368 	movw	r3, #26728	; 0x6868
 8000b36:	6193      	str	r3, [r2, #24]
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 8000b38:	61d3      	str	r3, [r2, #28]
 8000b3a:	e7ad      	b.n	8000a98 <pwm_lld_start+0x18>
  ccer = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	e7be      	b.n	8000abe <pwm_lld_start+0x3e>
      rccEnableTIM3(true);
 8000b40:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <pwm_lld_start+0x134>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000b42:	491d      	ldr	r1, [pc, #116]	; (8000bb8 <pwm_lld_start+0x138>)
 8000b44:	6c1c      	ldr	r4, [r3, #64]	; 0x40
      pwmp->clock = STM32_TIMCLK1;
 8000b46:	4d1d      	ldr	r5, [pc, #116]	; (8000bbc <pwm_lld_start+0x13c>)
      rccEnableTIM3(true);
 8000b48:	f044 0402 	orr.w	r4, r4, #2
 8000b4c:	641c      	str	r4, [r3, #64]	; 0x40
 8000b4e:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8000b50:	f044 0402 	orr.w	r4, r4, #2
 8000b54:	661c      	str	r4, [r3, #96]	; 0x60
      rccResetTIM3();
 8000b56:	6a1c      	ldr	r4, [r3, #32]
 8000b58:	f044 0402 	orr.w	r4, r4, #2
 8000b5c:	621c      	str	r4, [r3, #32]
 8000b5e:	2400      	movs	r4, #0
 8000b60:	621c      	str	r4, [r3, #32]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000b62:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000b66:	2470      	movs	r4, #112	; 0x70
 8000b68:	f881 431d 	strb.w	r4, [r1, #797]	; 0x31d
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000b6c:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000b70:	600b      	str	r3, [r1, #0]
      pwmp->clock = STM32_TIMCLK1;
 8000b72:	6145      	str	r5, [r0, #20]
 8000b74:	e7dd      	b.n	8000b32 <pwm_lld_start+0xb2>
      rccEnableTIM5(true);
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <pwm_lld_start+0x134>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000b78:	490f      	ldr	r1, [pc, #60]	; (8000bb8 <pwm_lld_start+0x138>)
 8000b7a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
      pwmp->clock = STM32_TIMCLK1;
 8000b7c:	4d0f      	ldr	r5, [pc, #60]	; (8000bbc <pwm_lld_start+0x13c>)
      rccEnableTIM5(true);
 8000b7e:	f044 0408 	orr.w	r4, r4, #8
 8000b82:	641c      	str	r4, [r3, #64]	; 0x40
 8000b84:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8000b86:	f044 0408 	orr.w	r4, r4, #8
 8000b8a:	661c      	str	r4, [r3, #96]	; 0x60
      rccResetTIM5();
 8000b8c:	6a1c      	ldr	r4, [r3, #32]
 8000b8e:	f044 0408 	orr.w	r4, r4, #8
 8000b92:	621c      	str	r4, [r3, #32]
 8000b94:	2400      	movs	r4, #0
 8000b96:	621c      	str	r4, [r3, #32]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000b98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000b9c:	2470      	movs	r4, #112	; 0x70
 8000b9e:	f881 4332 	strb.w	r4, [r1, #818]	; 0x332
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000ba2:	f8c1 3184 	str.w	r3, [r1, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000ba6:	604b      	str	r3, [r1, #4]
      pwmp->clock = STM32_TIMCLK1;
 8000ba8:	6145      	str	r5, [r0, #20]
 8000baa:	e7c2      	b.n	8000b32 <pwm_lld_start+0xb2>
 8000bac:	200008ac 	.word	0x200008ac
 8000bb0:	200008c8 	.word	0x200008c8
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	e000e100 	.word	0xe000e100
 8000bbc:	0501bd00 	.word	0x0501bd00

08000bc0 <_pal_lld_setgroupmode>:
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000bc0:	f002 0c03 	and.w	ip, r2, #3
                           iomode_t mode) {
 8000bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8000bc8:	09d2      	lsrs	r2, r2, #7
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000bca:	4667      	mov	r7, ip
  uint32_t bit     = 0;
 8000bcc:	2400      	movs	r4, #0
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
 8000bce:	f04f 0901 	mov.w	r9, #1
      m2 = 3 << (bit * 2);
 8000bd2:	f04f 0803 	mov.w	r8, #3
      m4 = 15 << ((bit & 7) * 4);
 8000bd6:	f04f 0e0f 	mov.w	lr, #15
 8000bda:	e00f      	b.n	8000bfc <_pal_lld_setgroupmode+0x3c>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8000bdc:	f8d0 a000 	ldr.w	sl, [r0]
 8000be0:	ea03 030a 	and.w	r3, r3, sl
 8000be4:	433b      	orrs	r3, r7
        if (bit < 8)
 8000be6:	2c07      	cmp	r4, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 8000be8:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 8000bea:	d835      	bhi.n	8000c58 <_pal_lld_setgroupmode+0x98>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000bec:	6a03      	ldr	r3, [r0, #32]
 8000bee:	401e      	ands	r6, r3
 8000bf0:	4335      	orrs	r5, r6
 8000bf2:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8000bf4:	0849      	lsrs	r1, r1, #1
 8000bf6:	d02d      	beq.n	8000c54 <_pal_lld_setgroupmode+0x94>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 8000bf8:	00bf      	lsls	r7, r7, #2
    bit++;
 8000bfa:	3401      	adds	r4, #1
    if ((mask & 1) != 0) {
 8000bfc:	07cb      	lsls	r3, r1, #31
 8000bfe:	d5f9      	bpl.n	8000bf4 <_pal_lld_setgroupmode+0x34>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000c00:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 8000c02:	fa09 f504 	lsl.w	r5, r9, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000c06:	ea23 0305 	bic.w	r3, r3, r5
 8000c0a:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
 8000c0c:	0063      	lsls	r3, r4, #1
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000c0e:	6885      	ldr	r5, [r0, #8]
      m2 = 3 << (bit * 2);
 8000c10:	fa08 f303 	lsl.w	r3, r8, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000c14:	43db      	mvns	r3, r3
 8000c16:	401d      	ands	r5, r3
 8000c18:	6085      	str	r5, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000c1a:	68c6      	ldr	r6, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 8000c1c:	f004 0507 	and.w	r5, r4, #7
 8000c20:	00ad      	lsls	r5, r5, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000c22:	401e      	ands	r6, r3
      m4 = 15 << ((bit & 7) * 4);
 8000c24:	fa0e fa05 	lsl.w	sl, lr, r5
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000c28:	f1bc 0f02 	cmp.w	ip, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000c2c:	60c6      	str	r6, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 8000c2e:	fa02 f505 	lsl.w	r5, r2, r5
 8000c32:	ea6f 060a 	mvn.w	r6, sl
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000c36:	d1d1      	bne.n	8000bdc <_pal_lld_setgroupmode+0x1c>
        if (bit < 8)
 8000c38:	2c07      	cmp	r4, #7
 8000c3a:	d812      	bhi.n	8000c62 <_pal_lld_setgroupmode+0xa2>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000c3c:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8000c40:	ea06 060a 	and.w	r6, r6, sl
 8000c44:	4335      	orrs	r5, r6
 8000c46:	6205      	str	r5, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 8000c48:	6805      	ldr	r5, [r0, #0]
 8000c4a:	402b      	ands	r3, r5
 8000c4c:	433b      	orrs	r3, r7
    if (!mask)
 8000c4e:	0849      	lsrs	r1, r1, #1
        port->MODER   = (port->MODER & ~m2) | moder;
 8000c50:	6003      	str	r3, [r0, #0]
    if (!mask)
 8000c52:	d1d1      	bne.n	8000bf8 <_pal_lld_setgroupmode+0x38>
  }
}
 8000c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000c58:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000c5a:	401e      	ands	r6, r3
 8000c5c:	4335      	orrs	r5, r6
 8000c5e:	6245      	str	r5, [r0, #36]	; 0x24
 8000c60:	e7c8      	b.n	8000bf4 <_pal_lld_setgroupmode+0x34>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000c62:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 8000c66:	ea06 060a 	and.w	r6, r6, sl
 8000c6a:	4335      	orrs	r5, r6
 8000c6c:	6245      	str	r5, [r0, #36]	; 0x24
 8000c6e:	e7eb      	b.n	8000c48 <_pal_lld_setgroupmode+0x88>

08000c70 <adc_lld_stop_conversion>:
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {
 8000c70:	b430      	push	{r4, r5}

  dmaStreamDisable(adcp->dmastp);
 8000c72:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8000c74:	6822      	ldr	r2, [r4, #0]
 8000c76:	6813      	ldr	r3, [r2, #0]
 8000c78:	f023 031f 	bic.w	r3, r3, #31
 8000c7c:	6013      	str	r3, [r2, #0]
 8000c7e:	6813      	ldr	r3, [r2, #0]
 8000c80:	f013 0301 	ands.w	r3, r3, #1
 8000c84:	d1fb      	bne.n	8000c7e <adc_lld_stop_conversion+0xe>
 8000c86:	7a25      	ldrb	r5, [r4, #8]
  adcp->adc->CR1 = 0;
 8000c88:	6a82      	ldr	r2, [r0, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 8000c8a:	6860      	ldr	r0, [r4, #4]
 8000c8c:	213d      	movs	r1, #61	; 0x3d
 8000c8e:	40a9      	lsls	r1, r5
 8000c90:	6001      	str	r1, [r0, #0]
  adcp->adc->CR1 = 0;
 8000c92:	6053      	str	r3, [r2, #4]
  /* Because ticket #822, preserving injected conversions.*/
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 8000c94:	6893      	ldr	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8000c96:	2101      	movs	r1, #1
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 8000c98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000c9c:	6093      	str	r3, [r2, #8]
}
 8000c9e:	bc30      	pop	{r4, r5}
  adcp->adc->CR2 = ADC_CR2_ADON;
 8000ca0:	6091      	str	r1, [r2, #8]
}
 8000ca2:	4770      	bx	lr
	...

08000cb0 <adc_lld_serve_rx_interrupt>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000cb0:	f011 0f0c 	tst.w	r1, #12
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 8000cb4:	b570      	push	{r4, r5, r6, lr}
 8000cb6:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000cb8:	d135      	bne.n	8000d26 <adc_lld_serve_rx_interrupt+0x76>
    if (adcp->grpp != NULL) {
 8000cba:	6903      	ldr	r3, [r0, #16]
 8000cbc:	b393      	cbz	r3, 8000d24 <adc_lld_serve_rx_interrupt+0x74>
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
 8000cbe:	068d      	lsls	r5, r1, #26
 8000cc0:	d554      	bpl.n	8000d6c <adc_lld_serve_rx_interrupt+0xbc>
        _adc_isr_full_code(adcp);
 8000cc2:	781a      	ldrb	r2, [r3, #0]
 8000cc4:	b172      	cbz	r2, 8000ce4 <adc_lld_serve_rx_interrupt+0x34>
 8000cc6:	685d      	ldr	r5, [r3, #4]
 8000cc8:	b365      	cbz	r5, 8000d24 <adc_lld_serve_rx_interrupt+0x74>
 8000cca:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
 8000cce:	2a01      	cmp	r2, #1
 8000cd0:	d957      	bls.n	8000d82 <adc_lld_serve_rx_interrupt+0xd2>
 8000cd2:	885c      	ldrh	r4, [r3, #2]
 8000cd4:	0852      	lsrs	r2, r2, #1
 8000cd6:	0053      	lsls	r3, r2, #1
 8000cd8:	fb04 1103 	mla	r1, r4, r3, r1
 8000cdc:	462b      	mov	r3, r5
}
 8000cde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _adc_isr_full_code(adcp);
 8000ce2:	4718      	bx	r3
 8000ce4:	f7ff ffc4 	bl	8000c70 <adc_lld_stop_conversion>
 8000ce8:	6923      	ldr	r3, [r4, #16]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	b143      	cbz	r3, 8000d00 <adc_lld_serve_rx_interrupt+0x50>
 8000cee:	2204      	movs	r2, #4
 8000cf0:	7022      	strb	r2, [r4, #0]
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8000cf8:	4798      	blx	r3
 8000cfa:	7823      	ldrb	r3, [r4, #0]
 8000cfc:	2b04      	cmp	r3, #4
 8000cfe:	d103      	bne.n	8000d08 <adc_lld_serve_rx_interrupt+0x58>
 8000d00:	2202      	movs	r2, #2
 8000d02:	2300      	movs	r3, #0
 8000d04:	7022      	strb	r2, [r4, #0]
 8000d06:	6123      	str	r3, [r4, #16]
 8000d08:	2320      	movs	r3, #32
 8000d0a:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8000d0e:	6963      	ldr	r3, [r4, #20]
 8000d10:	b12b      	cbz	r3, 8000d1e <adc_lld_serve_rx_interrupt+0x6e>
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 8000d12:	2200      	movs	r2, #0
 8000d14:	6162      	str	r2, [r4, #20]
    tp->u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8000d16:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
 8000d18:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000d1a:	f7ff fe31 	bl	8000980 <chSchReadyI>
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f383 8811 	msr	BASEPRI, r3
}
 8000d24:	bd70      	pop	{r4, r5, r6, pc}
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8000d26:	f7ff ffa3 	bl	8000c70 <adc_lld_stop_conversion>
 8000d2a:	6923      	ldr	r3, [r4, #16]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	b363      	cbz	r3, 8000d8a <adc_lld_serve_rx_interrupt+0xda>
 8000d30:	2205      	movs	r2, #5
 8000d32:	7022      	strb	r2, [r4, #0]
 8000d34:	2100      	movs	r1, #0
 8000d36:	4620      	mov	r0, r4
 8000d38:	4798      	blx	r3
 8000d3a:	7823      	ldrb	r3, [r4, #0]
 8000d3c:	2b05      	cmp	r3, #5
 8000d3e:	bf04      	itt	eq
 8000d40:	2302      	moveq	r3, #2
 8000d42:	7023      	strbeq	r3, [r4, #0]
 8000d44:	2300      	movs	r3, #0
 8000d46:	6123      	str	r3, [r4, #16]
 8000d48:	2320      	movs	r3, #32
 8000d4a:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8000d4e:	6963      	ldr	r3, [r4, #20]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d0e4      	beq.n	8000d1e <adc_lld_serve_rx_interrupt+0x6e>
    *trp = NULL;
 8000d54:	2100      	movs	r1, #0
    tp->u.rdymsg = msg;
 8000d56:	f04f 32ff 	mov.w	r2, #4294967295
    *trp = NULL;
 8000d5a:	6161      	str	r1, [r4, #20]
    (void) chSchReadyI(tp);
 8000d5c:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
 8000d5e:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000d60:	f7ff fe0e 	bl	8000980 <chSchReadyI>
 8000d64:	2300      	movs	r3, #0
 8000d66:	f383 8811 	msr	BASEPRI, r3
 8000d6a:	e7db      	b.n	8000d24 <adc_lld_serve_rx_interrupt+0x74>
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
 8000d6c:	06ca      	lsls	r2, r1, #27
 8000d6e:	d5d9      	bpl.n	8000d24 <adc_lld_serve_rx_interrupt+0x74>
        _adc_isr_half_code(adcp);
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0d6      	beq.n	8000d24 <adc_lld_serve_rx_interrupt+0x74>
 8000d76:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
}
 8000d7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _adc_isr_half_code(adcp);
 8000d7e:	0852      	lsrs	r2, r2, #1
 8000d80:	4718      	bx	r3
        _adc_isr_full_code(adcp);
 8000d82:	462b      	mov	r3, r5
}
 8000d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _adc_isr_full_code(adcp);
 8000d88:	4718      	bx	r3
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	6123      	str	r3, [r4, #16]
 8000d8e:	7022      	strb	r2, [r4, #0]
 8000d90:	e7da      	b.n	8000d48 <adc_lld_serve_rx_interrupt+0x98>
 8000d92:	bf00      	nop
	...

08000da0 <_ctl>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 8000da0:	2000      	movs	r0, #0
 8000da2:	4770      	bx	lr
	...

08000db0 <pwmEnableChannel>:
 *
 * @api
 */
void pwmEnableChannel(PWMDriver *pwmp,
                      pwmchannel_t channel,
                      pwmcnt_t width) {
 8000db0:	b430      	push	{r4, r5}
 8000db2:	2320      	movs	r3, #32
 8000db4:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
 8000db8:	2501      	movs	r5, #1
  pwmp->tim->CCR[channel] = width;
 8000dba:	6983      	ldr	r3, [r0, #24]
 8000dbc:	68c4      	ldr	r4, [r0, #12]
 8000dbe:	408d      	lsls	r5, r1
 8000dc0:	310c      	adds	r1, #12
 8000dc2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8000dc6:	432c      	orrs	r4, r5
 8000dc8:	60c4      	str	r4, [r0, #12]
 8000dca:	2300      	movs	r3, #0
 8000dcc:	604a      	str	r2, [r1, #4]
 8000dce:	f383 8811 	msr	BASEPRI, r3

  osalSysUnlock();
}
 8000dd2:	bc30      	pop	{r4, r5}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
	...

08000de0 <chSchWakeupS.constprop.16>:
  thread_t *otp = currp;
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <chSchWakeupS.constprop.16+0x58>)
 8000de2:	6999      	ldr	r1, [r3, #24]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8000de4:	b430      	push	{r4, r5}
 8000de6:	4604      	mov	r4, r0
  if (ntp->prio <= otp->prio) {
 8000de8:	688d      	ldr	r5, [r1, #8]
 8000dea:	6880      	ldr	r0, [r0, #8]
  ntp->u.rdymsg = msg;
 8000dec:	2200      	movs	r2, #0
  if (ntp->prio <= otp->prio) {
 8000dee:	42a8      	cmp	r0, r5
  ntp->u.rdymsg = msg;
 8000df0:	6262      	str	r2, [r4, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 8000df2:	d80c      	bhi.n	8000e0e <chSchWakeupS.constprop.16+0x2e>
  tp->state = CH_STATE_READY;
 8000df4:	f884 2020 	strb.w	r2, [r4, #32]
    cp = cp->queue.next;
 8000df8:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	4290      	cmp	r0, r2
 8000dfe:	d9fb      	bls.n	8000df8 <chSchWakeupS.constprop.16+0x18>
  tp->queue.prev             = cp->queue.prev;
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8000e06:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8000e08:	605c      	str	r4, [r3, #4]
}
 8000e0a:	bc30      	pop	{r4, r5}
 8000e0c:	4770      	bx	lr
  tp->state = CH_STATE_READY;
 8000e0e:	f881 2020 	strb.w	r2, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8000e12:	461a      	mov	r2, r3
    cp = cp->queue.next;
 8000e14:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 8000e16:	6890      	ldr	r0, [r2, #8]
 8000e18:	4285      	cmp	r5, r0
 8000e1a:	d9fb      	bls.n	8000e14 <chSchWakeupS.constprop.16+0x34>
  tp->queue.prev             = cp->queue.prev;
 8000e1c:	6850      	ldr	r0, [r2, #4]
 8000e1e:	6048      	str	r0, [r1, #4]
    ntp->state = CH_STATE_CURRENT;
 8000e20:	2501      	movs	r5, #1
  tp->queue.next             = cp;
 8000e22:	600a      	str	r2, [r1, #0]
  tp->queue.prev->queue.next = tp;
 8000e24:	6001      	str	r1, [r0, #0]
  cp->queue.prev             = tp;
 8000e26:	6051      	str	r1, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 8000e28:	f884 5020 	strb.w	r5, [r4, #32]
    chSysSwitch(ntp, otp);
 8000e2c:	4620      	mov	r0, r4
    currp = ntp;
 8000e2e:	619c      	str	r4, [r3, #24]
}
 8000e30:	bc30      	pop	{r4, r5}
    chSysSwitch(ntp, otp);
 8000e32:	f7ff ba45 	b.w	80002c0 <_port_switch>
 8000e36:	bf00      	nop
 8000e38:	20000960 	.word	0x20000960
 8000e3c:	00000000 	.word	0x00000000

08000e40 <chThdCreateStatic.constprop.10>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8000e40:	b570      	push	{r4, r5, r6, lr}
 8000e42:	2320      	movs	r3, #32
 8000e44:	f383 8811 	msr	BASEPRI, r3
  REG_INSERT(tp);
 8000e48:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <chThdCreateStatic.constprop.10+0x7c>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8000e4a:	f8c0 20dc 	str.w	r2, [r0, #220]	; 0xdc
 8000e4e:	f100 02dc 	add.w	r2, r0, #220	; 0xdc
  REG_INSERT(tp);
 8000e52:	695e      	ldr	r6, [r3, #20]
  tp->prio      = prio;
 8000e54:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
  tp->realprio  = prio;
 8000e58:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8000e5c:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
 8000e60:	4d17      	ldr	r5, [pc, #92]	; (8000ec0 <chThdCreateStatic.constprop.10+0x80>)
  tp->name      = name;
 8000e62:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <chThdCreateStatic.constprop.10+0x84>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8000e64:	f8c0 50fc 	str.w	r5, [r0, #252]	; 0xfc
  tp->state     = CH_STATE_WTSTART;
 8000e68:	2402      	movs	r4, #2
  tp->flags     = CH_FLAG_MODE_STATIC;
 8000e6a:	2101      	movs	r1, #1
  tp->state     = CH_STATE_WTSTART;
 8000e6c:	f8a0 4120 	strh.w	r4, [r0, #288]	; 0x120
  tp->flags     = CH_FLAG_MODE_STATIC;
 8000e70:	f880 1122 	strb.w	r1, [r0, #290]	; 0x122
  tp = (thread_t *)((uint8_t *)wsp + size -
 8000e74:	f500 7480 	add.w	r4, r0, #256	; 0x100
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8000e78:	2500      	movs	r5, #0
  tp->name      = name;
 8000e7a:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
  list_init(&tp->waiting);
 8000e7e:	f500 7194 	add.w	r1, r0, #296	; 0x128
  queue_init(&tp->msgqueue);
 8000e82:	f500 7296 	add.w	r2, r0, #300	; 0x12c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8000e86:	f8c0 50e0 	str.w	r5, [r0, #224]	; 0xe0
  tp->mtxlist   = NULL;
 8000e8a:	f8c0 5138 	str.w	r5, [r0, #312]	; 0x138
  tp->epending  = (eventmask_t)0;
 8000e8e:	f8c0 5134 	str.w	r5, [r0, #308]	; 0x134
  REG_INSERT(tp);
 8000e92:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 8000e96:	f8c0 6114 	str.w	r6, [r0, #276]	; 0x114
  tp->wabase = (stkalign_t *)wsp;
 8000e9a:	f8c0 011c 	str.w	r0, [r0, #284]	; 0x11c
  REG_INSERT(tp);
 8000e9e:	6134      	str	r4, [r6, #16]
  tlp->next = (thread_t *)tlp;
 8000ea0:	f8c0 1128 	str.w	r1, [r0, #296]	; 0x128
  tqp->next = (thread_t *)tqp;
 8000ea4:	f8c0 212c 	str.w	r2, [r0, #300]	; 0x12c
  tqp->prev = (thread_t *)tqp;
 8000ea8:	f8c0 2130 	str.w	r2, [r0, #304]	; 0x130
  chSchWakeupS(tp, MSG_OK);
 8000eac:	4620      	mov	r0, r4
  REG_INSERT(tp);
 8000eae:	615c      	str	r4, [r3, #20]
  chSchWakeupS(tp, MSG_OK);
 8000eb0:	f7ff ff96 	bl	8000de0 <chSchWakeupS.constprop.16>
 8000eb4:	f385 8811 	msr	BASEPRI, r5
}
 8000eb8:	4620      	mov	r0, r4
 8000eba:	bd70      	pop	{r4, r5, r6, pc}
 8000ebc:	20000960 	.word	0x20000960
 8000ec0:	080002d1 	.word	0x080002d1
 8000ec4:	08002ba0 	.word	0x08002ba0
	...

08000ed0 <chSchGoSleepS>:
  thread_t *otp = currp;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <chSchGoSleepS+0x24>)
 8000ed2:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->next;
 8000ed4:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 8000ed6:	b410      	push	{r4}
  otp->state = newstate;
 8000ed8:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 8000edc:	6810      	ldr	r0, [r2, #0]
 8000ede:	6018      	str	r0, [r3, #0]
  currp->state = CH_STATE_CURRENT;
 8000ee0:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8000ee2:	6043      	str	r3, [r0, #4]
 8000ee4:	f882 4020 	strb.w	r4, [r2, #32]
  chSysSwitch(currp, otp);
 8000ee8:	4610      	mov	r0, r2
}
 8000eea:	bc10      	pop	{r4}
  currp = queue_fifo_remove(&ch.rlist.queue);
 8000eec:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 8000eee:	f7ff b9e7 	b.w	80002c0 <_port_switch>
 8000ef2:	bf00      	nop
 8000ef4:	20000960 	.word	0x20000960
	...

08000f00 <chSemWait.constprop.6>:
 8000f00:	2320      	movs	r3, #32
 8000f02:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
 8000f06:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <chSemWait.constprop.6+0x40>)
 8000f08:	6893      	ldr	r3, [r2, #8]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	6093      	str	r3, [r2, #8]
 8000f10:	db04      	blt.n	8000f1c <chSemWait.constprop.6+0x1c>
    chSchGoSleepS(CH_STATE_WTSEM);

    return currp->u.rdymsg;
  }

  return MSG_OK;
 8000f12:	2000      	movs	r0, #0
 8000f14:	2300      	movs	r3, #0
 8000f16:	f383 8811 	msr	BASEPRI, r3
}
 8000f1a:	4770      	bx	lr
msg_t chSemWait(semaphore_t *sp) {
 8000f1c:	b510      	push	{r4, lr}
    currp->u.wtsemp = sp;
 8000f1e:	4c09      	ldr	r4, [pc, #36]	; (8000f44 <chSemWait.constprop.6+0x44>)
  tp->queue.prev             = tqp->prev;
 8000f20:	6851      	ldr	r1, [r2, #4]
 8000f22:	69a3      	ldr	r3, [r4, #24]
    chSchGoSleepS(CH_STATE_WTSEM);
 8000f24:	2005      	movs	r0, #5
 8000f26:	e9c3 2100 	strd	r2, r1, [r3]
    currp->u.wtsemp = sp;
 8000f2a:	625a      	str	r2, [r3, #36]	; 0x24
  tp->queue.prev->queue.next = tp;
 8000f2c:	600b      	str	r3, [r1, #0]
  tqp->prev                  = tp;
 8000f2e:	6053      	str	r3, [r2, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 8000f30:	f7ff ffce 	bl	8000ed0 <chSchGoSleepS>
    return currp->u.rdymsg;
 8000f34:	69a3      	ldr	r3, [r4, #24]
 8000f36:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f383 8811 	msr	BASEPRI, r3
}
 8000f3e:	bd10      	pop	{r4, pc}
 8000f40:	20000ba0 	.word	0x20000ba0
 8000f44:	20000960 	.word	0x20000960
	...

08000f50 <chMtxLockS.constprop.4>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8000f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 8000f52:	4d35      	ldr	r5, [pc, #212]	; (8001028 <chMtxLockS.constprop.4+0xd8>)
  thread_t *ctp = currp;
 8000f54:	4b35      	ldr	r3, [pc, #212]	; (800102c <chMtxLockS.constprop.4+0xdc>)
  if (mp->owner != NULL) {
 8000f56:	68a8      	ldr	r0, [r5, #8]
  thread_t *ctp = currp;
 8000f58:	699c      	ldr	r4, [r3, #24]
  if (mp->owner != NULL) {
 8000f5a:	2800      	cmp	r0, #0
 8000f5c:	d03b      	beq.n	8000fd6 <chMtxLockS.constprop.4+0x86>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
 8000f5e:	68a2      	ldr	r2, [r4, #8]
 8000f60:	6883      	ldr	r3, [r0, #8]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d907      	bls.n	8000f76 <chMtxLockS.constprop.4+0x26>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 8000f66:	f890 3020 	ldrb.w	r3, [r0, #32]
        tp->prio = ctp->prio;
 8000f6a:	6082      	str	r2, [r0, #8]
        switch (tp->state) {
 8000f6c:	2b06      	cmp	r3, #6
 8000f6e:	d037      	beq.n	8000fe0 <chMtxLockS.constprop.4+0x90>
 8000f70:	2b07      	cmp	r3, #7
 8000f72:	d014      	beq.n	8000f9e <chMtxLockS.constprop.4+0x4e>
 8000f74:	b33b      	cbz	r3, 8000fc6 <chMtxLockS.constprop.4+0x76>
  thread_t *cp = (thread_t *)tqp;
 8000f76:	4b2c      	ldr	r3, [pc, #176]	; (8001028 <chMtxLockS.constprop.4+0xd8>)
 8000f78:	e003      	b.n	8000f82 <chMtxLockS.constprop.4+0x32>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000f7a:	6899      	ldr	r1, [r3, #8]
 8000f7c:	68a2      	ldr	r2, [r4, #8]
 8000f7e:	4291      	cmp	r1, r2
 8000f80:	d302      	bcc.n	8000f88 <chMtxLockS.constprop.4+0x38>
    cp = cp->queue.next;
 8000f82:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000f84:	42ab      	cmp	r3, r5
 8000f86:	d1f8      	bne.n	8000f7a <chMtxLockS.constprop.4+0x2a>
  tp->queue.prev             = cp->queue.prev;
 8000f88:	685a      	ldr	r2, [r3, #4]
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
      ctp->u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8000f8a:	2006      	movs	r0, #6
 8000f8c:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8000f90:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8000f92:	605c      	str	r4, [r3, #4]
      ctp->u.wtmtxp = mp;
 8000f94:	6265      	str	r5, [r4, #36]	; 0x24
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
    mp->next = ctp->mtxlist;
    ctp->mtxlist = mp;
  }
}
 8000f96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      chSchGoSleepS(CH_STATE_WTMTX);
 8000f9a:	f7ff bf99 	b.w	8000ed0 <chSchGoSleepS>
  tp->queue.prev->queue.next = tp->queue.next;
 8000f9e:	e9d0 1300 	ldrd	r1, r3, [r0]
 8000fa2:	6019      	str	r1, [r3, #0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8000fa4:	6a46      	ldr	r6, [r0, #36]	; 0x24
  tp->queue.next->queue.prev = tp->queue.prev;
 8000fa6:	6801      	ldr	r1, [r0, #0]
 8000fa8:	604b      	str	r3, [r1, #4]
 8000faa:	4633      	mov	r3, r6
 8000fac:	e002      	b.n	8000fb4 <chMtxLockS.constprop.4+0x64>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000fae:	6899      	ldr	r1, [r3, #8]
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d32f      	bcc.n	8001014 <chMtxLockS.constprop.4+0xc4>
    cp = cp->queue.next;
 8000fb4:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000fb6:	429e      	cmp	r6, r3
 8000fb8:	d1f9      	bne.n	8000fae <chMtxLockS.constprop.4+0x5e>
  tp->queue.prev             = cp->queue.prev;
 8000fba:	6873      	ldr	r3, [r6, #4]
 8000fbc:	e9c0 6300 	strd	r6, r3, [r0]
  tp->queue.prev->queue.next = tp;
 8000fc0:	6018      	str	r0, [r3, #0]
  cp->queue.prev             = tp;
 8000fc2:	6070      	str	r0, [r6, #4]
 8000fc4:	e7d7      	b.n	8000f76 <chMtxLockS.constprop.4+0x26>
  tp->queue.prev->queue.next = tp->queue.next;
 8000fc6:	e9d0 2300 	ldrd	r2, r3, [r0]
 8000fca:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000fcc:	6802      	ldr	r2, [r0, #0]
 8000fce:	6053      	str	r3, [r2, #4]
          (void) chSchReadyI(queue_dequeue(tp));
 8000fd0:	f7ff fcd6 	bl	8000980 <chSchReadyI>
 8000fd4:	e7cf      	b.n	8000f76 <chMtxLockS.constprop.4+0x26>
    mp->next = ctp->mtxlist;
 8000fd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    ctp->mtxlist = mp;
 8000fd8:	63a5      	str	r5, [r4, #56]	; 0x38
    mp->next = ctp->mtxlist;
 8000fda:	e9c5 4302 	strd	r4, r3, [r5, #8]
}
 8000fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 8000fe0:	e9d0 1300 	ldrd	r1, r3, [r0]
 8000fe4:	6019      	str	r1, [r3, #0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8000fe6:	6a46      	ldr	r6, [r0, #36]	; 0x24
  tp->queue.next->queue.prev = tp->queue.prev;
 8000fe8:	6801      	ldr	r1, [r0, #0]
 8000fea:	4637      	mov	r7, r6
 8000fec:	604b      	str	r3, [r1, #4]
 8000fee:	4633      	mov	r3, r6
 8000ff0:	e002      	b.n	8000ff8 <chMtxLockS.constprop.4+0xa8>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000ff2:	6899      	ldr	r1, [r3, #8]
 8000ff4:	4291      	cmp	r1, r2
 8000ff6:	d314      	bcc.n	8001022 <chMtxLockS.constprop.4+0xd2>
    cp = cp->queue.next;
 8000ff8:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d1f9      	bne.n	8000ff2 <chMtxLockS.constprop.4+0xa2>
  tp->queue.prev             = cp->queue.prev;
 8000ffe:	687b      	ldr	r3, [r7, #4]
      while (tp->prio < ctp->prio) {
 8001000:	68a2      	ldr	r2, [r4, #8]
 8001002:	e9c0 7300 	strd	r7, r3, [r0]
  tp->queue.prev->queue.next = tp;
 8001006:	6018      	str	r0, [r3, #0]
  cp->queue.prev             = tp;
 8001008:	6078      	str	r0, [r7, #4]
          tp = tp->u.wtmtxp->owner;
 800100a:	68b0      	ldr	r0, [r6, #8]
      while (tp->prio < ctp->prio) {
 800100c:	6883      	ldr	r3, [r0, #8]
 800100e:	429a      	cmp	r2, r3
 8001010:	d8a9      	bhi.n	8000f66 <chMtxLockS.constprop.4+0x16>
 8001012:	e7b0      	b.n	8000f76 <chMtxLockS.constprop.4+0x26>
    cp = cp->queue.next;
 8001014:	461e      	mov	r6, r3
  tp->queue.prev             = cp->queue.prev;
 8001016:	6873      	ldr	r3, [r6, #4]
 8001018:	e9c0 6300 	strd	r6, r3, [r0]
  tp->queue.prev->queue.next = tp;
 800101c:	6018      	str	r0, [r3, #0]
  cp->queue.prev             = tp;
 800101e:	6070      	str	r0, [r6, #4]
 8001020:	e7a9      	b.n	8000f76 <chMtxLockS.constprop.4+0x26>
    cp = cp->queue.next;
 8001022:	461f      	mov	r7, r3
 8001024:	e7eb      	b.n	8000ffe <chMtxLockS.constprop.4+0xae>
 8001026:	bf00      	nop
 8001028:	20004bb4 	.word	0x20004bb4
 800102c:	20000960 	.word	0x20000960

08001030 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8001030:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (TIME_INFINITE != timeout) {
 8001032:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8001034:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 8001036:	d04c      	beq.n	80010d2 <chSchGoSleepTimeoutS+0xa2>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8001038:	4c41      	ldr	r4, [pc, #260]	; (8001140 <chSchGoSleepTimeoutS+0x110>)
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800103a:	4625      	mov	r5, r4
 800103c:	2902      	cmp	r1, #2
 800103e:	f855 2f1c 	ldr.w	r2, [r5, #28]!
  vtp->par = par;
 8001042:	69a3      	ldr	r3, [r4, #24]
 8001044:	9305      	str	r3, [sp, #20]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001046:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 800104a:	4607      	mov	r7, r0
 800104c:	bf38      	it	cc
 800104e:	2102      	movcc	r1, #2
  vtp->func = vtfunc;
 8001050:	483c      	ldr	r0, [pc, #240]	; (8001144 <chSchGoSleepTimeoutS+0x114>)
 8001052:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8001056:	9004      	str	r0, [sp, #16]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001058:	42aa      	cmp	r2, r5
 800105a:	d05b      	beq.n	8001114 <chSchGoSleepTimeoutS+0xe4>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 800105c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800105e:	6890      	ldr	r0, [r2, #8]
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8001060:	1b9b      	subs	r3, r3, r6
 8001062:	1859      	adds	r1, r3, r1

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8001064:	d32f      	bcc.n	80010c6 <chSchGoSleepTimeoutS+0x96>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
 8001066:	6812      	ldr	r2, [r2, #0]
      delta -= p->delta;
 8001068:	1a09      	subs	r1, r1, r0
 800106a:	6890      	ldr	r0, [r2, #8]
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 800106c:	4281      	cmp	r1, r0
 800106e:	d904      	bls.n	800107a <chSchGoSleepTimeoutS+0x4a>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
    p = p->next;
 8001070:	6812      	ldr	r2, [r2, #0]
    delta -= p->delta;
 8001072:	1a09      	subs	r1, r1, r0
  while (p->delta < delta) {
 8001074:	6890      	ldr	r0, [r2, #8]
 8001076:	4288      	cmp	r0, r1
 8001078:	d3fa      	bcc.n	8001070 <chSchGoSleepTimeoutS+0x40>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 800107a:	6853      	ldr	r3, [r2, #4]
 800107c:	9302      	str	r3, [sp, #8]
  vtp->prev->next = vtp;
 800107e:	ae01      	add	r6, sp, #4
  vtp->next = p;
 8001080:	9201      	str	r2, [sp, #4]
  vtp->prev->next = vtp;
 8001082:	601e      	str	r6, [r3, #0]
  p->prev = vtp;
 8001084:	6056      	str	r6, [r2, #4]
  vtp->delta = delta;
 8001086:	9103      	str	r1, [sp, #12]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 8001088:	6893      	ldr	r3, [r2, #8]
 800108a:	1a59      	subs	r1, r3, r1

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 800108c:	f04f 33ff 	mov.w	r3, #4294967295
  p->delta -= delta;
 8001090:	6091      	str	r1, [r2, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8001092:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 8001094:	4638      	mov	r0, r7
 8001096:	f7ff ff1b 	bl	8000ed0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800109a:	9b04      	ldr	r3, [sp, #16]
 800109c:	b17b      	cbz	r3, 80010be <chSchGoSleepTimeoutS+0x8e>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 800109e:	69e2      	ldr	r2, [r4, #28]
 80010a0:	9b01      	ldr	r3, [sp, #4]
 80010a2:	42b2      	cmp	r2, r6
 80010a4:	d01c      	beq.n	80010e0 <chSchGoSleepTimeoutS+0xb0>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 80010a6:	9a02      	ldr	r2, [sp, #8]
 80010a8:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 80010aa:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;
 80010ac:	2100      	movs	r1, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80010ae:	42ab      	cmp	r3, r5
    vtp->next->prev = vtp->prev;
 80010b0:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 80010b2:	9104      	str	r1, [sp, #16]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80010b4:	d003      	beq.n	80010be <chSchGoSleepTimeoutS+0x8e>
      vtp->next->delta += vtp->delta;
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	9903      	ldr	r1, [sp, #12]
 80010ba:	440a      	add	r2, r1
 80010bc:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
 80010be:	69a3      	ldr	r3, [r4, #24]
}
 80010c0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80010c2:	b007      	add	sp, #28
 80010c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (delta < p->delta) {
 80010c6:	4281      	cmp	r1, r0
 80010c8:	d2d0      	bcs.n	800106c <chSchGoSleepTimeoutS+0x3c>
  return systime + (systime_t)interval;
 80010ca:	440e      	add	r6, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80010cc:	f8cc 6034 	str.w	r6, [ip, #52]	; 0x34
 80010d0:	e7cc      	b.n	800106c <chSchGoSleepTimeoutS+0x3c>
 80010d2:	4c1b      	ldr	r4, [pc, #108]	; (8001140 <chSchGoSleepTimeoutS+0x110>)
    chSchGoSleepS(newstate);
 80010d4:	f7ff fefc 	bl	8000ed0 <chSchGoSleepS>
  return currp->u.rdymsg;
 80010d8:	69a3      	ldr	r3, [r4, #24]
}
 80010da:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80010dc:	b007      	add	sp, #28
 80010de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 80010e0:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80010e2:	42ab      	cmp	r3, r5
  ch.vtlist.next = vtp->next;
 80010e4:	61e3      	str	r3, [r4, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 80010e6:	605d      	str	r5, [r3, #4]
  vtp->func = NULL;
 80010e8:	9204      	str	r2, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80010ea:	d024      	beq.n	8001136 <chSchGoSleepTimeoutS+0x106>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	9803      	ldr	r0, [sp, #12]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 80010f0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 80010f2:	4402      	add	r2, r0
  return (systime_t)STM32_ST_TIM->CNT;
 80010f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80010fc:	1a5b      	subs	r3, r3, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 80010fe:	429a      	cmp	r2, r3
 8001100:	d9dd      	bls.n	80010be <chSchGoSleepTimeoutS+0x8e>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8001102:	1ad0      	subs	r0, r2, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8001104:	2801      	cmp	r0, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8001106:	bf98      	it	ls
 8001108:	1c9a      	addls	r2, r3, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800110a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 800110e:	440a      	add	r2, r1
 8001110:	635a      	str	r2, [r3, #52]	; 0x34
 8001112:	e7d4      	b.n	80010be <chSchGoSleepTimeoutS+0x8e>
      ch.vtlist.lasttime = now;
 8001114:	62a3      	str	r3, [r4, #40]	; 0x28
 8001116:	1858      	adds	r0, r3, r1
      ch.vtlist.next = vtp;
 8001118:	ae01      	add	r6, sp, #4
  STM32_ST_TIM->SR     = 0;
 800111a:	2200      	movs	r2, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800111c:	2302      	movs	r3, #2
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 800111e:	e9cd 5501 	strd	r5, r5, [sp, #4]
      vtp->delta = delay;
 8001122:	9103      	str	r1, [sp, #12]
      ch.vtlist.prev = vtp;
 8001124:	e9c4 6607 	strd	r6, r6, [r4, #28]
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001128:	f8cc 0034 	str.w	r0, [ip, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800112c:	f8cc 2010 	str.w	r2, [ip, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001130:	f8cc 300c 	str.w	r3, [ip, #12]
 8001134:	e7ae      	b.n	8001094 <chSchGoSleepTimeoutS+0x64>
  STM32_ST_TIM->DIER = 0;
 8001136:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	e7bf      	b.n	80010be <chSchGoSleepTimeoutS+0x8e>
 800113e:	bf00      	nop
 8001140:	20000960 	.word	0x20000960
 8001144:	08000911 	.word	0x08000911
	...

08001150 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8001150:	b161      	cbz	r1, 800116c <chThdEnqueueTimeoutS+0x1c>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8001154:	b410      	push	{r4}
 8001156:	4602      	mov	r2, r0
  tp->queue.prev             = tqp->prev;
 8001158:	6844      	ldr	r4, [r0, #4]
  queue_insert(currp, tqp);
 800115a:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800115c:	2004      	movs	r0, #4
 800115e:	e9c3 2400 	strd	r2, r4, [r3]
  tp->queue.prev->queue.next = tp;
 8001162:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 8001164:	6053      	str	r3, [r2, #4]
}
 8001166:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001168:	f7ff bf62 	b.w	8001030 <chSchGoSleepTimeoutS>
}
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20000960 	.word	0x20000960
	...

08001180 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8001180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001182:	4604      	mov	r4, r0
 8001184:	460f      	mov	r7, r1
 8001186:	4616      	mov	r6, r2
 8001188:	2320      	movs	r3, #32
 800118a:	f383 8811 	msr	BASEPRI, r3
 800118e:	e003      	b.n	8001198 <oqPutTimeout+0x18>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
 8001190:	f7ff ffde 	bl	8001150 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8001194:	2800      	cmp	r0, #0
 8001196:	db18      	blt.n	80011ca <oqPutTimeout+0x4a>
  while (oqIsFullI(oqp)) {
 8001198:	68a5      	ldr	r5, [r4, #8]
 800119a:	4631      	mov	r1, r6
 800119c:	4620      	mov	r0, r4
 800119e:	2d00      	cmp	r5, #0
 80011a0:	d0f6      	beq.n	8001190 <oqPutTimeout+0x10>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 80011a2:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 80011a4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80011a6:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 80011a8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 80011aa:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 80011ac:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80011ae:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80011b0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80011b4:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 80011b6:	bf24      	itt	cs
 80011b8:	68e3      	ldrcs	r3, [r4, #12]
 80011ba:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 80011bc:	69e3      	ldr	r3, [r4, #28]
 80011be:	b103      	cbz	r3, 80011c2 <oqPutTimeout+0x42>
    oqp->q_notify(oqp);
 80011c0:	4798      	blx	r3
 80011c2:	2000      	movs	r0, #0
 80011c4:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();

  return MSG_OK;
}
 80011c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011ca:	f385 8811 	msr	BASEPRI, r5
 80011ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080011d0 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 80011d0:	3030      	adds	r0, #48	; 0x30
 80011d2:	f7ff bfd5 	b.w	8001180 <oqPutTimeout>
 80011d6:	bf00      	nop
	...

080011e0 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80011e0:	3030      	adds	r0, #48	; 0x30
 80011e2:	f04f 32ff 	mov.w	r2, #4294967295
 80011e6:	f7ff bfcb 	b.w	8001180 <oqPutTimeout>
 80011ea:	bf00      	nop
 80011ec:	0000      	movs	r0, r0
	...

080011f0 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 80011f0:	b570      	push	{r4, r5, r6, lr}
 80011f2:	2320      	movs	r3, #32
 80011f4:	4604      	mov	r4, r0
 80011f6:	460e      	mov	r6, r1
 80011f8:	f383 8811 	msr	BASEPRI, r3
 80011fc:	e003      	b.n	8001206 <iqGetTimeout+0x16>
 80011fe:	f7ff ffa7 	bl	8001150 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001202:	2800      	cmp	r0, #0
 8001204:	db1a      	blt.n	800123c <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 8001206:	68a5      	ldr	r5, [r4, #8]
 8001208:	4631      	mov	r1, r6
 800120a:	4620      	mov	r0, r4
 800120c:	2d00      	cmp	r5, #0
 800120e:	d0f6      	beq.n	80011fe <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 8001210:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8001212:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8001214:	6920      	ldr	r0, [r4, #16]
  b = *iqp->q_rdptr++;
 8001216:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8001218:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 800121a:	4282      	cmp	r2, r0
  iqp->q_counter--;
 800121c:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 800121e:	61a2      	str	r2, [r4, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8001220:	bf28      	it	cs
 8001222:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 8001224:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8001226:	bf28      	it	cs
 8001228:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 800122a:	69e3      	ldr	r3, [r4, #28]
 800122c:	b10b      	cbz	r3, 8001232 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 800122e:	4620      	mov	r0, r4
 8001230:	4798      	blx	r3
 8001232:	2300      	movs	r3, #0
 8001234:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8001238:	4628      	mov	r0, r5
}
 800123a:	bd70      	pop	{r4, r5, r6, pc}
 800123c:	f385 8811 	msr	BASEPRI, r5
 8001240:	bd70      	pop	{r4, r5, r6, pc}
 8001242:	bf00      	nop
	...

08001250 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8001250:	300c      	adds	r0, #12
 8001252:	f7ff bfcd 	b.w	80011f0 <iqGetTimeout>
 8001256:	bf00      	nop
	...

08001260 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001260:	300c      	adds	r0, #12
 8001262:	f04f 31ff 	mov.w	r1, #4294967295
 8001266:	f7ff bfc3 	b.w	80011f0 <iqGetTimeout>
 800126a:	bf00      	nop
 800126c:	0000      	movs	r0, r0
	...

08001270 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8001270:	b508      	push	{r3, lr}
 8001272:	4601      	mov	r1, r0
 8001274:	2320      	movs	r3, #32
 8001276:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800127a:	2008      	movs	r0, #8
 800127c:	f7ff fed8 	bl	8001030 <chSchGoSleepTimeoutS>
 8001280:	2300      	movs	r3, #0
 8001282:	f383 8811 	msr	BASEPRI, r3
}
 8001286:	bd08      	pop	{r3, pc}
	...

08001290 <Thread1>:

/*
 * Green LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 8001290:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <Thread1+0x24>)
 8001294:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <Thread1+0x28>)
 8001296:	699b      	ldr	r3, [r3, #24]

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    palClearPad(GPIOA, GPIOA_LED_GREEN);
 8001298:	4c08      	ldr	r4, [pc, #32]	; (80012bc <Thread1+0x2c>)
 800129a:	619a      	str	r2, [r3, #24]
 800129c:	2520      	movs	r5, #32
 800129e:	462e      	mov	r6, r5
 80012a0:	8366      	strh	r6, [r4, #26]
    chThdSleepMilliseconds(1);
 80012a2:	200a      	movs	r0, #10
 80012a4:	f7ff ffe4 	bl	8001270 <chThdSleep>
    palSetPad(GPIOA, GPIOA_LED_GREEN);
 80012a8:	8325      	strh	r5, [r4, #24]
    chThdSleepMilliseconds(1);
 80012aa:	200a      	movs	r0, #10
 80012ac:	f7ff ffe0 	bl	8001270 <chThdSleep>
 80012b0:	e7f6      	b.n	80012a0 <Thread1+0x10>
 80012b2:	bf00      	nop
 80012b4:	20000960 	.word	0x20000960
 80012b8:	08002a84 	.word	0x08002a84
 80012bc:	40020000 	.word	0x40020000

080012c0 <Thread2>:
 80012c0:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <Thread2+0x3c>)
 80012c2:	4a0f      	ldr	r2, [pc, #60]	; (8001300 <Thread2+0x40>)
 80012c4:	699b      	ldr	r3, [r3, #24]

static THD_WORKING_AREA(waThread2, 128);
static THD_FUNCTION(Thread2, arg) {
  (void) arg;
  chRegSetThreadName("VoltageTest");
  palSetPadMode(GPIOA, GPIOA_ARD_D8, PAL_MODE_OUTPUT_PUSHPULL);
 80012c6:	480f      	ldr	r0, [pc, #60]	; (8001304 <Thread2+0x44>)
 80012c8:	4d0f      	ldr	r5, [pc, #60]	; (8001308 <Thread2+0x48>)
  while (true) {
    palClearPad(GPIOA, GPIOA_ARD_D8);
 80012ca:	4c0e      	ldr	r4, [pc, #56]	; (8001304 <Thread2+0x44>)
static THD_FUNCTION(Thread2, arg) {
 80012cc:	b580      	push	{r7, lr}
  palSetPadMode(GPIOA, GPIOA_ARD_D8, PAL_MODE_OUTPUT_PUSHPULL);
 80012ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d2:	619a      	str	r2, [r3, #24]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f7ff fc73 	bl	8000bc0 <_pal_lld_setgroupmode>
    palClearPad(GPIOA, GPIOA_ARD_D8);
 80012da:	f44f 7600 	mov.w	r6, #512	; 0x200
 80012de:	4637      	mov	r7, r6
    chThdSleepMilliseconds(10);
 80012e0:	2064      	movs	r0, #100	; 0x64
    palClearPad(GPIOA, GPIOA_ARD_D8);
 80012e2:	8367      	strh	r7, [r4, #26]
    chThdSleepMilliseconds(10);
 80012e4:	f7ff ffc4 	bl	8001270 <chThdSleep>
    palSetPad(GPIOA, GPIOA_ARD_D8);
 80012e8:	8326      	strh	r6, [r4, #24]
    chThdSleepMilliseconds(10);
 80012ea:	2064      	movs	r0, #100	; 0x64
 80012ec:	f7ff ffc0 	bl	8001270 <chThdSleep>
    now = (now + 1) % 16;
 80012f0:	682b      	ldr	r3, [r5, #0]
 80012f2:	3301      	adds	r3, #1
 80012f4:	f003 030f 	and.w	r3, r3, #15
 80012f8:	602b      	str	r3, [r5, #0]
 80012fa:	e7f1      	b.n	80012e0 <Thread2+0x20>
 80012fc:	20000960 	.word	0x20000960
 8001300:	08002a8c 	.word	0x08002a8c
 8001304:	40020000 	.word	0x40020000
 8001308:	20000bac 	.word	0x20000bac
 800130c:	00000000 	.word	0x00000000

08001310 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8001310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001314:	b083      	sub	sp, #12
 8001316:	4617      	mov	r7, r2
 8001318:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800131a:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 800131e:	f04f 0b20 	mov.w	fp, #32
 8001322:	f38b 8811 	msr	BASEPRI, fp

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (wr < n) {
 8001326:	2a00      	cmp	r2, #0
 8001328:	d04e      	beq.n	80013c8 <oqWriteTimeout+0xb8>
 800132a:	4604      	mov	r4, r0
 800132c:	460e      	mov	r6, r1
  size_t wr = 0;
 800132e:	f04f 0800 	mov.w	r8, #0
 8001332:	e00d      	b.n	8001350 <oqWriteTimeout+0x40>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8001334:	f1ba 0f00 	cmp.w	sl, #0
 8001338:	d001      	beq.n	800133e <oqWriteTimeout+0x2e>
        nfy(oqp);
 800133a:	4620      	mov	r0, r4
 800133c:	47d0      	blx	sl
 800133e:	2300      	movs	r3, #0
 8001340:	f383 8811 	msr	BASEPRI, r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      wr += done;
 8001344:	44a8      	add	r8, r5
      bp += done;
 8001346:	442e      	add	r6, r5
 8001348:	f38b 8811 	msr	BASEPRI, fp
  while (wr < n) {
 800134c:	4547      	cmp	r7, r8
 800134e:	d91b      	bls.n	8001388 <oqWriteTimeout+0x78>
  if (n > oqGetEmptyI(oqp)) {
 8001350:	68a3      	ldr	r3, [r4, #8]
 8001352:	429f      	cmp	r7, r3
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8001354:	e9d4 3004 	ldrd	r3, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 8001358:	bf8c      	ite	hi
 800135a:	68a5      	ldrhi	r5, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 800135c:	463d      	movls	r5, r7
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 800135e:	1a1b      	subs	r3, r3, r0
  if (n < s1) {
 8001360:	42ab      	cmp	r3, r5
 8001362:	d829      	bhi.n	80013b8 <oqWriteTimeout+0xa8>
  else if (n > s1) {
 8001364:	d317      	bcc.n	8001396 <oqWriteTimeout+0x86>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8001366:	462a      	mov	r2, r5
 8001368:	4631      	mov	r1, r6
 800136a:	f7ff f93d 	bl	80005e8 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 800136e:	68e3      	ldr	r3, [r4, #12]
 8001370:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 8001372:	68a3      	ldr	r3, [r4, #8]
 8001374:	1b5b      	subs	r3, r3, r5
 8001376:	60a3      	str	r3, [r4, #8]
    if (done == (size_t)0) {
 8001378:	2d00      	cmp	r5, #0
 800137a:	d1db      	bne.n	8001334 <oqWriteTimeout+0x24>
 800137c:	9901      	ldr	r1, [sp, #4]
 800137e:	4620      	mov	r0, r4
 8001380:	f7ff fee6 	bl	8001150 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8001384:	2800      	cmp	r0, #0
 8001386:	d0e1      	beq.n	800134c <oqWriteTimeout+0x3c>
 8001388:	2300      	movs	r3, #0
 800138a:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return wr;
}
 800138e:	4640      	mov	r0, r8
 8001390:	b003      	add	sp, #12
 8001392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8001396:	461a      	mov	r2, r3
 8001398:	4631      	mov	r1, r6
    s2 = n - s1;
 800139a:	eba5 0903 	sub.w	r9, r5, r3
 800139e:	9300      	str	r3, [sp, #0]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 80013a0:	f7ff f922 	bl	80005e8 <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 80013a4:	9b00      	ldr	r3, [sp, #0]
 80013a6:	68e0      	ldr	r0, [r4, #12]
 80013a8:	18f1      	adds	r1, r6, r3
 80013aa:	464a      	mov	r2, r9
 80013ac:	f7ff f91c 	bl	80005e8 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 80013b0:	68e3      	ldr	r3, [r4, #12]
 80013b2:	444b      	add	r3, r9
 80013b4:	6163      	str	r3, [r4, #20]
 80013b6:	e7dc      	b.n	8001372 <oqWriteTimeout+0x62>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80013b8:	462a      	mov	r2, r5
 80013ba:	4631      	mov	r1, r6
 80013bc:	f7ff f914 	bl	80005e8 <memcpy>
    oqp->q_wrptr += n;
 80013c0:	6963      	ldr	r3, [r4, #20]
 80013c2:	442b      	add	r3, r5
 80013c4:	6163      	str	r3, [r4, #20]
 80013c6:	e7d4      	b.n	8001372 <oqWriteTimeout+0x62>
  size_t wr = 0;
 80013c8:	4690      	mov	r8, r2
 80013ca:	e7dd      	b.n	8001388 <oqWriteTimeout+0x78>
 80013cc:	0000      	movs	r0, r0
	...

080013d0 <sendSyncSignal>:
    last_update_count = now;
    return TRUE;
  }
  return FALSE;
}
void sendSyncSignal (uint8_t signal) {
 80013d0:	b510      	push	{r4, lr}
 80013d2:	b084      	sub	sp, #16
  V12_STATS signal_data;
  memset (&signal_data, 0b01010101, sizeof (V12_STATS));
 80013d4:	f04f 3455 	mov.w	r4, #1431655765	; 0x55555555
 80013d8:	9401      	str	r4, [sp, #4]
  ((uint8_t *) &signal_data) [7] = signal;
  sdWrite (&SD2, (uint8_t *) &signal_data, sizeof (V12_STATS));
 80013da:	4669      	mov	r1, sp
  ((uint8_t *) &signal_data) [7] = signal;
 80013dc:	f88d 0007 	strb.w	r0, [sp, #7]
  sdWrite (&SD2, (uint8_t *) &signal_data, sizeof (V12_STATS));
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295
 80013e4:	2210      	movs	r2, #16
 80013e6:	4804      	ldr	r0, [pc, #16]	; (80013f8 <sendSyncSignal+0x28>)
  memset (&signal_data, 0b01010101, sizeof (V12_STATS));
 80013e8:	9400      	str	r4, [sp, #0]
 80013ea:	e9cd 4402 	strd	r4, r4, [sp, #8]
  sdWrite (&SD2, (uint8_t *) &signal_data, sizeof (V12_STATS));
 80013ee:	f7ff ff8f 	bl	8001310 <oqWriteTimeout>
}
 80013f2:	b004      	add	sp, #16
 80013f4:	bd10      	pop	{r4, pc}
 80013f6:	bf00      	nop
 80013f8:	20000914 	.word	0x20000914
 80013fc:	00000000 	.word	0x00000000

08001400 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8001400:	3030      	adds	r0, #48	; 0x30
 8001402:	f7ff bf85 	b.w	8001310 <oqWriteTimeout>
 8001406:	bf00      	nop
	...

08001410 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8001410:	3030      	adds	r0, #48	; 0x30
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	f7ff bf7b 	b.w	8001310 <oqWriteTimeout>
 800141a:	bf00      	nop
 800141c:	0000      	movs	r0, r0
	...

08001420 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8001420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001424:	b083      	sub	sp, #12
 8001426:	4617      	mov	r7, r2
 8001428:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = iqp->q_notify;
 800142a:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 800142e:	f04f 0b20 	mov.w	fp, #32
 8001432:	f38b 8811 	msr	BASEPRI, fp
  while (rd < n) {
 8001436:	2a00      	cmp	r2, #0
 8001438:	d04e      	beq.n	80014d8 <iqReadTimeout+0xb8>
 800143a:	4604      	mov	r4, r0
 800143c:	460e      	mov	r6, r1
  size_t rd = 0;
 800143e:	f04f 0800 	mov.w	r8, #0
 8001442:	e00d      	b.n	8001460 <iqReadTimeout+0x40>
      if (nfy != NULL) {
 8001444:	f1ba 0f00 	cmp.w	sl, #0
 8001448:	d001      	beq.n	800144e <iqReadTimeout+0x2e>
        nfy(iqp);
 800144a:	4620      	mov	r0, r4
 800144c:	47d0      	blx	sl
 800144e:	2300      	movs	r3, #0
 8001450:	f383 8811 	msr	BASEPRI, r3
      rd += done;
 8001454:	44a8      	add	r8, r5
      bp += done;
 8001456:	442e      	add	r6, r5
 8001458:	f38b 8811 	msr	BASEPRI, fp
  while (rd < n) {
 800145c:	4547      	cmp	r7, r8
 800145e:	d91b      	bls.n	8001498 <iqReadTimeout+0x78>
  if (n > iqGetFullI(iqp)) {
 8001460:	68a3      	ldr	r3, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8001462:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 8001464:	429f      	cmp	r7, r3
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8001466:	6923      	ldr	r3, [r4, #16]
    n = iqGetFullI(iqp);
 8001468:	bf8c      	ite	hi
 800146a:	68a5      	ldrhi	r5, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 800146c:	463d      	movls	r5, r7
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800146e:	1a5b      	subs	r3, r3, r1
  if (n < s1) {
 8001470:	42ab      	cmp	r3, r5
 8001472:	d829      	bhi.n	80014c8 <iqReadTimeout+0xa8>
  else if (n > s1) {
 8001474:	d317      	bcc.n	80014a6 <iqReadTimeout+0x86>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8001476:	462a      	mov	r2, r5
 8001478:	4630      	mov	r0, r6
 800147a:	f7ff f8b5 	bl	80005e8 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 800147e:	68e3      	ldr	r3, [r4, #12]
 8001480:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 8001482:	68a3      	ldr	r3, [r4, #8]
 8001484:	1b5b      	subs	r3, r3, r5
 8001486:	60a3      	str	r3, [r4, #8]
    if (done == (size_t)0) {
 8001488:	2d00      	cmp	r5, #0
 800148a:	d1db      	bne.n	8001444 <iqReadTimeout+0x24>
 800148c:	9901      	ldr	r1, [sp, #4]
 800148e:	4620      	mov	r0, r4
 8001490:	f7ff fe5e 	bl	8001150 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8001494:	2800      	cmp	r0, #0
 8001496:	d0e1      	beq.n	800145c <iqReadTimeout+0x3c>
 8001498:	2300      	movs	r3, #0
 800149a:	f383 8811 	msr	BASEPRI, r3
}
 800149e:	4640      	mov	r0, r8
 80014a0:	b003      	add	sp, #12
 80014a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80014a6:	461a      	mov	r2, r3
 80014a8:	4630      	mov	r0, r6
    s2 = n - s1;
 80014aa:	eba5 0903 	sub.w	r9, r5, r3
 80014ae:	9300      	str	r3, [sp, #0]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80014b0:	f7ff f89a 	bl	80005e8 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 80014b4:	9b00      	ldr	r3, [sp, #0]
 80014b6:	68e1      	ldr	r1, [r4, #12]
 80014b8:	18f0      	adds	r0, r6, r3
 80014ba:	464a      	mov	r2, r9
 80014bc:	f7ff f894 	bl	80005e8 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 80014c0:	68e3      	ldr	r3, [r4, #12]
 80014c2:	444b      	add	r3, r9
 80014c4:	61a3      	str	r3, [r4, #24]
 80014c6:	e7dc      	b.n	8001482 <iqReadTimeout+0x62>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80014c8:	462a      	mov	r2, r5
 80014ca:	4630      	mov	r0, r6
 80014cc:	f7ff f88c 	bl	80005e8 <memcpy>
    iqp->q_rdptr += n;
 80014d0:	69a3      	ldr	r3, [r4, #24]
 80014d2:	442b      	add	r3, r5
 80014d4:	61a3      	str	r3, [r4, #24]
 80014d6:	e7d4      	b.n	8001482 <iqReadTimeout+0x62>
  size_t rd = 0;
 80014d8:	4690      	mov	r8, r2
 80014da:	e7dd      	b.n	8001498 <iqReadTimeout+0x78>
 80014dc:	0000      	movs	r0, r0
	...

080014e0 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80014e0:	300c      	adds	r0, #12
 80014e2:	f7ff bf9d 	b.w	8001420 <iqReadTimeout>
 80014e6:	bf00      	nop
	...

080014f0 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80014f0:	300c      	adds	r0, #12
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
 80014f6:	f7ff bf93 	b.w	8001420 <iqReadTimeout>
 80014fa:	bf00      	nop
 80014fc:	0000      	movs	r0, r0
	...

08001500 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001500:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
 8001504:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001506:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800150a:	2300      	movs	r3, #0
 800150c:	f383 8811 	msr	BASEPRI, r3
}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
	...

08001520 <chThdExit>:
void chThdExit(msg_t msg) {
 8001520:	b538      	push	{r3, r4, r5, lr}
 8001522:	2220      	movs	r2, #32
 8001524:	4603      	mov	r3, r0
 8001526:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
 800152a:	4a10      	ldr	r2, [pc, #64]	; (800156c <chThdExit+0x4c>)
 800152c:	6994      	ldr	r4, [r2, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 800152e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 8001530:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8001532:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8001536:	42a8      	cmp	r0, r5
 8001538:	d006      	beq.n	8001548 <chThdExit+0x28>
  tlp->next = tp->queue.next;
 800153a:	6803      	ldr	r3, [r0, #0]
 800153c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 800153e:	f7ff fa1f 	bl	8000980 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 8001542:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8001544:	42a8      	cmp	r0, r5
 8001546:	d1f8      	bne.n	800153a <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
 8001548:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800154c:	b943      	cbnz	r3, 8001560 <chThdExit+0x40>
 800154e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8001552:	079b      	lsls	r3, r3, #30
 8001554:	d104      	bne.n	8001560 <chThdExit+0x40>
    REG_REMOVE(tp);
 8001556:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800155a:	611a      	str	r2, [r3, #16]
 800155c:	6922      	ldr	r2, [r4, #16]
 800155e:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 8001560:	200f      	movs	r0, #15
}
 8001562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8001566:	f7ff bcb3 	b.w	8000ed0 <chSchGoSleepS>
 800156a:	bf00      	nop
 800156c:	20000960 	.word	0x20000960

08001570 <chSchDoReschedule>:
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;
 8001570:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <chSchDoReschedule+0x3c>)
  thread_t *tp = tqp->next;
 8001572:	6810      	ldr	r0, [r2, #0]
  tqp->next             = tp->queue.next;
 8001574:	6803      	ldr	r3, [r0, #0]
void chSchDoRescheduleAhead(void) {
 8001576:	b430      	push	{r4, r5}

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8001578:	2101      	movs	r1, #1
  thread_t *otp = currp;
 800157a:	6994      	ldr	r4, [r2, #24]
  tqp->next->queue.prev = (thread_t *)tqp;
 800157c:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 800157e:	2500      	movs	r5, #0
  currp->state = CH_STATE_CURRENT;
 8001580:	f880 1020 	strb.w	r1, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 8001584:	68a1      	ldr	r1, [r4, #8]
  tqp->next             = tp->queue.next;
 8001586:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8001588:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 800158a:	f884 5020 	strb.w	r5, [r4, #32]
 800158e:	e000      	b.n	8001592 <chSchDoReschedule+0x22>
 8001590:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	4291      	cmp	r1, r2
 8001596:	d3fb      	bcc.n	8001590 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 8001598:	685a      	ldr	r2, [r3, #4]

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800159a:	4621      	mov	r1, r4
  tp->queue.prev             = cp->queue.prev;
 800159c:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 80015a0:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80015a2:	605c      	str	r4, [r3, #4]
}
 80015a4:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
 80015a6:	f7fe be8b 	b.w	80002c0 <_port_switch>
 80015aa:	bf00      	nop
 80015ac:	20000960 	.word	0x20000960

080015b0 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.queue) > currp->prio;
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <chSchRescheduleS+0x14>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	699b      	ldr	r3, [r3, #24]
  if (chSchIsRescRequiredI()) {
 80015b6:	6892      	ldr	r2, [r2, #8]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d800      	bhi.n	80015c0 <chSchRescheduleS+0x10>
}
 80015be:	4770      	bx	lr
    chSchDoRescheduleAhead();
 80015c0:	f7ff bfd6 	b.w	8001570 <chSchDoReschedule>
 80015c4:	20000960 	.word	0x20000960
	...

080015d0 <chMtxUnlock.constprop.2>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 80015d0:	4a17      	ldr	r2, [pc, #92]	; (8001630 <chMtxUnlock.constprop.2+0x60>)
void chMtxUnlock(mutex_t *mp) {
 80015d2:	b538      	push	{r3, r4, r5, lr}
 80015d4:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 80015d6:	6995      	ldr	r5, [r2, #24]
 80015d8:	f383 8811 	msr	BASEPRI, r3
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 80015dc:	4915      	ldr	r1, [pc, #84]	; (8001634 <chMtxUnlock.constprop.2+0x64>)
  return (bool)(tqp->next != (const thread_t *)tqp);
 80015de:	680c      	ldr	r4, [r1, #0]
 80015e0:	68cb      	ldr	r3, [r1, #12]
 80015e2:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 80015e4:	428c      	cmp	r4, r1
 80015e6:	d01c      	beq.n	8001622 <chMtxUnlock.constprop.2+0x52>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 80015e8:	6be8      	ldr	r0, [r5, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 80015ea:	b14b      	cbz	r3, 8001600 <chMtxUnlock.constprop.2+0x30>
 80015ec:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d003      	beq.n	80015fa <chMtxUnlock.constprop.2+0x2a>
 80015f2:	6892      	ldr	r2, [r2, #8]
 80015f4:	4290      	cmp	r0, r2
 80015f6:	bf38      	it	cc
 80015f8:	4610      	movcc	r0, r2
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 80015fa:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1f5      	bne.n	80015ec <chMtxUnlock.constprop.2+0x1c>
  tqp->next             = tp->queue.next;
 8001600:	6823      	ldr	r3, [r4, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 8001602:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      ctp->prio = newprio;
 8001604:	60a8      	str	r0, [r5, #8]
 8001606:	600b      	str	r3, [r1, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001608:	6059      	str	r1, [r3, #4]

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 800160a:	4620      	mov	r0, r4
      tp->mtxlist = mp;
 800160c:	63a1      	str	r1, [r4, #56]	; 0x38
      mp->next = tp->mtxlist;
 800160e:	e9c1 4202 	strd	r4, r2, [r1, #8]
      (void) chSchReadyI(tp);
 8001612:	f7ff f9b5 	bl	8000980 <chSchReadyI>
      chSchRescheduleS();
 8001616:	f7ff ffcb 	bl	80015b0 <chSchRescheduleS>
 800161a:	2300      	movs	r3, #0
 800161c:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif

  chSysUnlock();
}
 8001620:	bd38      	pop	{r3, r4, r5, pc}
      mp->owner = NULL;
 8001622:	2300      	movs	r3, #0
 8001624:	60a3      	str	r3, [r4, #8]
 8001626:	2300      	movs	r3, #0
 8001628:	f383 8811 	msr	BASEPRI, r3
}
 800162c:	bd38      	pop	{r3, r4, r5, pc}
 800162e:	bf00      	nop
 8001630:	20000960 	.word	0x20000960
 8001634:	20004bb4 	.word	0x20004bb4
	...

08001640 <Thread3>:
static THD_FUNCTION(Thread3, arg) {
 8001640:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001644:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 8001808 <Thread3+0x1c8>
 8001648:	4a64      	ldr	r2, [pc, #400]	; (80017dc <Thread3+0x19c>)
 800164a:	f8db 3018 	ldr.w	r3, [fp, #24]
 800164e:	4c64      	ldr	r4, [pc, #400]	; (80017e0 <Thread3+0x1a0>)
 8001650:	4d64      	ldr	r5, [pc, #400]	; (80017e4 <Thread3+0x1a4>)
 8001652:	b087      	sub	sp, #28
 8001654:	9200      	str	r2, [sp, #0]
 8001656:	4a64      	ldr	r2, [pc, #400]	; (80017e8 <Thread3+0x1a8>)
 8001658:	9201      	str	r2, [sp, #4]
 800165a:	4a64      	ldr	r2, [pc, #400]	; (80017ec <Thread3+0x1ac>)
 800165c:	619a      	str	r2, [r3, #24]
    chThdSleepMicroseconds (1);
 800165e:	2001      	movs	r0, #1
 8001660:	f7ff fe06 	bl	8001270 <chThdSleep>
 8001664:	2320      	movs	r3, #32
 8001666:	f383 8811 	msr	BASEPRI, r3
                (adcp->state == ADC_COMPLETE) ||
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
 800166a:	2301      	movs	r3, #1
 800166c:	60e3      	str	r3, [r4, #12]
  adcp->grpp     = grpp;
 800166e:	4b60      	ldr	r3, [pc, #384]	; (80017f0 <Thread3+0x1b0>)
 8001670:	6123      	str	r3, [r4, #16]
  adcp->state    = ADC_ACTIVE;
 8001672:	f04f 0303 	mov.w	r3, #3
 8001676:	7023      	strb	r3, [r4, #0]
  adcp->samples  = samples;
 8001678:	60a5      	str	r5, [r4, #8]
  adc_lld_start_conversion(adcp);
 800167a:	f7ff f851 	bl	8000720 <adc_lld_start_conversion.constprop.25>
  return ch.rlist.current;
 800167e:	f8db 3018 	ldr.w	r3, [fp, #24]
  tp->u.wttrp = trp;
 8001682:	4a5c      	ldr	r2, [pc, #368]	; (80017f4 <Thread3+0x1b4>)
 8001684:	625a      	str	r2, [r3, #36]	; 0x24
    chSchGoSleepS(newstate);
 8001686:	2003      	movs	r0, #3
  *trp = tp;
 8001688:	6163      	str	r3, [r4, #20]
 800168a:	f7ff fc21 	bl	8000ed0 <chSchGoSleepS>
 800168e:	2300      	movs	r3, #0
 8001690:	f383 8811 	msr	BASEPRI, r3
    v_a[0] = samples1[0];
 8001694:	9a00      	ldr	r2, [sp, #0]
 8001696:	882b      	ldrh	r3, [r5, #0]
 8001698:	4f50      	ldr	r7, [pc, #320]	; (80017dc <Thread3+0x19c>)
 800169a:	8013      	strh	r3, [r2, #0]
    v_b[1] = samples1[1];
 800169c:	4e52      	ldr	r6, [pc, #328]	; (80017e8 <Thread3+0x1a8>)
 800169e:	9a01      	ldr	r2, [sp, #4]
 80016a0:	886b      	ldrh	r3, [r5, #2]
 80016a2:	8053      	strh	r3, [r2, #2]
 80016a4:	46b9      	mov	r9, r7
 80016a6:	9700      	str	r7, [sp, #0]
 80016a8:	46b0      	mov	r8, r6
      chThdSleepMicroseconds (1);
 80016aa:	2001      	movs	r0, #1
 80016ac:	f7ff fde0 	bl	8001270 <chThdSleep>
 80016b0:	2320      	movs	r3, #32
 80016b2:	f383 8811 	msr	BASEPRI, r3
  adcp->depth    = depth;
 80016b6:	2301      	movs	r3, #1
 80016b8:	60e3      	str	r3, [r4, #12]
  adcp->grpp     = grpp;
 80016ba:	4b4d      	ldr	r3, [pc, #308]	; (80017f0 <Thread3+0x1b0>)
 80016bc:	6123      	str	r3, [r4, #16]
  adcp->state    = ADC_ACTIVE;
 80016be:	f04f 0303 	mov.w	r3, #3
 80016c2:	7023      	strb	r3, [r4, #0]
  adcp->samples  = samples;
 80016c4:	60a5      	str	r5, [r4, #8]
  adc_lld_start_conversion(adcp);
 80016c6:	f7ff f82b 	bl	8000720 <adc_lld_start_conversion.constprop.25>
 80016ca:	f8db 3018 	ldr.w	r3, [fp, #24]
  tp->u.wttrp = trp;
 80016ce:	4a49      	ldr	r2, [pc, #292]	; (80017f4 <Thread3+0x1b4>)
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24
 80016d2:	2003      	movs	r0, #3
  *trp = tp;
 80016d4:	6163      	str	r3, [r4, #20]
 80016d6:	f7ff fbfb 	bl	8000ed0 <chSchGoSleepS>
 80016da:	2300      	movs	r3, #0
 80016dc:	f383 8811 	msr	BASEPRI, r3
      v_a[i] = samples1[0];
 80016e0:	882b      	ldrh	r3, [r5, #0]
 80016e2:	f829 3f02 	strh.w	r3, [r9, #2]!
      v_b[i] = samples1[1];
 80016e6:	886b      	ldrh	r3, [r5, #2]
 80016e8:	f828 3f02 	strh.w	r3, [r8, #2]!
    for (i = 1; i < (1 << V_BUF_SZ_LOG2); i++) {
 80016ec:	4b42      	ldr	r3, [pc, #264]	; (80017f8 <Thread3+0x1b8>)
 80016ee:	454b      	cmp	r3, r9
 80016f0:	d1db      	bne.n	80016aa <Thread3+0x6a>
  uint32_t sum = buf[0];
 80016f2:	9b00      	ldr	r3, [sp, #0]
 80016f4:	4a39      	ldr	r2, [pc, #228]	; (80017dc <Thread3+0x19c>)
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	9200      	str	r2, [sp, #0]
 80016fa:	4698      	mov	r8, r3
  *dest_max = buf[0];
 80016fc:	469c      	mov	ip, r3
  *dest_min = buf[0];
 80016fe:	4618      	mov	r0, r3
    if (buf[i] > *dest_max)
 8001700:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 8001704:	458c      	cmp	ip, r1
 8001706:	bf38      	it	cc
 8001708:	468c      	movcc	ip, r1
 800170a:	4288      	cmp	r0, r1
 800170c:	bf28      	it	cs
 800170e:	4608      	movcs	r0, r1
  for (i = 1; i < count; i++) {
 8001710:	4591      	cmp	r9, r2
    sum += buf[i];
 8001712:	4488      	add	r8, r1
  for (i = 1; i < count; i++) {
 8001714:	d1f4      	bne.n	8001700 <Thread3+0xc0>
 8001716:	f8cd c008 	str.w	ip, [sp, #8]
  uint32_t mean = mean_sum >> (log2_of_count - STD_CALC_EXTRA_BITS);
 800171a:	ea4f 2198 	mov.w	r1, r8, lsr #10
  uint32_t std_sum = 0;
 800171e:	f04f 0a00 	mov.w	sl, #0
 8001722:	e001      	b.n	8001728 <Thread3+0xe8>
 8001724:	f837 3f02 	ldrh.w	r3, [r7, #2]!
    uint32_t x = (buf[i] << STD_CALC_EXTRA_BITS) - mean;
 8001728:	ebc1 0383 	rsb	r3, r1, r3, lsl #2
    std_sum += (x * x) >> (STD_CALC_EXTRA_BITS * 2);
 800172c:	fb03 f303 	mul.w	r3, r3, r3
  for (i = 0; i < count; i++) {
 8001730:	42ba      	cmp	r2, r7
    std_sum += (x * x) >> (STD_CALC_EXTRA_BITS * 2);
 8001732:	eb0a 1a13 	add.w	sl, sl, r3, lsr #4
  for (i = 0; i < count; i++) {
 8001736:	d1f5      	bne.n	8001724 <Thread3+0xe4>
  uint32_t sum = buf[0];
 8001738:	4b2b      	ldr	r3, [pc, #172]	; (80017e8 <Thread3+0x1a8>)
 800173a:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 80017e8 <Thread3+0x1a8>
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	f8cd c004 	str.w	ip, [sp, #4]
 8001744:	461f      	mov	r7, r3
  *dest_max = buf[0];
 8001746:	4699      	mov	r9, r3
 8001748:	461a      	mov	r2, r3
  *dest_min = buf[0];
 800174a:	4619      	mov	r1, r3
    if (buf[i] > *dest_max)
 800174c:	f83c ef02 	ldrh.w	lr, [ip, #2]!
  for (i = 1; i < count; i++) {
 8001750:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <Thread3+0x1bc>)
 8001752:	4572      	cmp	r2, lr
 8001754:	bf38      	it	cc
 8001756:	4672      	movcc	r2, lr
 8001758:	4571      	cmp	r1, lr
 800175a:	bf28      	it	cs
 800175c:	4671      	movcs	r1, lr
 800175e:	4563      	cmp	r3, ip
    sum += buf[i];
 8001760:	4477      	add	r7, lr
  for (i = 1; i < count; i++) {
 8001762:	d1f3      	bne.n	800174c <Thread3+0x10c>
 8001764:	464b      	mov	r3, r9
  uint32_t mean = mean_sum >> (log2_of_count - STD_CALC_EXTRA_BITS);
 8001766:	ea4f 2e97 	mov.w	lr, r7, lsr #10
  uint32_t std_sum = 0;
 800176a:	f04f 0900 	mov.w	r9, #0
 800176e:	e001      	b.n	8001774 <Thread3+0x134>
 8001770:	f836 3f02 	ldrh.w	r3, [r6, #2]!
    uint32_t x = (buf[i] << STD_CALC_EXTRA_BITS) - mean;
 8001774:	ebce 0383 	rsb	r3, lr, r3, lsl #2
    std_sum += (x * x) >> (STD_CALC_EXTRA_BITS * 2);
 8001778:	fb03 f303 	mul.w	r3, r3, r3
  for (i = 0; i < count; i++) {
 800177c:	45b4      	cmp	ip, r6
    std_sum += (x * x) >> (STD_CALC_EXTRA_BITS * 2);
 800177e:	eb09 1913 	add.w	r9, r9, r3, lsr #4
  for (i = 0; i < count; i++) {
 8001782:	d1f5      	bne.n	8001770 <Thread3+0x130>
 8001784:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8001788:	9003      	str	r0, [sp, #12]
 800178a:	2320      	movs	r3, #32
 800178c:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 8001790:	f7ff fbde 	bl	8000f50 <chMtxLockS.constprop.4>
 8001794:	2300      	movs	r3, #0
 8001796:	f383 8811 	msr	BASEPRI, r3
    vstat_obj.v1.v_min = a_min;
 800179a:	4a19      	ldr	r2, [pc, #100]	; (8001800 <Thread3+0x1c0>)
    vstat_update_count++; // It's okay if it rolls over on overflow.
 800179c:	4e19      	ldr	r6, [pc, #100]	; (8001804 <Thread3+0x1c4>)
    vstat_obj.v1.v_max = a_max;
 800179e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    vstat_update_count++; // It's okay if it rolls over on overflow.
 80017a2:	7833      	ldrb	r3, [r6, #0]
    vstat_obj.v1.v_max = a_max;
 80017a4:	80d1      	strh	r1, [r2, #6]
    vstat_obj.v2.v_min = b_min;
 80017a6:	9904      	ldr	r1, [sp, #16]
    vstat_obj.v1.v_min = a_min;
 80017a8:	9803      	ldr	r0, [sp, #12]
    vstat_obj.v2.v_min = b_min;
 80017aa:	8191      	strh	r1, [r2, #12]
    vstat_obj.v1.v_mean = a_mean_sum >> (V_BUF_SZ_LOG2 - V_RESULT_KEEP_LSB_EXTRA_BITS);
 80017ac:	ea4f 2818 	mov.w	r8, r8, lsr #8
    vstat_obj.v2.v_max = b_max;
 80017b0:	4611      	mov	r1, r2
    vstat_obj.v1.v_var = a_var_sum >> (V_BUF_SZ_LOG2 - V_RESULT_KEEP_LSB_EXTRA_BITS);
 80017b2:	f3ca 2a07 	ubfx	sl, sl, #8, #8
    vstat_obj.v2.v_mean = b_mean_sum >> (V_BUF_SZ_LOG2 - V_RESULT_KEEP_LSB_EXTRA_BITS);
 80017b6:	0a3f      	lsrs	r7, r7, #8
    vstat_obj.v2.v_var = b_var_sum >> (V_BUF_SZ_LOG2 - V_RESULT_KEEP_LSB_EXTRA_BITS);
 80017b8:	f3c9 2907 	ubfx	r9, r9, #8, #8
    vstat_obj.v1.v_min = a_min;
 80017bc:	8090      	strh	r0, [r2, #4]
    vstat_update_count++; // It's okay if it rolls over on overflow.
 80017be:	3301      	adds	r3, #1
    vstat_obj.v1.v_mean = a_mean_sum >> (V_BUF_SZ_LOG2 - V_RESULT_KEEP_LSB_EXTRA_BITS);
 80017c0:	f8a2 8000 	strh.w	r8, [r2]
    vstat_obj.v1.v_var = a_var_sum >> (V_BUF_SZ_LOG2 - V_RESULT_KEEP_LSB_EXTRA_BITS);
 80017c4:	f8a2 a002 	strh.w	sl, [r2, #2]
    vstat_obj.v2.v_mean = b_mean_sum >> (V_BUF_SZ_LOG2 - V_RESULT_KEEP_LSB_EXTRA_BITS);
 80017c8:	8117      	strh	r7, [r2, #8]
    vstat_obj.v2.v_var = b_var_sum >> (V_BUF_SZ_LOG2 - V_RESULT_KEEP_LSB_EXTRA_BITS);
 80017ca:	f8a2 900a 	strh.w	r9, [r2, #10]
    vstat_obj.v2.v_max = b_max;
 80017ce:	9a05      	ldr	r2, [sp, #20]
 80017d0:	81ca      	strh	r2, [r1, #14]
    vstat_update_count++; // It's okay if it rolls over on overflow.
 80017d2:	7033      	strb	r3, [r6, #0]
    chMtxUnlock (&vstat_mtx);
 80017d4:	f7ff fefc 	bl	80015d0 <chMtxUnlock.constprop.2>
 80017d8:	e741      	b.n	800165e <Thread3+0x1e>
 80017da:	bf00      	nop
 80017dc:	20000bb4 	.word	0x20000bb4
 80017e0:	20000878 	.word	0x20000878
 80017e4:	20000bb0 	.word	0x20000bb0
 80017e8:	20002bb4 	.word	0x20002bb4
 80017ec:	08002a98 	.word	0x08002a98
 80017f0:	08002b78 	.word	0x08002b78
 80017f4:	2000088c 	.word	0x2000088c
 80017f8:	20002bb2 	.word	0x20002bb2
 80017fc:	20004bb2 	.word	0x20004bb2
 8001800:	20004bc4 	.word	0x20004bc4
 8001804:	20004bd4 	.word	0x20004bd4
 8001808:	20000960 	.word	0x20000960
 800180c:	00000000 	.word	0x00000000

08001810 <readVoltageStats>:

void readVoltageStats (V12_STATS * dest_stats) {
 8001810:	b530      	push	{r4, r5, lr}
 8001812:	2320      	movs	r3, #32
 8001814:	b085      	sub	sp, #20
 8001816:	4605      	mov	r5, r0
 8001818:	f383 8811 	msr	BASEPRI, r3
 800181c:	f7ff fb98 	bl	8000f50 <chMtxLockS.constprop.4>
 8001820:	2300      	movs	r3, #0
 8001822:	f383 8811 	msr	BASEPRI, r3
  V12_STATS my_copy;
  chMtxLock (&vstat_mtx);
  my_copy = vstat_obj;
 8001826:	4b07      	ldr	r3, [pc, #28]	; (8001844 <readVoltageStats+0x34>)
 8001828:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800182a:	466c      	mov	r4, sp
 800182c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  chMtxUnlock (&vstat_mtx);
 8001830:	f7ff fece 	bl	80015d0 <chMtxUnlock.constprop.2>
  *dest_stats = my_copy;
 8001834:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001836:	6028      	str	r0, [r5, #0]
 8001838:	6069      	str	r1, [r5, #4]
 800183a:	60aa      	str	r2, [r5, #8]
 800183c:	60eb      	str	r3, [r5, #12]
}
 800183e:	b005      	add	sp, #20
 8001840:	bd30      	pop	{r4, r5, pc}
 8001842:	bf00      	nop
 8001844:	20004bc4 	.word	0x20004bc4
	...

08001850 <waitForStableVoltage>:
#define abs(x) (x < 0 ? -x : x)
void waitForStableVoltage (uint16_t wait_amounts_ms) {
 8001850:	b570      	push	{r4, r5, r6, lr}
 8001852:	b088      	sub	sp, #32
  V12_STATS prev;
  V12_STATS now;
  readVoltageStats (&prev);
 8001854:	ad04      	add	r5, sp, #16
void waitForStableVoltage (uint16_t wait_amounts_ms) {
 8001856:	4604      	mov	r4, r0
  readVoltageStats (&prev);
 8001858:	4628      	mov	r0, r5
 800185a:	f7ff ffd9 	bl	8001810 <readVoltageStats>
  chThdSleepMilliseconds (wait_amounts_ms);
 800185e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001862:	f240 30e7 	movw	r0, #999	; 0x3e7
 8001866:	2100      	movs	r1, #0
 8001868:	fbe4 0103 	umlal	r0, r1, r4, r3
 800186c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001870:	2300      	movs	r3, #0
 8001872:	f7fe fd39 	bl	80002e8 <__aeabi_uldivmod>
  readVoltageStats (&now);
 8001876:	466c      	mov	r4, sp
  chThdSleepMilliseconds (wait_amounts_ms);
 8001878:	4606      	mov	r6, r0
 800187a:	f7ff fcf9 	bl	8001270 <chThdSleep>
  readVoltageStats (&now);
 800187e:	4620      	mov	r0, r4
 8001880:	f7ff ffc6 	bl	8001810 <readVoltageStats>
 8001884:	e010      	b.n	80018a8 <waitForStableVoltage+0x58>
  while (abs (prev.v1.v_mean - now.v1.v_mean) > abs (prev.v1.v_var + now.v1.v_var) ||
      abs (prev.v2.v_mean - now.v2.v_mean) > abs (prev.v2.v_var + now.v2.v_var)) {
 8001886:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800188a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800188e:	440a      	add	r2, r1
  while (abs (prev.v1.v_mean - now.v1.v_mean) > abs (prev.v1.v_var + now.v1.v_var) ||
 8001890:	4293      	cmp	r3, r2
 8001892:	dd1c      	ble.n	80018ce <waitForStableVoltage+0x7e>
    prev = now;
 8001894:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001898:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    chThdSleepMilliseconds (wait_amounts_ms);
 800189c:	4630      	mov	r0, r6
 800189e:	f7ff fce7 	bl	8001270 <chThdSleep>
    readVoltageStats (&now);
 80018a2:	4620      	mov	r0, r4
 80018a4:	f7ff ffb4 	bl	8001810 <readVoltageStats>
  while (abs (prev.v1.v_mean - now.v1.v_mean) > abs (prev.v1.v_var + now.v1.v_var) ||
 80018a8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80018ac:	f8bd 2000 	ldrh.w	r2, [sp]
 80018b0:	1a9b      	subs	r3, r3, r2
 80018b2:	d406      	bmi.n	80018c2 <waitForStableVoltage+0x72>
 80018b4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80018b8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80018bc:	440a      	add	r2, r1
 80018be:	4293      	cmp	r3, r2
 80018c0:	dce8      	bgt.n	8001894 <waitForStableVoltage+0x44>
      abs (prev.v2.v_mean - now.v2.v_mean) > abs (prev.v2.v_var + now.v2.v_var)) {
 80018c2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80018c6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80018ca:	1a9b      	subs	r3, r3, r2
 80018cc:	d5db      	bpl.n	8001886 <waitForStableVoltage+0x36>
  }
}
 80018ce:	b008      	add	sp, #32
 80018d0:	bd70      	pop	{r4, r5, r6, pc}
 80018d2:	bf00      	nop
	...

080018e0 <sendSerialData>:
uint8_t sendSerialData () {
 80018e0:	b570      	push	{r4, r5, r6, lr}
  uint8_t now = vstat_update_count; // It's an atomic operation, so this is OK to do without a mutex.
 80018e2:	4b12      	ldr	r3, [pc, #72]	; (800192c <sendSerialData+0x4c>)
  if (now != last_update_count) {
 80018e4:	4d12      	ldr	r5, [pc, #72]	; (8001930 <sendSerialData+0x50>)
  uint8_t now = vstat_update_count; // It's an atomic operation, so this is OK to do without a mutex.
 80018e6:	781e      	ldrb	r6, [r3, #0]
  if (now != last_update_count) {
 80018e8:	782b      	ldrb	r3, [r5, #0]
 80018ea:	42b3      	cmp	r3, r6
uint8_t sendSerialData () {
 80018ec:	b084      	sub	sp, #16
  if (now != last_update_count) {
 80018ee:	d019      	beq.n	8001924 <sendSerialData+0x44>
 80018f0:	2320      	movs	r3, #32
 80018f2:	f383 8811 	msr	BASEPRI, r3
 80018f6:	f7ff fb2b 	bl	8000f50 <chMtxLockS.constprop.4>
 80018fa:	2300      	movs	r3, #0
 80018fc:	f383 8811 	msr	BASEPRI, r3
    my_copy = vstat_obj;
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <sendSerialData+0x54>)
 8001902:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001904:	466c      	mov	r4, sp
 8001906:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    chMtxUnlock (&vstat_mtx);
 800190a:	f7ff fe61 	bl	80015d0 <chMtxUnlock.constprop.2>
    sdWrite (&SD2, (uint8_t *) &my_copy, sizeof (V12_STATS));
 800190e:	4621      	mov	r1, r4
 8001910:	f04f 33ff 	mov.w	r3, #4294967295
 8001914:	2210      	movs	r2, #16
 8001916:	4808      	ldr	r0, [pc, #32]	; (8001938 <sendSerialData+0x58>)
 8001918:	f7ff fcfa 	bl	8001310 <oqWriteTimeout>
    return TRUE;
 800191c:	2001      	movs	r0, #1
    last_update_count = now;
 800191e:	702e      	strb	r6, [r5, #0]
}
 8001920:	b004      	add	sp, #16
 8001922:	bd70      	pop	{r4, r5, r6, pc}
  return FALSE;
 8001924:	2000      	movs	r0, #0
}
 8001926:	b004      	add	sp, #16
 8001928:	bd70      	pop	{r4, r5, r6, pc}
 800192a:	bf00      	nop
 800192c:	20004bd4 	.word	0x20004bd4
 8001930:	20000800 	.word	0x20000800
 8001934:	20004bc4 	.word	0x20004bc4
 8001938:	20000914 	.word	0x20000914
 800193c:	00000000 	.word	0x00000000

08001940 <Thread4>:
 8001940:	4b38      	ldr	r3, [pc, #224]	; (8001a24 <Thread4+0xe4>)
 8001942:	4e39      	ldr	r6, [pc, #228]	; (8001a28 <Thread4+0xe8>)
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	4a39      	ldr	r2, [pc, #228]	; (8001a2c <Thread4+0xec>)
 8001948:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8001a34 <Thread4+0xf4>
static THD_FUNCTION(Thread4, arg) {
  (void) arg;
  size_t i;
  chRegSetThreadName("VoltageSweeper");
  while (true) {
    if (!palReadPad(GPIOC, GPIOC_BUTTON)) {
 800194c:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8001a38 <Thread4+0xf8>
static THD_FUNCTION(Thread4, arg) {
 8001950:	b580      	push	{r7, lr}
      // The user button was pressed. We need to start an experiment.
      chBSemWait (&experiment_sem);
      SET_DRIVER_VOLTAGE_NUMBER (0);
 8001952:	4635      	mov	r5, r6
      waitForStableVoltage (2000); // 2 seconds seems like about enough for us.
      sendSyncSignal (1); // Let Python know that the experiment is starting.
      while (!sendSerialData ())
        chThdSleepMilliseconds (1);
      for (i = 1; i < MY_MAX_DUTY; i++) {
        SET_DRIVER_VOLTAGE_NUMBER (i);
 8001954:	4f36      	ldr	r7, [pc, #216]	; (8001a30 <Thread4+0xf0>)
 8001956:	619a      	str	r2, [r3, #24]
 8001958:	e002      	b.n	8001960 <Thread4+0x20>
      }
      sendSyncSignal (2); // Let Python know that the experiment is done.
      SET_DRIVER_VOLTAGE_NUMBER (MY_MAX_DUTY / 5);
      chBSemSignal (&experiment_sem);
    }
    chThdSleepMicroseconds (100);
 800195a:	2001      	movs	r0, #1
 800195c:	f7ff fc88 	bl	8001270 <chThdSleep>
    if (!palReadPad(GPIOC, GPIOC_BUTTON)) {
 8001960:	f8d8 4010 	ldr.w	r4, [r8, #16]
 8001964:	f414 5400 	ands.w	r4, r4, #8192	; 0x2000
 8001968:	d1f7      	bne.n	800195a <Thread4+0x1a>
 *
 * @api
 */
static inline msg_t chBSemWait(binary_semaphore_t *bsp) {

  return chSemWait(&bsp->sem);
 800196a:	f7ff fac9 	bl	8000f00 <chSemWait.constprop.6>
      SET_DRIVER_VOLTAGE_NUMBER (0);
 800196e:	4622      	mov	r2, r4
 8001970:	4621      	mov	r1, r4
 8001972:	4628      	mov	r0, r5
 8001974:	f7ff fa1c 	bl	8000db0 <pwmEnableChannel>
      waitForStableVoltage (2000); // 2 seconds seems like about enough for us.
 8001978:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800197c:	f7ff ff68 	bl	8001850 <waitForStableVoltage>
      sendSyncSignal (1); // Let Python know that the experiment is starting.
 8001980:	2001      	movs	r0, #1
 8001982:	f7ff fd25 	bl	80013d0 <sendSyncSignal>
 8001986:	e002      	b.n	800198e <Thread4+0x4e>
        chThdSleepMilliseconds (1);
 8001988:	200a      	movs	r0, #10
 800198a:	f7ff fc71 	bl	8001270 <chThdSleep>
      while (!sendSerialData ())
 800198e:	f7ff ffa7 	bl	80018e0 <sendSerialData>
 8001992:	2800      	cmp	r0, #0
 8001994:	d0f8      	beq.n	8001988 <Thread4+0x48>
      for (i = 1; i < MY_MAX_DUTY; i++) {
 8001996:	2401      	movs	r4, #1
        SET_DRIVER_VOLTAGE_NUMBER (i);
 8001998:	68b2      	ldr	r2, [r6, #8]
 800199a:	fb02 f204 	mul.w	r2, r2, r4
 800199e:	fba7 3202 	umull	r3, r2, r7, r2
 80019a2:	4628      	mov	r0, r5
 80019a4:	0952      	lsrs	r2, r2, #5
 80019a6:	2100      	movs	r1, #0
 80019a8:	f7ff fa02 	bl	8000db0 <pwmEnableChannel>
        waitForStableVoltage (10);
 80019ac:	200a      	movs	r0, #10
 80019ae:	f7ff ff4f 	bl	8001850 <waitForStableVoltage>
 80019b2:	e002      	b.n	80019ba <Thread4+0x7a>
          chThdSleepMilliseconds (1);
 80019b4:	200a      	movs	r0, #10
 80019b6:	f7ff fc5b 	bl	8001270 <chThdSleep>
        while (!sendSerialData ())
 80019ba:	f7ff ff91 	bl	80018e0 <sendSerialData>
 80019be:	2800      	cmp	r0, #0
 80019c0:	d0f8      	beq.n	80019b4 <Thread4+0x74>
      for (i = 1; i < MY_MAX_DUTY; i++) {
 80019c2:	3401      	adds	r4, #1
 80019c4:	2c64      	cmp	r4, #100	; 0x64
 80019c6:	d1e7      	bne.n	8001998 <Thread4+0x58>
      sendSyncSignal (2); // Let Python know that the experiment is done.
 80019c8:	2002      	movs	r0, #2
 80019ca:	f7ff fd01 	bl	80013d0 <sendSyncSignal>
      SET_DRIVER_VOLTAGE_NUMBER (MY_MAX_DUTY / 5);
 80019ce:	68b3      	ldr	r3, [r6, #8]
 80019d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80019d4:	009a      	lsls	r2, r3, #2
 80019d6:	fba7 3202 	umull	r3, r2, r7, r2
 80019da:	0952      	lsrs	r2, r2, #5
 80019dc:	2100      	movs	r1, #0
 80019de:	4628      	mov	r0, r5
 80019e0:	f7ff f9e6 	bl	8000db0 <pwmEnableChannel>
 80019e4:	2320      	movs	r3, #32
 80019e6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->sem.cnt < (cnt_t)1) {
 80019ea:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	dd05      	ble.n	80019fe <Thread4+0xbe>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80019f2:	f7ff fddd 	bl	80015b0 <chSchRescheduleS>
 80019f6:	2300      	movs	r3, #0
 80019f8:	f383 8811 	msr	BASEPRI, r3
 80019fc:	e7ad      	b.n	800195a <Thread4+0x1a>
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (++sp->cnt <= (cnt_t)0) {
 80019fe:	3301      	adds	r3, #1
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	f8c9 3008 	str.w	r3, [r9, #8]
 8001a06:	d0f4      	beq.n	80019f2 <Thread4+0xb2>
  thread_t *tp = tqp->next;
 8001a08:	f8d9 3000 	ldr.w	r3, [r9]
  tqp->next             = tp->queue.next;
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	f8c9 2000 	str.w	r2, [r9]
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->queue);
    tp->u.rdymsg = MSG_OK;
 8001a12:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8001a14:	f8c2 9004 	str.w	r9, [r2, #4]
    (void) chSchReadyI(tp);
 8001a18:	4618      	mov	r0, r3
    tp->u.rdymsg = MSG_OK;
 8001a1a:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 8001a1c:	f7fe ffb0 	bl	8000980 <chSchReadyI>
 8001a20:	e7e7      	b.n	80019f2 <Thread4+0xb2>
 8001a22:	bf00      	nop
 8001a24:	20000960 	.word	0x20000960
 8001a28:	200008c8 	.word	0x200008c8
 8001a2c:	08002aa8 	.word	0x08002aa8
 8001a30:	51eb851f 	.word	0x51eb851f
 8001a34:	20000ba0 	.word	0x20000ba0
 8001a38:	40020800 	.word	0x40020800
 8001a3c:	00000000 	.word	0x00000000

08001a40 <main>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8001a40:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <main+0x78>)
  PWR->CR |= PWR_CR_DBP;
 8001a42:	481e      	ldr	r0, [pc, #120]	; (8001abc <main+0x7c>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8001a44:	6919      	ldr	r1, [r3, #16]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f061 011f 	orn	r1, r1, #31


/*
 * Application entry point.
 */
int main(void) {
 8001a4c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 8001a50:	f04f 34ff 	mov.w	r4, #4294967295
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8001a54:	6119      	str	r1, [r3, #16]
 8001a56:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 8001a58:	6959      	ldr	r1, [r3, #20]
 8001a5a:	615c      	str	r4, [r3, #20]
 8001a5c:	615a      	str	r2, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8001a5e:	6a19      	ldr	r1, [r3, #32]
 8001a60:	f061 5180 	orn	r1, r1, #268435456	; 0x10000000
 8001a64:	6219      	str	r1, [r3, #32]
 8001a66:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8001a68:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a6a:	625c      	str	r4, [r3, #36]	; 0x24
 8001a6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 8001a6e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001a70:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001a74:	6419      	str	r1, [r3, #64]	; 0x40
 8001a76:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001a78:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001a7c:	6619      	str	r1, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 8001a7e:	6801      	ldr	r1, [r0, #0]
 8001a80:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001a84:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8001a86:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001a88:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8001a8c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001a90:	b089      	sub	sp, #36	; 0x24
 8001a92:	d003      	beq.n	8001a9c <main+0x5c>
    RCC->BDCR = RCC_BDCR_BDRST;
 8001a94:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001a98:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8001a9a:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8001a9c:	4807      	ldr	r0, [pc, #28]	; (8001abc <main+0x7c>)
 8001a9e:	4a08      	ldr	r2, [pc, #32]	; (8001ac0 <main+0x80>)
 8001aa0:	6843      	ldr	r3, [r0, #4]
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
 8001aa2:	4d08      	ldr	r5, [pc, #32]	; (8001ac4 <main+0x84>)
 8001aa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001aa8:	6043      	str	r3, [r0, #4]
 8001aaa:	4807      	ldr	r0, [pc, #28]	; (8001ac8 <main+0x88>)
 8001aac:	2100      	movs	r1, #0
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8001aae:	460b      	mov	r3, r1
  dma_streams_mask = 0U;
 8001ab0:	6001      	str	r1, [r0, #0]
    _stm32_dma_streams[i].stream->CR = 0U;
 8001ab2:	460c      	mov	r4, r1
 8001ab4:	e00c      	b.n	8001ad0 <main+0x90>
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40007000 	.word	0x40007000
 8001ac0:	08002ac4 	.word	0x08002ac4
 8001ac4:	40026010 	.word	0x40026010
 8001ac8:	20000b9c 	.word	0x20000b9c
 8001acc:	f852 5c0c 	ldr.w	r5, [r2, #-12]
    dma_isr_redir[i].dma_func = NULL;
 8001ad0:	49cf      	ldr	r1, [pc, #828]	; (8001e10 <main+0x3d0>)
    _stm32_dma_streams[i].stream->CR = 0U;
 8001ad2:	602c      	str	r4, [r5, #0]
    dma_isr_redir[i].dma_func = NULL;
 8001ad4:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8001ad8:	3301      	adds	r3, #1
 8001ada:	2b10      	cmp	r3, #16
 8001adc:	f102 020c 	add.w	r2, r2, #12
 8001ae0:	d1f4      	bne.n	8001acc <main+0x8c>
  adcp->state    = ADC_STOP;
 8001ae2:	f8df 8380 	ldr.w	r8, [pc, #896]	; 8001e64 <main+0x424>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8001ae6:	f8df e380 	ldr.w	lr, [pc, #896]	; 8001e68 <main+0x428>
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
 8001aea:	4dca      	ldr	r5, [pc, #808]	; (8001e14 <main+0x3d4>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001aec:	4fca      	ldr	r7, [pc, #808]	; (8001e18 <main+0x3d8>)
  adcp->config   = NULL;
 8001aee:	f8c8 4004 	str.w	r4, [r8, #4]
  DMA1->LIFCR = 0xFFFFFFFFU;
 8001af2:	f04f 31ff 	mov.w	r1, #4294967295
 8001af6:	f8ce 1008 	str.w	r1, [lr, #8]
 8001afa:	2260      	movs	r2, #96	; 0x60
  adcp->samples  = NULL;
 8001afc:	f8c8 4008 	str.w	r4, [r8, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 8001b00:	f8ce 100c 	str.w	r1, [lr, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8001b04:	60a9      	str	r1, [r5, #8]
  adcp->depth    = 0;
 8001b06:	f8c8 400c 	str.w	r4, [r8, #12]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8001b0a:	60e9      	str	r1, [r5, #12]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001b0c:	2540      	movs	r5, #64	; 0x40
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001b0e:	f887 2306 	strb.w	r2, [r7, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001b12:	f04f 0e80 	mov.w	lr, #128	; 0x80
  adcp->grpp     = NULL;
 8001b16:	f8c8 4010 	str.w	r4, [r8, #16]
 8001b1a:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
  adcp->thread   = NULL;
 8001b1e:	f8c8 4014 	str.w	r4, [r8, #20]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001b22:	603d      	str	r5, [r7, #0]
  tqp->next = (thread_t *)tqp;
 8001b24:	f108 0518 	add.w	r5, r8, #24
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8001b28:	4ebc      	ldr	r6, [pc, #752]	; (8001e1c <main+0x3dc>)
 8001b2a:	f8c8 5018 	str.w	r5, [r8, #24]
  adcp->state    = ADC_STOP;
 8001b2e:	f04f 0a01 	mov.w	sl, #1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001b32:	f887 2307 	strb.w	r2, [r7, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001b36:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b3a:	f8c7 e180 	str.w	lr, [r7, #384]	; 0x180
 8001b3e:	f44f 7900 	mov.w	r9, #512	; 0x200
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001b42:	f8c7 e000 	str.w	lr, [r7]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001b46:	f44f 6b80 	mov.w	fp, #1024	; 0x400
 8001b4a:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
  tqp->prev = (thread_t *)tqp;
 8001b4e:	f108 0518 	add.w	r5, r8, #24
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001b52:	f887 2308 	strb.w	r2, [r7, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001b56:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001b5a:	6038      	str	r0, [r7, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001b5c:	f887 2309 	strb.w	r2, [r7, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001b60:	f8c7 9180 	str.w	r9, [r7, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001b64:	f8c7 9000 	str.w	r9, [r7]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001b68:	f887 230a 	strb.w	r2, [r7, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001b6c:	f8c7 b180 	str.w	fp, [r7, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001b70:	f8c7 b000 	str.w	fp, [r7]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001b74:	f887 2317 	strb.w	r2, [r7, #791]	; 0x317
  pwmp->state    = PWM_STOP;
 8001b78:	f8df b2f0 	ldr.w	fp, [pc, #752]	; 8001e6c <main+0x42c>
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001b7c:	f8c7 e180 	str.w	lr, [r7, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001b80:	f8c7 e000 	str.w	lr, [r7]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001b84:	f887 2328 	strb.w	r2, [r7, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001b88:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	f888 a000 	strb.w	sl, [r8]
 8001b92:	f8c8 501c 	str.w	r5, [r8, #28]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001b96:	f887 2312 	strb.w	r2, [r7, #786]	; 0x312
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001b9a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b9e:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 8001ba2:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8001e70 <main+0x430>
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001ba6:	603a      	str	r2, [r7, #0]
  iqp->q_counter = 0;
 8001ba8:	6174      	str	r4, [r6, #20]
  oqp->q_counter = size;
 8001baa:	9301      	str	r3, [sp, #4]
 8001bac:	63b3      	str	r3, [r6, #56]	; 0x38
  PWMD3.tim = STM32_TIM3;
 8001bae:	4b9c      	ldr	r3, [pc, #624]	; (8001e20 <main+0x3e0>)
 8001bb0:	f8cb 3018 	str.w	r3, [fp, #24]
  PWMD3.channels = STM32_TIM3_CHANNELS;
 8001bb4:	f04f 0304 	mov.w	r3, #4
 8001bb8:	46b4      	mov	ip, r6
 8001bba:	f88b 3010 	strb.w	r3, [fp, #16]
  PWMD5.channels = STM32_TIM5_CHANNELS;
 8001bbe:	f889 3010 	strb.w	r3, [r9, #16]
  PWMD5.tim = STM32_TIM5;
 8001bc2:	4b98      	ldr	r3, [pc, #608]	; (8001e24 <main+0x3e4>)
 8001bc4:	4a98      	ldr	r2, [pc, #608]	; (8001e28 <main+0x3e8>)
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 8001bc6:	4d99      	ldr	r5, [pc, #612]	; (8001e2c <main+0x3ec>)
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8001bc8:	4899      	ldr	r0, [pc, #612]	; (8001e30 <main+0x3f0>)
 8001bca:	f84c 2b04 	str.w	r2, [ip], #4
 8001bce:	f8c9 3018 	str.w	r3, [r9, #24]
  ADCD1.adc = ADC1;
 8001bd2:	4a98      	ldr	r2, [pc, #608]	; (8001e34 <main+0x3f4>)
 8001bd4:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001bd8:	f503 330b 	add.w	r3, r3, #142336	; 0x22c00
  iqp->q_top     = bp + size;
 8001bdc:	f106 0264 	add.w	r2, r6, #100	; 0x64
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8001be0:	e9c8 500b 	strd	r5, r0, [r8, #44]	; 0x2c
  tqp->next = (thread_t *)tqp;
 8001be4:	f106 0e0c 	add.w	lr, r6, #12
  iqp->q_buffer  = bp;
 8001be8:	f106 0054 	add.w	r0, r6, #84	; 0x54
 8001bec:	f106 0530 	add.w	r5, r6, #48	; 0x30
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8001bf0:	f8c6 c004 	str.w	ip, [r6, #4]
  iqp->q_top     = bp + size;
 8001bf4:	61f2      	str	r2, [r6, #28]
  tqp->prev = (thread_t *)tqp;
 8001bf6:	e9c6 ee03 	strd	lr, lr, [r6, #12]
  iqp->q_buffer  = bp;
 8001bfa:	61b0      	str	r0, [r6, #24]
  iqp->q_wrptr   = bp;
 8001bfc:	e9c6 0008 	strd	r0, r0, [r6, #32]
  mp->owner = NULL;
 8001c00:	f8c8 4020 	str.w	r4, [r8, #32]
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8001c04:	f886 a008 	strb.w	sl, [r6, #8]
  iqp->q_link    = link;
 8001c08:	e9c6 460a 	strd	r4, r6, [r6, #40]	; 0x28
 8001c0c:	f88b a000 	strb.w	sl, [fp]
  pwmp->config   = NULL;
 8001c10:	f8cb 4004 	str.w	r4, [fp, #4]
  pwmp->enabled  = 0;
 8001c14:	f8cb 400c 	str.w	r4, [fp, #12]
  pwmp->state    = PWM_STOP;
 8001c18:	f889 a000 	strb.w	sl, [r9]
  pwmp->config   = NULL;
 8001c1c:	f8c9 4004 	str.w	r4, [r9, #4]
  pwmp->enabled  = 0;
 8001c20:	f8c9 400c 	str.w	r4, [r9, #12]
 8001c24:	e9c6 550c 	strd	r5, r5, [r6, #48]	; 0x30
 8001c28:	6c18      	ldr	r0, [r3, #64]	; 0x40
  oqp->q_buffer  = bp;
 8001c2a:	63f2      	str	r2, [r6, #60]	; 0x3c
 8001c2c:	ea40 000a 	orr.w	r0, r0, sl
  oqp->q_rdptr   = bp;
 8001c30:	64b2      	str	r2, [r6, #72]	; 0x48
 8001c32:	6418      	str	r0, [r3, #64]	; 0x40
 8001c34:	6e18      	ldr	r0, [r3, #96]	; 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001c36:	f8df e23c 	ldr.w	lr, [pc, #572]	; 8001e74 <main+0x434>
  oqp->q_wrptr   = bp;
 8001c3a:	6472      	str	r2, [r6, #68]	; 0x44
  ST_ENABLE_CLOCK();
 8001c3c:	ea40 000a 	orr.w	r0, r0, sl
 8001c40:	6618      	str	r0, [r3, #96]	; 0x60
  ST_ENABLE_STOP();
 8001c42:	f8de 0008 	ldr.w	r0, [lr, #8]
  oqp->q_notify  = onfy;
 8001c46:	f8df c230 	ldr.w	ip, [pc, #560]	; 8001e78 <main+0x438>
  tqp->next = (thread_t *)tqp;
 8001c4a:	4d7b      	ldr	r5, [pc, #492]	; (8001e38 <main+0x3f8>)
 8001c4c:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
  oqp->q_top     = bp + size;
 8001c50:	f106 0274 	add.w	r2, r6, #116	; 0x74
 8001c54:	6432      	str	r2, [r6, #64]	; 0x40
 8001c56:	ea40 000a 	orr.w	r0, r0, sl

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001c5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 8001c5e:	f8df c21c 	ldr.w	ip, [pc, #540]	; 8001e7c <main+0x43c>
 8001c62:	f8c6 c074 	str.w	ip, [r6, #116]	; 0x74
  oqp->q_link    = link;
 8001c66:	6536      	str	r6, [r6, #80]	; 0x50
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001c68:	f06f 037f 	mvn.w	r3, #127	; 0x7f
  ST_ENABLE_STOP();
 8001c6c:	f8ce 0008 	str.w	r0, [lr, #8]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001c70:	f242 00cf 	movw	r0, #8399	; 0x20cf
 8001c74:	6290      	str	r0, [r2, #40]	; 0x28
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8001c76:	f105 0c1c 	add.w	ip, r5, #28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001c7a:	62d1      	str	r1, [r2, #44]	; 0x2c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001c7c:	f04f 5e80 	mov.w	lr, #268435456	; 0x10000000
  tqp->prev = (thread_t *)tqp;
 8001c80:	606d      	str	r5, [r5, #4]
  chTMStartMeasurementX(&tm);
 8001c82:	a802      	add	r0, sp, #8
  STM32_ST_TIM->CCMR1  = 0;
 8001c84:	6194      	str	r4, [r2, #24]
  ch.rlist.prio = NOPRIO;
 8001c86:	60ac      	str	r4, [r5, #8]
  STM32_ST_TIM->CCR[0] = 0;
 8001c88:	6354      	str	r4, [r2, #52]	; 0x34
  ch.rlist.newer = (thread_t *)&ch.rlist;
 8001c8a:	612d      	str	r5, [r5, #16]
  STM32_ST_TIM->DIER   = 0;
 8001c8c:	60d4      	str	r4, [r2, #12]
  ch.rlist.older = (thread_t *)&ch.rlist;
 8001c8e:	616d      	str	r5, [r5, #20]
  STM32_ST_TIM->CR2    = 0;
 8001c90:	6054      	str	r4, [r2, #4]
  ch.vtlist.delta = (sysinterval_t)-1;
 8001c92:	6269      	str	r1, [r5, #36]	; 0x24
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8001c94:	f8c2 a014 	str.w	sl, [r2, #20]
  ch.vtlist.lasttime = (systime_t)0;
 8001c98:	62ac      	str	r4, [r5, #40]	; 0x28
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8001c9a:	f8c2 a000 	str.w	sl, [r2]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001c9e:	f887 331c 	strb.w	r3, [r7, #796]	; 0x31c
  tmp->cumulative = (rttime_t)0;
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2300      	movs	r3, #0
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8001ca6:	f8c5 c01c 	str.w	ip, [r5, #28]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001caa:	f8c7 e180 	str.w	lr, [r7, #384]	; 0x180
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8001cae:	f8c5 c020 	str.w	ip, [r5, #32]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001cb2:	f8c7 e000 	str.w	lr, [r7]
  tqp->next = (thread_t *)tqp;
 8001cb6:	602d      	str	r5, [r5, #0]
 8001cb8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  tmp->worst      = (rtcnt_t)0;
 8001cbc:	e9cd 1402 	strd	r1, r4, [sp, #8]
  ch.tm.offset = (rtcnt_t)0;
 8001cc0:	676c      	str	r4, [r5, #116]	; 0x74
  tmp->n          = (ucnt_t)0;
 8001cc2:	e9cd 4404 	strd	r4, r4, [sp, #16]
  chTMStartMeasurementX(&tm);
 8001cc6:	f7fe fd73 	bl	80007b0 <chTMStartMeasurementX.constprop.11>
  chTMStopMeasurementX(&tm);
 8001cca:	a802      	add	r0, sp, #8
 8001ccc:	f7fe fdf8 	bl	80008c0 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8001cd0:	495a      	ldr	r1, [pc, #360]	; (8001e3c <main+0x3fc>)
 8001cd2:	4a5b      	ldr	r2, [pc, #364]	; (8001e40 <main+0x400>)
  ch.tm.offset = tm.last;
 8001cd4:	9804      	ldr	r0, [sp, #16]
 8001cd6:	6768      	str	r0, [r5, #116]	; 0x74
  tp->prio      = prio;
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	63ab      	str	r3, [r5, #56]	; 0x38
  tp->realprio  = prio;
 8001cdc:	66eb      	str	r3, [r5, #108]	; 0x6c
 8001cde:	f101 000c 	add.w	r0, r1, #12

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
  mp->object_size = size;
  mp->align = align;
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	f8df c198 	ldr.w	ip, [pc, #408]	; 8001e80 <main+0x440>
 8001ce8:	614c      	str	r4, [r1, #20]
  H_NEXT(&default_heap.header) = NULL;
  H_PAGES(&default_heap.header) = 0;
 8001cea:	e9c1 4401 	strd	r4, r4, [r1, #4]
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8001cee:	f8c1 c000 	str.w	ip, [r1]
  tqp->prev = (thread_t *)tqp;
 8001cf2:	e9c1 0003 	strd	r0, r0, [r1, #12]
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 8001cf6:	f102 0c10 	add.w	ip, r2, #16
 8001cfa:	61d3      	str	r3, [r2, #28]
 8001cfc:	6353      	str	r3, [r2, #52]	; 0x34
 8001cfe:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8001d02:	f102 0324 	add.w	r3, r2, #36	; 0x24
  mp->object_size = size;
 8001d06:	2014      	movs	r0, #20
 8001d08:	f8c2 c010 	str.w	ip, [r2, #16]
 8001d0c:	6190      	str	r0, [r2, #24]
 8001d0e:	f102 0c3c 	add.w	ip, r2, #60	; 0x3c
 8001d12:	6253      	str	r3, [r2, #36]	; 0x24
 8001d14:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8001d18:	6291      	str	r1, [r2, #40]	; 0x28
 8001d1a:	231c      	movs	r3, #28
  mp->provider = provider;
 8001d1c:	4949      	ldr	r1, [pc, #292]	; (8001e44 <main+0x404>)
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d1e:	f8df e164 	ldr.w	lr, [pc, #356]	; 8001e84 <main+0x444>
 8001d22:	6094      	str	r4, [r2, #8]
  mp->next = NULL;
 8001d24:	6154      	str	r4, [r2, #20]
 8001d26:	62d4      	str	r4, [r2, #44]	; 0x2c
  mp->object_size = size;
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	f8c2 c03c 	str.w	ip, [r2, #60]	; 0x3c
 8001d2e:	6410      	str	r0, [r2, #64]	; 0x40
  mp->provider = provider;
 8001d30:	6211      	str	r1, [r2, #32]
 8001d32:	6391      	str	r1, [r2, #56]	; 0x38
 8001d34:	e9c2 2200 	strd	r2, r2, [r2]
  ch_memcore.endmem  = __heap_end__;
 8001d38:	f8df c14c 	ldr.w	ip, [pc, #332]	; 8001e88 <main+0x448>
  ch_memcore.nextmem = __heap_base__;
 8001d3c:	4b42      	ldr	r3, [pc, #264]	; (8001e48 <main+0x408>)
 8001d3e:	4a43      	ldr	r2, [pc, #268]	; (8001e4c <main+0x40c>)
  tp->name      = name;
 8001d40:	4843      	ldr	r0, [pc, #268]	; (8001e50 <main+0x410>)
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001d42:	f885 4051 	strb.w	r4, [r5, #81]	; 0x51
  ch_memcore.endmem  = __heap_end__;
 8001d46:	e9c3 2c00 	strd	r2, ip, [r3]
  tp->epending  = (eventmask_t)0;
 8001d4a:	e9c5 4419 	strd	r4, r4, [r5, #100]	; 0x64
  tp->refs      = (trefs_t)1;
 8001d4e:	f885 a052 	strb.w	sl, [r5, #82]	; 0x52
  tp->name      = name;
 8001d52:	64a8      	str	r0, [r5, #72]	; 0x48
 8001d54:	f8de 100c 	ldr.w	r1, [lr, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001d58:	4a3e      	ldr	r2, [pc, #248]	; (8001e54 <main+0x414>)
  REG_INSERT(tp);
 8001d5a:	696b      	ldr	r3, [r5, #20]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001d5c:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8001e8c <main+0x44c>
 8001d60:	646b      	str	r3, [r5, #68]	; 0x44
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d62:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
 8001d66:	4008      	ands	r0, r1
  reg_value  =  (reg_value                                   |
 8001d68:	4302      	orrs	r2, r0
 8001d6a:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8001d6e:	642d      	str	r5, [r5, #64]	; 0x40
 8001d70:	6119      	str	r1, [r3, #16]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8001d72:	f8ce 200c 	str.w	r2, [lr, #12]
 8001d76:	f8dc 200c 	ldr.w	r2, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001d7a:	4837      	ldr	r0, [pc, #220]	; (8001e58 <main+0x418>)
 8001d7c:	6169      	str	r1, [r5, #20]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001d7e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001d82:	f8cc 200c 	str.w	r2, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001d86:	6802      	ldr	r2, [r0, #0]
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d88:	9b01      	ldr	r3, [sp, #4]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8001d8a:	61a9      	str	r1, [r5, #24]
  tqp->next = (thread_t *)tqp;
 8001d8c:	f105 0c5c 	add.w	ip, r5, #92	; 0x5c
  tlp->next = (thread_t *)tlp;
 8001d90:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8001d94:	ea42 020a 	orr.w	r2, r2, sl
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
 8001d98:	64ec      	str	r4, [r5, #76]	; 0x4c
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 8001d9a:	f885 a050 	strb.w	sl, [r5, #80]	; 0x50
 8001d9e:	65a9      	str	r1, [r5, #88]	; 0x58
 8001da0:	6002      	str	r2, [r0, #0]
  tqp->next = (thread_t *)tqp;
 8001da2:	f8c5 c05c 	str.w	ip, [r5, #92]	; 0x5c
 8001da6:	f88e 301f 	strb.w	r3, [lr, #31]
 8001daa:	9301      	str	r3, [sp, #4]
 8001dac:	f04f 0320 	mov.w	r3, #32
  tqp->prev = (thread_t *)tqp;
 8001db0:	f8c5 c060 	str.w	ip, [r5, #96]	; 0x60
 8001db4:	f88e 3022 	strb.w	r3, [lr, #34]	; 0x22
 8001db8:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
 8001dbc:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001dbe:	2320      	movs	r3, #32
 8001dc0:	f383 8811 	msr	BASEPRI, r3
  tp->wabase = tdp->wbase;
 8001dc4:	4a25      	ldr	r2, [pc, #148]	; (8001e5c <main+0x41c>)
  REG_INSERT(tp);
 8001dc6:	696b      	ldr	r3, [r5, #20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001dc8:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 8001e90 <main+0x450>
 8001dcc:	4824      	ldr	r0, [pc, #144]	; (8001e60 <main+0x420>)
  tp->name      = name;
 8001dce:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 8001e94 <main+0x454>
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001dd2:	f8c2 c06c 	str.w	ip, [r2, #108]	; 0x6c
 8001dd6:	f102 016c 	add.w	r1, r2, #108	; 0x6c
 8001dda:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
 8001dde:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
  REG_INSERT(tp);
 8001de2:	f102 0190 	add.w	r1, r2, #144	; 0x90
  tp->name      = name;
 8001de6:	f8c2 e0a8 	str.w	lr, [r2, #168]	; 0xa8
  tqp->next = (thread_t *)tqp;
 8001dea:	f102 0cbc 	add.w	ip, r2, #188	; 0xbc
  tlp->next = (thread_t *)tlp;
 8001dee:	f102 0eb8 	add.w	lr, r2, #184	; 0xb8
  tp->state     = CH_STATE_WTSTART;
 8001df2:	f04f 0002 	mov.w	r0, #2
 8001df6:	f8a2 00b0 	strh.w	r0, [r2, #176]	; 0xb0
  REG_INSERT(tp);
 8001dfa:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001dfe:	6714      	str	r4, [r2, #112]	; 0x70
  tp->prio      = prio;
 8001e00:	f8c2 a098 	str.w	sl, [r2, #152]	; 0x98
  tp->mtxlist   = NULL;
 8001e04:	e9c2 4a32 	strd	r4, sl, [r2, #200]	; 0xc8
  tp->epending  = (eventmask_t)0;
 8001e08:	f8c2 40c4 	str.w	r4, [r2, #196]	; 0xc4
 8001e0c:	e044      	b.n	8001e98 <main+0x458>
 8001e0e:	bf00      	nop
 8001e10:	20000b1c 	.word	0x20000b1c
 8001e14:	40026400 	.word	0x40026400
 8001e18:	e000e100 	.word	0xe000e100
 8001e1c:	200008e4 	.word	0x200008e4
 8001e20:	40000400 	.word	0x40000400
 8001e24:	40000c00 	.word	0x40000c00
 8001e28:	08002c48 	.word	0x08002c48
 8001e2c:	08002b48 	.word	0x08002b48
 8001e30:	00022c16 	.word	0x00022c16
 8001e34:	40012000 	.word	0x40012000
 8001e38:	20000960 	.word	0x20000960
 8001e3c:	20000b00 	.word	0x20000b00
 8001e40:	200009d8 	.word	0x200009d8
 8001e44:	08000881 	.word	0x08000881
 8001e48:	20000af8 	.word	0x20000af8
 8001e4c:	200050f8 	.word	0x200050f8
 8001e50:	08002ba8 	.word	0x08002ba8
 8001e54:	05fa0300 	.word	0x05fa0300
 8001e58:	e0001000 	.word	0xe0001000
 8001e5c:	20000a20 	.word	0x20000a20
 8001e60:	080002d1 	.word	0x080002d1
 8001e64:	20000878 	.word	0x20000878
 8001e68:	40026000 	.word	0x40026000
 8001e6c:	200008ac 	.word	0x200008ac
 8001e70:	200008c8 	.word	0x200008c8
 8001e74:	e0042000 	.word	0xe0042000
 8001e78:	08000811 	.word	0x08000811
 8001e7c:	40004400 	.word	0x40004400
 8001e80:	080007c1 	.word	0x080007c1
 8001e84:	e000ed00 	.word	0xe000ed00
 8001e88:	20018000 	.word	0x20018000
 8001e8c:	e000edf0 	.word	0xe000edf0
 8001e90:	08000a11 	.word	0x08000a11
 8001e94:	08002bc0 	.word	0x08002bc0
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001e98:	f882 a0b2 	strb.w	sl, [r2, #178]	; 0xb2
  REG_INSERT(tp);
 8001e9c:	f8c2 50a0 	str.w	r5, [r2, #160]	; 0xa0
  tp->wabase = tdp->wbase;
 8001ea0:	f8c2 20ac 	str.w	r2, [r2, #172]	; 0xac
  chSchWakeupS(tp, MSG_OK);
 8001ea4:	4608      	mov	r0, r1
  REG_INSERT(tp);
 8001ea6:	6119      	str	r1, [r3, #16]
  tqp->next = (thread_t *)tqp;
 8001ea8:	e9c2 ec2e 	strd	lr, ip, [r2, #184]	; 0xb8
  tqp->prev = (thread_t *)tqp;
 8001eac:	f8c2 c0c0 	str.w	ip, [r2, #192]	; 0xc0
 8001eb0:	6169      	str	r1, [r5, #20]
  chSchWakeupS(tp, MSG_OK);
 8001eb2:	f7fe ff95 	bl	8000de0 <chSchWakeupS.constprop.16>
 8001eb6:	f384 8811 	msr	BASEPRI, r4
 8001eba:	2320      	movs	r3, #32
 8001ebc:	f383 8811 	msr	BASEPRI, r3
  pwmp->config = config;
 8001ec0:	4ab9      	ldr	r2, [pc, #740]	; (80021a8 <main+0x768>)
 8001ec2:	f8c9 2004 	str.w	r2, [r9, #4]
  pwm_lld_start(pwmp);
 8001ec6:	4648      	mov	r0, r9
  pwmp->period = config->period;
 8001ec8:	6852      	ldr	r2, [r2, #4]
 8001eca:	f8c9 2008 	str.w	r2, [r9, #8]
  pwm_lld_start(pwmp);
 8001ece:	f7fe fdd7 	bl	8000a80 <pwm_lld_start>
  pwmp->state = PWM_READY;
 8001ed2:	f04f 0202 	mov.w	r2, #2
  pwmp->enabled = 0;
 8001ed6:	f8c9 400c 	str.w	r4, [r9, #12]
  pwmp->state = PWM_READY;
 8001eda:	f889 2000 	strb.w	r2, [r9]
 8001ede:	f384 8811 	msr	BASEPRI, r4
   */
  halInit();
  chSysInit();

  pwmStart (&PWMD5, &pwmcfg);
  palSetLineMode (LINE_ARD_A0, PAL_MODE_ALTERNATE(2));// Route timer TIM5 to this pin.
 8001ee2:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001ee6:	4651      	mov	r1, sl
 8001ee8:	48b0      	ldr	r0, [pc, #704]	; (80021ac <main+0x76c>)
  palSetLineMode (LINE_ARD_A1, PAL_MODE_ALTERNATE(2));
  pwmEnableChannel (&PWMD5, 0, PWM_FRACTION_TO_WIDTH (&PWMD5, 100, 20));
 8001eea:	4db1      	ldr	r5, [pc, #708]	; (80021b0 <main+0x770>)
  palSetLineMode (LINE_ARD_A0, PAL_MODE_ALTERNATE(2));// Route timer TIM5 to this pin.
 8001eec:	f7fe fe68 	bl	8000bc0 <_pal_lld_setgroupmode>
  palSetLineMode (LINE_ARD_A1, PAL_MODE_ALTERNATE(2));
 8001ef0:	2102      	movs	r1, #2
 8001ef2:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001ef6:	48ad      	ldr	r0, [pc, #692]	; (80021ac <main+0x76c>)
 8001ef8:	f7fe fe62 	bl	8000bc0 <_pal_lld_setgroupmode>
  pwmEnableChannel (&PWMD5, 0, PWM_FRACTION_TO_WIDTH (&PWMD5, 100, 20));
 8001efc:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8001f00:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001f04:	0092      	lsls	r2, r2, #2
 8001f06:	fba5 1202 	umull	r1, r2, r5, r2
 8001f0a:	4648      	mov	r0, r9
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	0952      	lsrs	r2, r2, #5
 8001f10:	f7fe ff4e 	bl	8000db0 <pwmEnableChannel>
  pwmEnableChannel (&PWMD5, 1, PWM_FRACTION_TO_WIDTH (&PWMD5, 100, 25));
 8001f14:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8001f18:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001f1c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001f20:	fba5 1202 	umull	r1, r2, r5, r2
 8001f24:	0952      	lsrs	r2, r2, #5
 8001f26:	4651      	mov	r1, sl
 8001f28:	f7fe ff42 	bl	8000db0 <pwmEnableChannel>
 8001f2c:	2320      	movs	r3, #32
 8001f2e:	4699      	mov	r9, r3
 8001f30:	f383 8811 	msr	BASEPRI, r3
  pwmp->config = config;
 8001f34:	4a9f      	ldr	r2, [pc, #636]	; (80021b4 <main+0x774>)
 8001f36:	f8cb 2004 	str.w	r2, [fp, #4]
  pwm_lld_start(pwmp);
 8001f3a:	4658      	mov	r0, fp
  pwmp->period = config->period;
 8001f3c:	6852      	ldr	r2, [r2, #4]
 8001f3e:	f8cb 2008 	str.w	r2, [fp, #8]
  pwm_lld_start(pwmp);
 8001f42:	f7fe fd9d 	bl	8000a80 <pwm_lld_start>
  pwmp->state = PWM_READY;
 8001f46:	f04f 0202 	mov.w	r2, #2
  pwmp->enabled = 0;
 8001f4a:	f8cb 400c 	str.w	r4, [fp, #12]
  pwmp->state = PWM_READY;
 8001f4e:	f88b 2000 	strb.w	r2, [fp]
 8001f52:	f384 8811 	msr	BASEPRI, r4

  pwmStart (&PWMD3, &pwmslowcfg);
  palSetLineMode (LINE_ARD_D5, PAL_MODE_ALTERNATE(2));
 8001f56:	9b01      	ldr	r3, [sp, #4]
 8001f58:	4897      	ldr	r0, [pc, #604]	; (80021b8 <main+0x778>)
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001f60:	f7fe fe2e 	bl	8000bc0 <_pal_lld_setgroupmode>
  pwmEnableChannel (&PWMD3, 0, PWM_FRACTION_TO_WIDTH (&PWMD3, 100, 75));
 8001f64:	f8db 3008 	ldr.w	r3, [fp, #8]
 8001f68:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001f6c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8001f70:	fba5 3203 	umull	r3, r2, r5, r3
 8001f74:	0952      	lsrs	r2, r2, #5
 8001f76:	4658      	mov	r0, fp
 8001f78:	2100      	movs	r1, #0
 8001f7a:	f7fe ff19 	bl	8000db0 <pwmEnableChannel>
 8001f7e:	f389 8811 	msr	BASEPRI, r9
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8001f82:	7a33      	ldrb	r3, [r6, #8]
 8001f84:	4553      	cmp	r3, sl
 8001f86:	f000 80fe 	beq.w	8002186 <main+0x746>
  USART_TypeDef *u = sdp->usart;
 8001f8a:	6f73      	ldr	r3, [r6, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8001f8c:	4a8b      	ldr	r2, [pc, #556]	; (80021bc <main+0x77c>)
 8001f8e:	498c      	ldr	r1, [pc, #560]	; (80021c0 <main+0x780>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	6808      	ldr	r0, [r1, #0]
 8001f94:	f000 8086 	beq.w	80020a4 <main+0x664>
 8001f98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	f000 8081 	beq.w	80020a4 <main+0x664>
    u->BRR = STM32_PCLK1 / config->speed;
 8001fa2:	4a88      	ldr	r2, [pc, #544]	; (80021c4 <main+0x784>)
 8001fa4:	fbb2 f2f0 	udiv	r2, r2, r0
 8001fa8:	609a      	str	r2, [r3, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8001faa:	888a      	ldrh	r2, [r1, #4]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001fac:	88cc      	ldrh	r4, [r1, #6]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001fae:	8908      	ldrh	r0, [r1, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001fb0:	f044 0440 	orr.w	r4, r4, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001fb4:	f040 0001 	orr.w	r0, r0, #1
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8001fb8:	f442 5104 	orr.w	r1, r2, #8448	; 0x2100
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001fbc:	611c      	str	r4, [r3, #16]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8001fbe:	f041 012c 	orr.w	r1, r1, #44	; 0x2c
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001fc2:	6158      	str	r0, [r3, #20]
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 8001fc4:	f402 52a0 	and.w	r2, r2, #5120	; 0x1400
  u->SR = 0;
 8001fc8:	2000      	movs	r0, #0
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8001fca:	60d9      	str	r1, [r3, #12]
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 8001fcc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
  u->SR = 0;
 8001fd0:	6018      	str	r0, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8001fd2:	6819      	ldr	r1, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8001fd4:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0x7F;
 8001fd6:	bf0c      	ite	eq
 8001fd8:	237f      	moveq	r3, #127	; 0x7f
    sdp->rxmask = 0xFF;
 8001fda:	23ff      	movne	r3, #255	; 0xff
 8001fdc:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	7233      	strb	r3, [r6, #8]
 8001fe4:	2400      	movs	r4, #0
 8001fe6:	f384 8811 	msr	BASEPRI, r4

  /*
   * Activates the serial driver 2 using the driver default configuration.
   */
  sdStart(&SD2, &sd2cfg);
  palSetPadMode (GPIOA, 2, PAL_MODE_ALTERNATE (7));
 8001fea:	f240 3282 	movw	r2, #898	; 0x382
 8001fee:	2104      	movs	r1, #4
 8001ff0:	486e      	ldr	r0, [pc, #440]	; (80021ac <main+0x76c>)
 8001ff2:	f7fe fde5 	bl	8000bc0 <_pal_lld_setgroupmode>
  palSetPadMode (GPIOA, 3, PAL_MODE_ALTERNATE (7));
 8001ff6:	f240 3282 	movw	r2, #898	; 0x382
 8001ffa:	2108      	movs	r1, #8
 8001ffc:	486b      	ldr	r0, [pc, #428]	; (80021ac <main+0x76c>)
 8001ffe:	f7fe fddf 	bl	8000bc0 <_pal_lld_setgroupmode>

  palSetGroupMode(GPIOC, PAL_PORT_BIT(1) | PAL_PORT_BIT(0),
 8002002:	2203      	movs	r2, #3
 8002004:	4611      	mov	r1, r2
 8002006:	4870      	ldr	r0, [pc, #448]	; (80021c8 <main+0x788>)
 8002008:	f7fe fdda 	bl	8000bc0 <_pal_lld_setgroupmode>
 800200c:	2320      	movs	r3, #32
 800200e:	f383 8811 	msr	BASEPRI, r3
  if (adcp->state == ADC_STOP) {
 8002012:	f898 3000 	ldrb.w	r3, [r8]
  adcp->config = config;
 8002016:	f8c8 4004 	str.w	r4, [r8, #4]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d047      	beq.n	80020ae <main+0x66e>
  adcp->state = ADC_READY;
 800201e:	2302      	movs	r3, #2
 8002020:	f888 3000 	strb.w	r3, [r8]
 8002024:	2500      	movs	r5, #0
 8002026:	f385 8811 	msr	BASEPRI, r5
  tqp->next = (thread_t *)tqp;
 800202a:	4b68      	ldr	r3, [pc, #416]	; (80021cc <main+0x78c>)
 800202c:	4c68      	ldr	r4, [pc, #416]	; (80021d0 <main+0x790>)
  chBSemObjectInit (&experiment_sem, FALSE);

  /*
   * Creates the blinker thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO + 1, Thread1, NULL);
 800202e:	4a69      	ldr	r2, [pc, #420]	; (80021d4 <main+0x794>)
 8002030:	4869      	ldr	r0, [pc, #420]	; (80021d8 <main+0x798>)
 8002032:	609d      	str	r5, [r3, #8]
  sp->cnt = n;
 8002034:	2601      	movs	r6, #1
  tqp->prev = (thread_t *)tqp;
 8002036:	e9c3 3300 	strd	r3, r3, [r3]
 800203a:	2181      	movs	r1, #129	; 0x81
 800203c:	60a6      	str	r6, [r4, #8]
 800203e:	e9c4 4400 	strd	r4, r4, [r4]
 8002042:	f7fe fefd 	bl	8000e40 <chThdCreateStatic.constprop.10>
  chThdCreateStatic(waThread2, sizeof (waThread2), NORMALPRIO + 1, Thread2, NULL);
 8002046:	4a65      	ldr	r2, [pc, #404]	; (80021dc <main+0x79c>)
 8002048:	4865      	ldr	r0, [pc, #404]	; (80021e0 <main+0x7a0>)
 800204a:	2181      	movs	r1, #129	; 0x81
 800204c:	f7fe fef8 	bl	8000e40 <chThdCreateStatic.constprop.10>
  chThdCreateStatic(waThread3, sizeof(waThread3), NORMALPRIO + 3, Thread3, NULL);
 8002050:	4a64      	ldr	r2, [pc, #400]	; (80021e4 <main+0x7a4>)
 8002052:	4865      	ldr	r0, [pc, #404]	; (80021e8 <main+0x7a8>)
 8002054:	2183      	movs	r1, #131	; 0x83
 8002056:	f7fe fef3 	bl	8000e40 <chThdCreateStatic.constprop.10>
  chThdCreateStatic(waThread4, sizeof(waThread4), NORMALPRIO + 2, Thread4, NULL);
 800205a:	4a64      	ldr	r2, [pc, #400]	; (80021ec <main+0x7ac>)
 800205c:	4864      	ldr	r0, [pc, #400]	; (80021f0 <main+0x7b0>)
 800205e:	2182      	movs	r1, #130	; 0x82
 8002060:	f7fe feee 	bl	8000e40 <chThdCreateStatic.constprop.10>
 8002064:	2620      	movs	r6, #32
 8002066:	e007      	b.n	8002078 <main+0x638>
 8002068:	f7ff faa2 	bl	80015b0 <chSchRescheduleS>
 800206c:	f385 8811 	msr	BASEPRI, r5
//    a = samples1[0];
//    b = samples1[1];
    chBSemWait (&experiment_sem);
    sendSerialData ();
    chBSemSignal (&experiment_sem);
    chThdSleepMilliseconds(200);
 8002070:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002074:	f7ff f8fc 	bl	8001270 <chThdSleep>
  return chSemWait(&bsp->sem);
 8002078:	f7fe ff42 	bl	8000f00 <chSemWait.constprop.6>
    sendSerialData ();
 800207c:	f7ff fc30 	bl	80018e0 <sendSerialData>
 8002080:	f386 8811 	msr	BASEPRI, r6
  if (bsp->sem.cnt < (cnt_t)1) {
 8002084:	68a3      	ldr	r3, [r4, #8]
 8002086:	2b00      	cmp	r3, #0
 8002088:	dcee      	bgt.n	8002068 <main+0x628>
  if (++sp->cnt <= (cnt_t)0) {
 800208a:	3301      	adds	r3, #1
 800208c:	2b01      	cmp	r3, #1
 800208e:	60a3      	str	r3, [r4, #8]
 8002090:	d0ea      	beq.n	8002068 <main+0x628>
  thread_t *tp = tqp->next;
 8002092:	6823      	ldr	r3, [r4, #0]
  tqp->next             = tp->queue.next;
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	6022      	str	r2, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002098:	6054      	str	r4, [r2, #4]
    (void) chSchReadyI(tp);
 800209a:	4618      	mov	r0, r3
    tp->u.rdymsg = MSG_OK;
 800209c:	625d      	str	r5, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800209e:	f7fe fc6f 	bl	8000980 <chSchReadyI>
 80020a2:	e7e1      	b.n	8002068 <main+0x628>
    u->BRR = STM32_PCLK2 / config->speed;
 80020a4:	4a53      	ldr	r2, [pc, #332]	; (80021f4 <main+0x7b4>)
 80020a6:	fbb2 f2f0 	udiv	r2, r2, r0
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	e77d      	b.n	8001faa <main+0x56a>
      b = dmaStreamAllocate(adcp->dmastp,
 80020ae:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 80020b2:	4d51      	ldr	r5, [pc, #324]	; (80021f8 <main+0x7b8>)
 80020b4:	7a51      	ldrb	r1, [r2, #9]
 80020b6:	6828      	ldr	r0, [r5, #0]
 80020b8:	408b      	lsls	r3, r1
 80020ba:	4203      	tst	r3, r0
 80020bc:	d148      	bne.n	8002150 <main+0x710>
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 80020be:	4e4f      	ldr	r6, [pc, #316]	; (80021fc <main+0x7bc>)
  dma_streams_mask |= (1U << dmastp->selfindex);
 80020c0:	4303      	orrs	r3, r0
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 80020c2:	eb06 04c1 	add.w	r4, r6, r1, lsl #3
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 80020c6:	484e      	ldr	r0, [pc, #312]	; (8002200 <main+0x7c0>)
  dma_streams_mask |= (1U << dmastp->selfindex);
 80020c8:	602b      	str	r3, [r5, #0]

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 80020ca:	f013 0fff 	tst.w	r3, #255	; 0xff
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 80020ce:	f8c4 8004 	str.w	r8, [r4, #4]
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 80020d2:	f846 0031 	str.w	r0, [r6, r1, lsl #3]
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 80020d6:	d008      	beq.n	80020ea <main+0x6aa>
    rccEnableDMA1(true);
 80020d8:	494a      	ldr	r1, [pc, #296]	; (8002204 <main+0x7c4>)
 80020da:	6b08      	ldr	r0, [r1, #48]	; 0x30
 80020dc:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 80020e0:	6308      	str	r0, [r1, #48]	; 0x30
 80020e2:	6d08      	ldr	r0, [r1, #80]	; 0x50
 80020e4:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 80020e8:	6508      	str	r0, [r1, #80]	; 0x50
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
 80020ea:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80020ee:	d008      	beq.n	8002102 <main+0x6c2>
    rccEnableDMA2(true);
 80020f0:	4b44      	ldr	r3, [pc, #272]	; (8002204 <main+0x7c4>)
 80020f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020f4:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80020f8:	6319      	str	r1, [r3, #48]	; 0x30
 80020fa:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80020fc:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8002100:	6519      	str	r1, [r3, #80]	; 0x50
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8002102:	6813      	ldr	r3, [r2, #0]
 8002104:	6819      	ldr	r1, [r3, #0]
 8002106:	f021 011f 	bic.w	r1, r1, #31
 800210a:	6019      	str	r1, [r3, #0]
 800210c:	6819      	ldr	r1, [r3, #0]
 800210e:	f011 0101 	ands.w	r1, r1, #1
 8002112:	d1fb      	bne.n	800210c <main+0x6cc>
 8002114:	7a14      	ldrb	r4, [r2, #8]
 8002116:	6855      	ldr	r5, [r2, #4]
 8002118:	203d      	movs	r0, #61	; 0x3d
 800211a:	40a0      	lsls	r0, r4
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 800211c:	2421      	movs	r4, #33	; 0x21
  dmaStreamDisable(dmastp);
 800211e:	6028      	str	r0, [r5, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8002120:	6019      	str	r1, [r3, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8002122:	615c      	str	r4, [r3, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
    nvicEnableVector(dmastp->vector, priority);
 8002124:	7a91      	ldrb	r1, [r2, #10]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002126:	094b      	lsrs	r3, r1, #5
 8002128:	009b      	lsls	r3, r3, #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800212a:	f101 4460 	add.w	r4, r1, #3758096384	; 0xe0000000
 800212e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8002132:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8002136:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800213a:	f001 011f 	and.w	r1, r1, #31
 800213e:	2001      	movs	r0, #1
 8002140:	fa00 f101 	lsl.w	r1, r0, r1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002144:	2560      	movs	r5, #96	; 0x60
 8002146:	f884 5300 	strb.w	r5, [r4, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800214a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800214e:	6019      	str	r1, [r3, #0]
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 8002150:	6812      	ldr	r2, [r2, #0]
      rccEnableADC1(true);
 8002152:	4b2c      	ldr	r3, [pc, #176]	; (8002204 <main+0x7c4>)
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 8002154:	492c      	ldr	r1, [pc, #176]	; (8002208 <main+0x7c8>)
 8002156:	6091      	str	r1, [r2, #8]
      rccEnableADC1(true);
 8002158:	6c59      	ldr	r1, [r3, #68]	; 0x44
    adcp->adc->CR1 = 0;
 800215a:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 800215e:	482b      	ldr	r0, [pc, #172]	; (800220c <main+0x7cc>)
      rccEnableADC1(true);
 8002160:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002164:	6459      	str	r1, [r3, #68]	; 0x44
 8002166:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8002168:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800216c:	6659      	str	r1, [r3, #100]	; 0x64
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 800216e:	6843      	ldr	r3, [r0, #4]
 8002170:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    adcp->adc->CR1 = 0;
 8002174:	2100      	movs	r1, #0
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8002176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    adcp->adc->CR2 = ADC_CR2_ADON;
 800217a:	2401      	movs	r4, #1
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 800217c:	6043      	str	r3, [r0, #4]
    adcp->adc->CR1 = 0;
 800217e:	6051      	str	r1, [r2, #4]
    adcp->adc->CR2 = 0;
 8002180:	6091      	str	r1, [r2, #8]
    adcp->adc->CR2 = ADC_CR2_ADON;
 8002182:	6094      	str	r4, [r2, #8]
 8002184:	e74b      	b.n	800201e <main+0x5de>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(true);
 8002186:	491f      	ldr	r1, [pc, #124]	; (8002204 <main+0x7c4>)
 8002188:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800218a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800218e:	640b      	str	r3, [r1, #64]	; 0x40
 8002190:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 8002192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002196:	660b      	str	r3, [r1, #96]	; 0x60
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002198:	22c0      	movs	r2, #192	; 0xc0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800219a:	2340      	movs	r3, #64	; 0x40
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800219c:	f887 2326 	strb.w	r2, [r7, #806]	; 0x326
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80021a0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	e6f0      	b.n	8001f8a <main+0x54a>
 80021a8:	20000804 	.word	0x20000804
 80021ac:	40020000 	.word	0x40020000
 80021b0:	51eb851f 	.word	0x51eb851f
 80021b4:	20000838 	.word	0x20000838
 80021b8:	40020400 	.word	0x40020400
 80021bc:	40011000 	.word	0x40011000
 80021c0:	2000086c 	.word	0x2000086c
 80021c4:	0280de80 	.word	0x0280de80
 80021c8:	40020800 	.word	0x40020800
 80021cc:	20004bb4 	.word	0x20004bb4
 80021d0:	20000ba0 	.word	0x20000ba0
 80021d4:	08001291 	.word	0x08001291
 80021d8:	20004bd8 	.word	0x20004bd8
 80021dc:	080012c1 	.word	0x080012c1
 80021e0:	20004d20 	.word	0x20004d20
 80021e4:	08001641 	.word	0x08001641
 80021e8:	20004e68 	.word	0x20004e68
 80021ec:	08001941 	.word	0x08001941
 80021f0:	20004fb0 	.word	0x20004fb0
 80021f4:	0501bd00 	.word	0x0501bd00
 80021f8:	20000b9c 	.word	0x20000b9c
 80021fc:	20000b1c 	.word	0x20000b1c
 8002200:	08000cb1 	.word	0x08000cb1
 8002204:	40023800 	.word	0x40023800
 8002208:	4001204c 	.word	0x4001204c
 800220c:	40012300 	.word	0x40012300

08002210 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8002210:	4a5d      	ldr	r2, [pc, #372]	; (8002388 <__early_init+0x178>)
  gpiop->OTYPER  = config->otyper;
 8002212:	485e      	ldr	r0, [pc, #376]	; (800238c <__early_init+0x17c>)
 8002214:	495e      	ldr	r1, [pc, #376]	; (8002390 <__early_init+0x180>)
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8002216:	b5f0      	push	{r4, r5, r6, r7, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8002218:	6914      	ldr	r4, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 800221a:	4d5e      	ldr	r5, [pc, #376]	; (8002394 <__early_init+0x184>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 800221c:	2300      	movs	r3, #0
 800221e:	f044 041f 	orr.w	r4, r4, #31
 8002222:	6114      	str	r4, [r2, #16]
 8002224:	6113      	str	r3, [r2, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8002226:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8002228:	f044 041f 	orr.w	r4, r4, #31
 800222c:	6314      	str	r4, [r2, #48]	; 0x30
 800222e:	6d16      	ldr	r6, [r2, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8002230:	4c59      	ldr	r4, [pc, #356]	; (8002398 <__early_init+0x188>)
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8002232:	f046 0e1f 	orr.w	lr, r6, #31
 8002236:	f8c2 e050 	str.w	lr, [r2, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 800223a:	f46f 6e8a 	mvn.w	lr, #1104	; 0x450
  gpiop->OTYPER  = config->otyper;
 800223e:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002240:	f8c0 e008 	str.w	lr, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8002244:	f8df e180 	ldr.w	lr, [pc, #384]	; 80023c8 <__early_init+0x1b8>
 8002248:	f8c0 e00c 	str.w	lr, [r0, #12]
  gpiop->ODR     = config->odr;
 800224c:	f64f 7edf 	movw	lr, #65503	; 0xffdf
 8002250:	f8c0 e014 	str.w	lr, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8002254:	f44f 4eee 	mov.w	lr, #30464	; 0x7700
 8002258:	f8c0 e020 	str.w	lr, [r0, #32]
  gpiop->AFRH    = config->afrh;
 800225c:	f44f 2e2a 	mov.w	lr, #696320	; 0xaa000
 8002260:	f8c0 e024 	str.w	lr, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002264:	f8df e164 	ldr.w	lr, [pc, #356]	; 80023cc <__early_init+0x1bc>
 8002268:	f8c0 e000 	str.w	lr, [r0]
  gpiop->OSPEEDR = config->ospeedr;
 800226c:	f04f 37ff 	mov.w	r7, #4294967295
  gpiop->ODR     = config->odr;
 8002270:	f64f 76ff 	movw	r6, #65535	; 0xffff
  gpiop->PUPDR   = config->pupdr;
 8002274:	f04f 3c55 	mov.w	ip, #1431655765	; 0x55555555
  gpiop->MODER   = config->moder;
 8002278:	2080      	movs	r0, #128	; 0x80
  gpiop->OTYPER  = config->otyper;
 800227a:	604b      	str	r3, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800227c:	608f      	str	r7, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800227e:	f8c1 c00c 	str.w	ip, [r1, #12]
  gpiop->ODR     = config->odr;
 8002282:	614e      	str	r6, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8002284:	620b      	str	r3, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8002286:	624b      	str	r3, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002288:	6008      	str	r0, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 800228a:	4844      	ldr	r0, [pc, #272]	; (800239c <__early_init+0x18c>)
  gpiop->PUPDR   = config->pupdr;
 800228c:	4944      	ldr	r1, [pc, #272]	; (80023a0 <__early_init+0x190>)
  gpiop->OTYPER  = config->otyper;
 800228e:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002290:	60af      	str	r7, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8002292:	60e9      	str	r1, [r5, #12]
  gpiop->ODR     = config->odr;
 8002294:	616e      	str	r6, [r5, #20]
  gpiop->OTYPER  = config->otyper;
 8002296:	4943      	ldr	r1, [pc, #268]	; (80023a4 <__early_init+0x194>)
  gpiop->AFRL    = config->afrl;
 8002298:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
 800229a:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800229c:	602b      	str	r3, [r5, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800229e:	f5a5 35cc 	sub.w	r5, r5, #104448	; 0x19800
  gpiop->OTYPER  = config->otyper;
 80022a2:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80022a4:	60a7      	str	r7, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 80022a6:	f8c4 c00c 	str.w	ip, [r4, #12]
  gpiop->ODR     = config->odr;
 80022aa:	6166      	str	r6, [r4, #20]
  gpiop->AFRL    = config->afrl;
 80022ac:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
 80022ae:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80022b0:	6023      	str	r3, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 80022b2:	6043      	str	r3, [r0, #4]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80022b4:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
  gpiop->OSPEEDR = config->ospeedr;
 80022b8:	6087      	str	r7, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 80022ba:	f8c0 c00c 	str.w	ip, [r0, #12]
  gpiop->ODR     = config->odr;
 80022be:	6146      	str	r6, [r0, #20]
  gpiop->PUPDR   = config->pupdr;
 80022c0:	f1ac 0c05 	sub.w	ip, ip, #5
  gpiop->AFRL    = config->afrl;
 80022c4:	6203      	str	r3, [r0, #32]
  gpiop->AFRH    = config->afrh;
 80022c6:	6243      	str	r3, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80022c8:	6003      	str	r3, [r0, #0]
  PWR->CR = STM32_VOS;
 80022ca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  gpiop->OTYPER  = config->otyper;
 80022ce:	604b      	str	r3, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80022d0:	608f      	str	r7, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 80022d2:	f8c1 c00c 	str.w	ip, [r1, #12]
  gpiop->ODR     = config->odr;
 80022d6:	614e      	str	r6, [r1, #20]
  gpiop->AFRL    = config->afrl;
 80022d8:	620b      	str	r3, [r1, #32]
  gpiop->AFRH    = config->afrh;
 80022da:	624b      	str	r3, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80022dc:	600b      	str	r3, [r1, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80022de:	6414      	str	r4, [r2, #64]	; 0x40
  PWR->CR = STM32_VOS;
 80022e0:	6028      	str	r0, [r5, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80022e2:	6813      	ldr	r3, [r2, #0]
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80022ea:	6813      	ldr	r3, [r2, #0]
 80022ec:	0798      	lsls	r0, r3, #30
 80022ee:	d5fc      	bpl.n	80022ea <__early_init+0xda>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 80022f0:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80022f2:	4925      	ldr	r1, [pc, #148]	; (8002388 <__early_init+0x178>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 80022f4:	f023 0303 	bic.w	r3, r3, #3
 80022f8:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80022fa:	688b      	ldr	r3, [r1, #8]
 80022fc:	f013 030c 	ands.w	r3, r3, #12
 8002300:	d1fb      	bne.n	80022fa <__early_init+0xea>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002302:	6808      	ldr	r0, [r1, #0]
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8002304:	4a20      	ldr	r2, [pc, #128]	; (8002388 <__early_init+0x178>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002306:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 800230a:	6008      	str	r0, [r1, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800230c:	608b      	str	r3, [r1, #8]
  RCC->CSR |= RCC_CSR_LSION;
 800230e:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	674b      	str	r3, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8002316:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002318:	0799      	lsls	r1, r3, #30
 800231a:	d5fc      	bpl.n	8002316 <__early_init+0x106>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 800231c:	4b22      	ldr	r3, [pc, #136]	; (80023a8 <__early_init+0x198>)
 800231e:	6053      	str	r3, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8002320:	6813      	ldr	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8002322:	4922      	ldr	r1, [pc, #136]	; (80023ac <__early_init+0x19c>)
  RCC->CR |= RCC_CR_PLLON;
 8002324:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002328:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800232a:	684b      	ldr	r3, [r1, #4]
 800232c:	045a      	lsls	r2, r3, #17
 800232e:	d5fc      	bpl.n	800232a <__early_init+0x11a>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8002330:	4a15      	ldr	r2, [pc, #84]	; (8002388 <__early_init+0x178>)
 8002332:	6813      	ldr	r3, [r2, #0]
 8002334:	019b      	lsls	r3, r3, #6
 8002336:	d5fc      	bpl.n	8002332 <__early_init+0x122>

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8002338:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <__early_init+0x1a0>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 800233a:	491e      	ldr	r1, [pc, #120]	; (80023b4 <__early_init+0x1a4>)
 800233c:	6091      	str	r1, [r2, #8]
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <__early_init+0x1a8>)
 8002342:	429a      	cmp	r2, r3
 8002344:	d016      	beq.n	8002374 <__early_init+0x164>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8002346:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <__early_init+0x1ac>)
 8002348:	f240 7202 	movw	r2, #1794	; 0x702
 800234c:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800234e:	4a0e      	ldr	r2, [pc, #56]	; (8002388 <__early_init+0x178>)
 8002350:	6893      	ldr	r3, [r2, #8]
 8002352:	f043 0302 	orr.w	r3, r3, #2
 8002356:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8002358:	6893      	ldr	r3, [r2, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b08      	cmp	r3, #8
 8002360:	d1fa      	bne.n	8002358 <__early_init+0x148>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8002362:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8002364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002368:	6453      	str	r3, [r2, #68]	; 0x44
 800236a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800236c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002370:	6653      	str	r3, [r2, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 8002372:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8002374:	4a12      	ldr	r2, [pc, #72]	; (80023c0 <__early_init+0x1b0>)
 8002376:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <__early_init+0x1b4>)
 8002378:	6812      	ldr	r2, [r2, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d1e3      	bne.n	8002346 <__early_init+0x136>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 800237e:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <__early_init+0x1ac>)
 8002380:	f44f 7281 	mov.w	r2, #258	; 0x102
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	e7e2      	b.n	800234e <__early_init+0x13e>
 8002388:	40023800 	.word	0x40023800
 800238c:	40020000 	.word	0x40020000
 8002390:	40020400 	.word	0x40020400
 8002394:	40020800 	.word	0x40020800
 8002398:	40020c00 	.word	0x40020c00
 800239c:	40021000 	.word	0x40021000
 80023a0:	01555555 	.word	0x01555555
 80023a4:	40021c00 	.word	0x40021c00
 80023a8:	07015410 	.word	0x07015410
 80023ac:	40007000 	.word	0x40007000
 80023b0:	e0042000 	.word	0xe0042000
 80023b4:	38881000 	.word	0x38881000
 80023b8:	20006411 	.word	0x20006411
 80023bc:	40023c00 	.word	0x40023c00
 80023c0:	e000ed00 	.word	0xe000ed00
 80023c4:	410fc241 	.word	0x410fc241
 80023c8:	64155105 	.word	0x64155105
 80023cc:	2a8004a0 	.word	0x2a8004a0

080023d0 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80023d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 80023d4:	4d69      	ldr	r5, [pc, #420]	; (800257c <VectorD8+0x1ac>)
 80023d6:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 80023d8:	f8d6 800c 	ldr.w	r8, [r6, #12]
  uint16_t sr = u->SR;
 80023dc:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 80023de:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 80023e0:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 80023e2:	d47d      	bmi.n	80024e0 <VectorD8+0x110>
 80023e4:	2320      	movs	r3, #32
 80023e6:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80023ea:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80023ee:	d04d      	beq.n	800248c <VectorD8+0xbc>
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 80023f0:	4f63      	ldr	r7, [pc, #396]	; (8002580 <VectorD8+0x1b0>)

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 80023f2:	f04f 0900 	mov.w	r9, #0
 80023f6:	e008      	b.n	800240a <VectorD8+0x3a>
    if (sr & USART_SR_RXNE)
 80023f8:	06a1      	lsls	r1, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 80023fa:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 80023fe:	d41d      	bmi.n	800243c <VectorD8+0x6c>
    sr = u->SR;
 8002400:	6834      	ldr	r4, [r6, #0]
 8002402:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002404:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8002408:	d040      	beq.n	800248c <VectorD8+0xbc>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800240a:	0723      	lsls	r3, r4, #28
 800240c:	d0f4      	beq.n	80023f8 <VectorD8+0x28>
    sts |= SD_OVERRUN_ERROR;
 800240e:	f014 0f08 	tst.w	r4, #8
 8002412:	bf0c      	ite	eq
 8002414:	2000      	moveq	r0, #0
 8002416:	2080      	movne	r0, #128	; 0x80
  if (sr & USART_SR_PE)
 8002418:	07e1      	lsls	r1, r4, #31
    sts |= SD_PARITY_ERROR;
 800241a:	bf48      	it	mi
 800241c:	f040 0020 	orrmi.w	r0, r0, #32
  if (sr & USART_SR_FE)
 8002420:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 8002422:	bf48      	it	mi
 8002424:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (sr & USART_SR_NE)
 8002428:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 800242a:	bf48      	it	mi
 800242c:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8002430:	f7fe fabe 	bl	80009b0 <chEvtBroadcastFlagsI.constprop.20>
    if (sr & USART_SR_RXNE)
 8002434:	06a1      	lsls	r1, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8002436:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 800243a:	d5e1      	bpl.n	8002400 <VectorD8+0x30>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 800243c:	696b      	ldr	r3, [r5, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 800243e:	f895 4078 	ldrb.w	r4, [r5, #120]	; 0x78
 8002442:	2b00      	cmp	r3, #0
 8002444:	d03d      	beq.n	80024c2 <VectorD8+0xf2>
  if (!iqIsFullI(iqp)) {
 8002446:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 800244a:	4293      	cmp	r3, r2
 800244c:	d040      	beq.n	80024d0 <VectorD8+0x100>
    iqp->q_counter++;
 800244e:	696a      	ldr	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 8002450:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 8002452:	3201      	adds	r2, #1
 8002454:	ea04 0a0a 	and.w	sl, r4, sl
 8002458:	616a      	str	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 800245a:	6229      	str	r1, [r5, #32]
 800245c:	f883 a000 	strb.w	sl, [r3]
    if (iqp->q_wrptr >= iqp->q_top) {
 8002460:	e9d5 3207 	ldrd	r3, r2, [r5, #28]
 8002464:	429a      	cmp	r2, r3
 8002466:	d301      	bcc.n	800246c <VectorD8+0x9c>
      iqp->q_wrptr = iqp->q_buffer;
 8002468:	69ab      	ldr	r3, [r5, #24]
 800246a:	622b      	str	r3, [r5, #32]
  return (bool)(tqp->next != (const thread_t *)tqp);
 800246c:	68eb      	ldr	r3, [r5, #12]
 800246e:	42bb      	cmp	r3, r7
 8002470:	d0c6      	beq.n	8002400 <VectorD8+0x30>
  tqp->next             = tp->queue.next;
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	60ea      	str	r2, [r5, #12]
  (void) chSchReadyI(tp);
 8002476:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 8002478:	6057      	str	r7, [r2, #4]
  tp->u.rdymsg = msg;
 800247a:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 800247e:	f7fe fa7f 	bl	8000980 <chSchReadyI>
    sr = u->SR;
 8002482:	6834      	ldr	r4, [r6, #0]
 8002484:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002486:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800248a:	d1be      	bne.n	800240a <VectorD8+0x3a>
 800248c:	2300      	movs	r3, #0
 800248e:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8002492:	f018 0f80 	tst.w	r8, #128	; 0x80
 8002496:	d001      	beq.n	800249c <VectorD8+0xcc>
 8002498:	0622      	lsls	r2, r4, #24
 800249a:	d42f      	bmi.n	80024fc <VectorD8+0x12c>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 800249c:	f018 0f40 	tst.w	r8, #64	; 0x40
 80024a0:	d00b      	beq.n	80024ba <VectorD8+0xea>
 80024a2:	0663      	lsls	r3, r4, #25
 80024a4:	d509      	bpl.n	80024ba <VectorD8+0xea>
 80024a6:	2320      	movs	r3, #32
 80024a8:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 80024ac:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d048      	beq.n	8002546 <VectorD8+0x176>
 80024b4:	2300      	movs	r3, #0
 80024b6:	f383 8811 	msr	BASEPRI, r3
}
 80024ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 80024be:	f7fe b9af 	b.w	8000820 <_port_irq_epilogue>
 80024c2:	2004      	movs	r0, #4
 80024c4:	f7fe fa74 	bl	80009b0 <chEvtBroadcastFlagsI.constprop.20>
  if (!iqIsFullI(iqp)) {
 80024c8:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d1be      	bne.n	800244e <VectorD8+0x7e>
 80024d0:	696a      	ldr	r2, [r5, #20]
 80024d2:	2a00      	cmp	r2, #0
 80024d4:	d0bb      	beq.n	800244e <VectorD8+0x7e>
 80024d6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80024da:	f7fe fa69 	bl	80009b0 <chEvtBroadcastFlagsI.constprop.20>
 80024de:	e78f      	b.n	8002400 <VectorD8+0x30>
 80024e0:	2320      	movs	r3, #32
 80024e2:	f383 8811 	msr	BASEPRI, r3
 80024e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80024ea:	f7fe fa61 	bl	80009b0 <chEvtBroadcastFlagsI.constprop.20>
    u->SR = ~USART_SR_LBD;
 80024ee:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80024f2:	6033      	str	r3, [r6, #0]
 80024f4:	2300      	movs	r3, #0
 80024f6:	f383 8811 	msr	BASEPRI, r3
 80024fa:	e773      	b.n	80023e4 <VectorD8+0x14>
 80024fc:	2320      	movs	r3, #32
 80024fe:	f383 8811 	msr	BASEPRI, r3
  if (!oqIsEmptyI(oqp)) {
 8002502:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 8002506:	429a      	cmp	r2, r3
 8002508:	d029      	beq.n	800255e <VectorD8+0x18e>
    oqp->q_counter++;
 800250a:	6baa      	ldr	r2, [r5, #56]	; 0x38
    if (oqp->q_rdptr >= oqp->q_top) {
 800250c:	6c29      	ldr	r1, [r5, #64]	; 0x40
    b = *oqp->q_rdptr++;
 800250e:	1c58      	adds	r0, r3, #1
    oqp->q_counter++;
 8002510:	3201      	adds	r2, #1
 8002512:	63aa      	str	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
 8002514:	64a8      	str	r0, [r5, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 8002516:	4288      	cmp	r0, r1
    b = *oqp->q_rdptr++;
 8002518:	781f      	ldrb	r7, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 800251a:	d301      	bcc.n	8002520 <VectorD8+0x150>
      oqp->q_rdptr = oqp->q_buffer;
 800251c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800251e:	64ab      	str	r3, [r5, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
 8002520:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002522:	4a18      	ldr	r2, [pc, #96]	; (8002584 <VectorD8+0x1b4>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d009      	beq.n	800253c <VectorD8+0x16c>
  tqp->next             = tp->queue.next;
 8002528:	6819      	ldr	r1, [r3, #0]
 800252a:	6329      	str	r1, [r5, #48]	; 0x30
  tp->u.rdymsg = msg;
 800252c:	f04f 0c00 	mov.w	ip, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8002530:	604a      	str	r2, [r1, #4]
  (void) chSchReadyI(tp);
 8002532:	4618      	mov	r0, r3
  tp->u.rdymsg = msg;
 8002534:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8002538:	f7fe fa22 	bl	8000980 <chSchReadyI>
      u->DR = b;
 800253c:	6077      	str	r7, [r6, #4]
 800253e:	2300      	movs	r3, #0
 8002540:	f383 8811 	msr	BASEPRI, r3
 8002544:	e7aa      	b.n	800249c <VectorD8+0xcc>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8002546:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0b3      	beq.n	80024b4 <VectorD8+0xe4>
 800254c:	2010      	movs	r0, #16
 800254e:	f7fe fa2f 	bl	80009b0 <chEvtBroadcastFlagsI.constprop.20>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8002552:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8002556:	ea08 0303 	and.w	r3, r8, r3
 800255a:	60f3      	str	r3, [r6, #12]
 800255c:	e7aa      	b.n	80024b4 <VectorD8+0xe4>
  if (!oqIsEmptyI(oqp)) {
 800255e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002560:	2a00      	cmp	r2, #0
 8002562:	d0d2      	beq.n	800250a <VectorD8+0x13a>
 8002564:	2008      	movs	r0, #8
 8002566:	f7fe fa23 	bl	80009b0 <chEvtBroadcastFlagsI.constprop.20>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 800256a:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800256e:	ea08 0303 	and.w	r3, r8, r3
 8002572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002576:	60f3      	str	r3, [r6, #12]
 8002578:	e7e1      	b.n	800253e <VectorD8+0x16e>
 800257a:	bf00      	nop
 800257c:	200008e4 	.word	0x200008e4
 8002580:	200008f0 	.word	0x200008f0
 8002584:	20000914 	.word	0x20000914
	...

08002590 <Vector108>:
OSAL_IRQ_HANDLER(STM32_TIM5_HANDLER) {
 8002590:	b508      	push	{r3, lr}
  pwm_lld_serve_interrupt(&PWMD5);
 8002592:	4803      	ldr	r0, [pc, #12]	; (80025a0 <Vector108+0x10>)
 8002594:	f7fe fa44 	bl	8000a20 <pwm_lld_serve_interrupt>
}
 8002598:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800259c:	f7fe b940 	b.w	8000820 <_port_irq_epilogue>
 80025a0:	200008c8 	.word	0x200008c8
	...

080025b0 <VectorB4>:
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 80025b0:	b508      	push	{r3, lr}
  pwm_lld_serve_interrupt(&PWMD3);
 80025b2:	4803      	ldr	r0, [pc, #12]	; (80025c0 <VectorB4+0x10>)
 80025b4:	f7fe fa34 	bl	8000a20 <pwm_lld_serve_interrupt>
}
 80025b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80025bc:	f7fe b930 	b.w	8000820 <_port_irq_epilogue>
 80025c0:	200008ac 	.word	0x200008ac
	...

080025d0 <VectorB0>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80025d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 80025d4:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	079b      	lsls	r3, r3, #30
 80025dc:	d403      	bmi.n	80025e6 <VectorB0+0x16>
}
 80025de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 80025e2:	f7fe b91d 	b.w	8000820 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
 80025e6:	2100      	movs	r1, #0
 80025e8:	6139      	str	r1, [r7, #16]
 80025ea:	2320      	movs	r3, #32
 80025ec:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 80025f0:	4c1d      	ldr	r4, [pc, #116]	; (8002668 <VectorB0+0x98>)
 80025f2:	46a1      	mov	r9, r4
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 80025f4:	4688      	mov	r8, r1
  vtp = ch.vtlist.next;
 80025f6:	f859 3f1c 	ldr.w	r3, [r9, #28]!
 80025fa:	689a      	ldr	r2, [r3, #8]
  return (systime_t)STM32_ST_TIM->CNT;
 80025fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 80025fe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  return (sysinterval_t)((systime_t)(end - start));
 8002600:	1a45      	subs	r5, r0, r1
    if (nowdelta < vtp->delta) {
 8002602:	4295      	cmp	r5, r2
 8002604:	d31c      	bcc.n	8002640 <VectorB0+0x70>
 8002606:	2620      	movs	r6, #32
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8002608:	6818      	ldr	r0, [r3, #0]
      fn = vtp->func;
 800260a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
      ch.vtlist.lasttime += vtp->delta;
 800260e:	4411      	add	r1, r2

      /* if the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8002610:	4548      	cmp	r0, r9
      ch.vtlist.lasttime += vtp->delta;
 8002612:	62a1      	str	r1, [r4, #40]	; 0x28
      nowdelta -= vtp->delta;
 8002614:	eba5 0502 	sub.w	r5, r5, r2
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8002618:	f8c0 9004 	str.w	r9, [r0, #4]
      ch.vtlist.next = vtp->next;
 800261c:	61e0      	str	r0, [r4, #28]
      vtp->func = NULL;
 800261e:	f8c3 800c 	str.w	r8, [r3, #12]
  STM32_ST_TIM->DIER = 0;
 8002622:	bf08      	it	eq
 8002624:	f8c7 800c 	streq.w	r8, [r7, #12]
 8002628:	f388 8811 	msr	BASEPRI, r8
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 800262c:	6918      	ldr	r0, [r3, #16]
 800262e:	47d0      	blx	sl
 8002630:	f386 8811 	msr	BASEPRI, r6
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8002634:	69e3      	ldr	r3, [r4, #28]
    }
    while (vtp->delta <= nowdelta);
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	4295      	cmp	r5, r2
 800263a:	d3df      	bcc.n	80025fc <VectorB0+0x2c>
 800263c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800263e:	e7e3      	b.n	8002608 <VectorB0+0x38>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8002640:	69e2      	ldr	r2, [r4, #28]
 8002642:	454a      	cmp	r2, r9
 8002644:	d009      	beq.n	800265a <VectorB0+0x8a>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8002646:	6891      	ldr	r1, [r2, #8]
  ch.vtlist.lasttime += nowdelta;
 8002648:	62a0      	str	r0, [r4, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 800264a:	1b4d      	subs	r5, r1, r5
 800264c:	6095      	str	r5, [r2, #8]
  return systime + (systime_t)interval;
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b02      	cmp	r3, #2
 8002652:	bf2c      	ite	cs
 8002654:	18c0      	addcs	r0, r0, r3
 8002656:	3002      	addcc	r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8002658:	6378      	str	r0, [r7, #52]	; 0x34
 800265a:	2300      	movs	r3, #0
 800265c:	f383 8811 	msr	BASEPRI, r3
}
 8002660:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 8002664:	f7fe b8dc 	b.w	8000820 <_port_irq_epilogue>
 8002668:	20000960 	.word	0x20000960
 800266c:	00000000 	.word	0x00000000

08002670 <Vector158>:
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002670:	4b08      	ldr	r3, [pc, #32]	; (8002694 <Vector158+0x24>)
  if (dma_isr_redir[15].dma_func)
 8002672:	4809      	ldr	r0, [pc, #36]	; (8002698 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002674:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[15].dma_func)
 8002676:	6f82      	ldr	r2, [r0, #120]	; 0x78
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002678:	0d89      	lsrs	r1, r1, #22
 800267a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 800267e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
 8002680:	058c      	lsls	r4, r1, #22
 8002682:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 8002684:	b10a      	cbz	r2, 800268a <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 8002686:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8002688:	4790      	blx	r2
}
 800268a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800268e:	f7fe b8c7 	b.w	8000820 <_port_irq_epilogue>
 8002692:	bf00      	nop
 8002694:	40026400 	.word	0x40026400
 8002698:	20000b1c 	.word	0x20000b1c
 800269c:	00000000 	.word	0x00000000

080026a0 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80026a0:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <Vector154+0x24>)
  if (dma_isr_redir[14].dma_func)
 80026a2:	4809      	ldr	r0, [pc, #36]	; (80026c8 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80026a4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[14].dma_func)
 80026a6:	6f02      	ldr	r2, [r0, #112]	; 0x70
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80026a8:	0c09      	lsrs	r1, r1, #16
 80026aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 80026ae:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
 80026b0:	040c      	lsls	r4, r1, #16
 80026b2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 80026b4:	b10a      	cbz	r2, 80026ba <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 80026b6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80026b8:	4790      	blx	r2
}
 80026ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80026be:	f7fe b8af 	b.w	8000820 <_port_irq_epilogue>
 80026c2:	bf00      	nop
 80026c4:	40026400 	.word	0x40026400
 80026c8:	20000b1c 	.word	0x20000b1c
 80026cc:	00000000 	.word	0x00000000

080026d0 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80026d0:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <Vector150+0x24>)
  if (dma_isr_redir[13].dma_func)
 80026d2:	4809      	ldr	r0, [pc, #36]	; (80026f8 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80026d4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[13].dma_func)
 80026d6:	6e82      	ldr	r2, [r0, #104]	; 0x68
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80026d8:	0989      	lsrs	r1, r1, #6
 80026da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 80026de:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
 80026e0:	018c      	lsls	r4, r1, #6
 80026e2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 80026e4:	b10a      	cbz	r2, 80026ea <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 80026e6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 80026e8:	4790      	blx	r2
}
 80026ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80026ee:	f7fe b897 	b.w	8000820 <_port_irq_epilogue>
 80026f2:	bf00      	nop
 80026f4:	40026400 	.word	0x40026400
 80026f8:	20000b1c 	.word	0x20000b1c
 80026fc:	00000000 	.word	0x00000000

08002700 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8002700:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002702:	4b07      	ldr	r3, [pc, #28]	; (8002720 <Vector130+0x20>)
  if (dma_isr_redir[12].dma_func)
 8002704:	4807      	ldr	r0, [pc, #28]	; (8002724 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002706:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[12].dma_func)
 8002708:	6e02      	ldr	r2, [r0, #96]	; 0x60
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800270a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 800270e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 8002710:	b10a      	cbz	r2, 8002716 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 8002712:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8002714:	4790      	blx	r2
}
 8002716:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800271a:	f7fe b881 	b.w	8000820 <_port_irq_epilogue>
 800271e:	bf00      	nop
 8002720:	40026400 	.word	0x40026400
 8002724:	20000b1c 	.word	0x20000b1c
	...

08002730 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002730:	4b08      	ldr	r3, [pc, #32]	; (8002754 <Vector12C+0x24>)
  if (dma_isr_redir[11].dma_func)
 8002732:	4809      	ldr	r0, [pc, #36]	; (8002758 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002734:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[11].dma_func)
 8002736:	6d82      	ldr	r2, [r0, #88]	; 0x58
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002738:	0d89      	lsrs	r1, r1, #22
 800273a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 800273e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
 8002740:	058c      	lsls	r4, r1, #22
 8002742:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 8002744:	b10a      	cbz	r2, 800274a <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 8002746:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8002748:	4790      	blx	r2
}
 800274a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800274e:	f7fe b867 	b.w	8000820 <_port_irq_epilogue>
 8002752:	bf00      	nop
 8002754:	40026400 	.word	0x40026400
 8002758:	20000b1c 	.word	0x20000b1c
 800275c:	00000000 	.word	0x00000000

08002760 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002760:	4b08      	ldr	r3, [pc, #32]	; (8002784 <Vector128+0x24>)
  if (dma_isr_redir[10].dma_func)
 8002762:	4809      	ldr	r0, [pc, #36]	; (8002788 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002764:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[10].dma_func)
 8002766:	6d02      	ldr	r2, [r0, #80]	; 0x50
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002768:	0c09      	lsrs	r1, r1, #16
 800276a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 800276e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
 8002770:	040c      	lsls	r4, r1, #16
 8002772:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 8002774:	b10a      	cbz	r2, 800277a <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 8002776:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8002778:	4790      	blx	r2
}
 800277a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800277e:	f7fe b84f 	b.w	8000820 <_port_irq_epilogue>
 8002782:	bf00      	nop
 8002784:	40026400 	.word	0x40026400
 8002788:	20000b1c 	.word	0x20000b1c
 800278c:	00000000 	.word	0x00000000

08002790 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002790:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <Vector124+0x24>)
  if (dma_isr_redir[9].dma_func)
 8002792:	4809      	ldr	r0, [pc, #36]	; (80027b8 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002794:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[9].dma_func)
 8002796:	6c82      	ldr	r2, [r0, #72]	; 0x48
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002798:	0989      	lsrs	r1, r1, #6
 800279a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 800279e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
 80027a0:	018c      	lsls	r4, r1, #6
 80027a2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 80027a4:	b10a      	cbz	r2, 80027aa <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 80027a6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80027a8:	4790      	blx	r2
}
 80027aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80027ae:	f7fe b837 	b.w	8000820 <_port_irq_epilogue>
 80027b2:	bf00      	nop
 80027b4:	40026400 	.word	0x40026400
 80027b8:	20000b1c 	.word	0x20000b1c
 80027bc:	00000000 	.word	0x00000000

080027c0 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 80027c0:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80027c2:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <Vector120+0x20>)
  if (dma_isr_redir[8].dma_func)
 80027c4:	4807      	ldr	r0, [pc, #28]	; (80027e4 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80027c6:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[8].dma_func)
 80027c8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80027ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 80027ce:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 80027d0:	b10a      	cbz	r2, 80027d6 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 80027d2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80027d4:	4790      	blx	r2
}
 80027d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80027da:	f7fe b821 	b.w	8000820 <_port_irq_epilogue>
 80027de:	bf00      	nop
 80027e0:	40026400 	.word	0x40026400
 80027e4:	20000b1c 	.word	0x20000b1c
	...

080027f0 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80027f0:	4b08      	ldr	r3, [pc, #32]	; (8002814 <VectorFC+0x24>)
  if (dma_isr_redir[7].dma_func)
 80027f2:	4809      	ldr	r0, [pc, #36]	; (8002818 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80027f4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[7].dma_func)
 80027f6:	6b82      	ldr	r2, [r0, #56]	; 0x38
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80027f8:	0d89      	lsrs	r1, r1, #22
 80027fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 80027fe:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
 8002800:	058c      	lsls	r4, r1, #22
 8002802:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 8002804:	b10a      	cbz	r2, 800280a <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 8002806:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8002808:	4790      	blx	r2
}
 800280a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800280e:	f7fe b807 	b.w	8000820 <_port_irq_epilogue>
 8002812:	bf00      	nop
 8002814:	40026000 	.word	0x40026000
 8002818:	20000b1c 	.word	0x20000b1c
 800281c:	00000000 	.word	0x00000000

08002820 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002820:	4b08      	ldr	r3, [pc, #32]	; (8002844 <Vector84+0x24>)
  if (dma_isr_redir[6].dma_func)
 8002822:	4809      	ldr	r0, [pc, #36]	; (8002848 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002824:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[6].dma_func)
 8002826:	6b02      	ldr	r2, [r0, #48]	; 0x30
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002828:	0c09      	lsrs	r1, r1, #16
 800282a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 800282e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
 8002830:	040c      	lsls	r4, r1, #16
 8002832:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 8002834:	b10a      	cbz	r2, 800283a <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8002836:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002838:	4790      	blx	r2
}
 800283a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800283e:	f7fd bfef 	b.w	8000820 <_port_irq_epilogue>
 8002842:	bf00      	nop
 8002844:	40026000 	.word	0x40026000
 8002848:	20000b1c 	.word	0x20000b1c
 800284c:	00000000 	.word	0x00000000

08002850 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002850:	4b08      	ldr	r3, [pc, #32]	; (8002874 <Vector80+0x24>)
  if (dma_isr_redir[5].dma_func)
 8002852:	4809      	ldr	r0, [pc, #36]	; (8002878 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002854:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[5].dma_func)
 8002856:	6a82      	ldr	r2, [r0, #40]	; 0x28
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002858:	0989      	lsrs	r1, r1, #6
 800285a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 800285e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
 8002860:	018c      	lsls	r4, r1, #6
 8002862:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 8002864:	b10a      	cbz	r2, 800286a <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8002866:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002868:	4790      	blx	r2
}
 800286a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800286e:	f7fd bfd7 	b.w	8000820 <_port_irq_epilogue>
 8002872:	bf00      	nop
 8002874:	40026000 	.word	0x40026000
 8002878:	20000b1c 	.word	0x20000b1c
 800287c:	00000000 	.word	0x00000000

08002880 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8002880:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002882:	4b07      	ldr	r3, [pc, #28]	; (80028a0 <Vector7C+0x20>)
  if (dma_isr_redir[4].dma_func)
 8002884:	4807      	ldr	r0, [pc, #28]	; (80028a4 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002886:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[4].dma_func)
 8002888:	6a02      	ldr	r2, [r0, #32]
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800288a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 800288e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 8002890:	b10a      	cbz	r2, 8002896 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 8002892:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002894:	4790      	blx	r2
}
 8002896:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800289a:	f7fd bfc1 	b.w	8000820 <_port_irq_epilogue>
 800289e:	bf00      	nop
 80028a0:	40026000 	.word	0x40026000
 80028a4:	20000b1c 	.word	0x20000b1c
	...

080028b0 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80028b0:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <Vector78+0x24>)
  if (dma_isr_redir[3].dma_func)
 80028b2:	4809      	ldr	r0, [pc, #36]	; (80028d8 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80028b4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[3].dma_func)
 80028b6:	6982      	ldr	r2, [r0, #24]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80028b8:	0d89      	lsrs	r1, r1, #22
 80028ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 80028be:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
 80028c0:	058c      	lsls	r4, r1, #22
 80028c2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 80028c4:	b10a      	cbz	r2, 80028ca <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 80028c6:	69c0      	ldr	r0, [r0, #28]
 80028c8:	4790      	blx	r2
}
 80028ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80028ce:	f7fd bfa7 	b.w	8000820 <_port_irq_epilogue>
 80028d2:	bf00      	nop
 80028d4:	40026000 	.word	0x40026000
 80028d8:	20000b1c 	.word	0x20000b1c
 80028dc:	00000000 	.word	0x00000000

080028e0 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80028e0:	4b08      	ldr	r3, [pc, #32]	; (8002904 <Vector74+0x24>)
  if (dma_isr_redir[2].dma_func)
 80028e2:	4809      	ldr	r0, [pc, #36]	; (8002908 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80028e4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[2].dma_func)
 80028e6:	6902      	ldr	r2, [r0, #16]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80028e8:	0c09      	lsrs	r1, r1, #16
 80028ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 80028ee:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
 80028f0:	040c      	lsls	r4, r1, #16
 80028f2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 80028f4:	b10a      	cbz	r2, 80028fa <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 80028f6:	6940      	ldr	r0, [r0, #20]
 80028f8:	4790      	blx	r2
}
 80028fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80028fe:	f7fd bf8f 	b.w	8000820 <_port_irq_epilogue>
 8002902:	bf00      	nop
 8002904:	40026000 	.word	0x40026000
 8002908:	20000b1c 	.word	0x20000b1c
 800290c:	00000000 	.word	0x00000000

08002910 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002910:	4b08      	ldr	r3, [pc, #32]	; (8002934 <Vector70+0x24>)
  if (dma_isr_redir[1].dma_func)
 8002912:	4809      	ldr	r0, [pc, #36]	; (8002938 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002914:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[1].dma_func)
 8002916:	6882      	ldr	r2, [r0, #8]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002918:	0989      	lsrs	r1, r1, #6
 800291a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 800291e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
 8002920:	018c      	lsls	r4, r1, #6
 8002922:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 8002924:	b10a      	cbz	r2, 800292a <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8002926:	68c0      	ldr	r0, [r0, #12]
 8002928:	4790      	blx	r2
}
 800292a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800292e:	f7fd bf77 	b.w	8000820 <_port_irq_epilogue>
 8002932:	bf00      	nop
 8002934:	40026000 	.word	0x40026000
 8002938:	20000b1c 	.word	0x20000b1c
 800293c:	00000000 	.word	0x00000000

08002940 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8002940:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002942:	4b07      	ldr	r3, [pc, #28]	; (8002960 <Vector6C+0x20>)
  if (dma_isr_redir[0].dma_func)
 8002944:	4a07      	ldr	r2, [pc, #28]	; (8002964 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002946:	6819      	ldr	r1, [r3, #0]
 8002948:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 800294c:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 800294e:	6813      	ldr	r3, [r2, #0]
 8002950:	b10b      	cbz	r3, 8002956 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8002952:	6850      	ldr	r0, [r2, #4]
 8002954:	4798      	blx	r3
}
 8002956:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800295a:	f7fd bf61 	b.w	8000820 <_port_irq_epilogue>
 800295e:	bf00      	nop
 8002960:	40026000 	.word	0x40026000
 8002964:	20000b1c 	.word	0x20000b1c
	...

08002970 <Vector88>:
  sr = ADC1->SR;
 8002970:	4b1c      	ldr	r3, [pc, #112]	; (80029e4 <Vector88+0x74>)
 8002972:	681a      	ldr	r2, [r3, #0]
  ADC1->SR = 0;
 8002974:	2100      	movs	r1, #0
 8002976:	6019      	str	r1, [r3, #0]
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 8002978:	0693      	lsls	r3, r2, #26
 800297a:	d52c      	bpl.n	80029d6 <Vector88+0x66>
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
 800297c:	b510      	push	{r4, lr}
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 800297e:	4c1a      	ldr	r4, [pc, #104]	; (80029e8 <Vector88+0x78>)
 8002980:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	b313      	cbz	r3, 80029ce <Vector88+0x5e>
    if (ADCD1.grpp != NULL)
 8002988:	6923      	ldr	r3, [r4, #16]
 800298a:	b303      	cbz	r3, 80029ce <Vector88+0x5e>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 800298c:	4620      	mov	r0, r4
 800298e:	f7fe f96f 	bl	8000c70 <adc_lld_stop_conversion>
 8002992:	6923      	ldr	r3, [r4, #16]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	b303      	cbz	r3, 80029da <Vector88+0x6a>
 8002998:	2205      	movs	r2, #5
 800299a:	7022      	strb	r2, [r4, #0]
 800299c:	2101      	movs	r1, #1
 800299e:	4620      	mov	r0, r4
 80029a0:	4798      	blx	r3
 80029a2:	7823      	ldrb	r3, [r4, #0]
 80029a4:	2b05      	cmp	r3, #5
 80029a6:	bf04      	itt	eq
 80029a8:	2302      	moveq	r3, #2
 80029aa:	7023      	strbeq	r3, [r4, #0]
 80029ac:	2300      	movs	r3, #0
 80029ae:	6123      	str	r3, [r4, #16]
 80029b0:	2320      	movs	r3, #32
 80029b2:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 80029b6:	6960      	ldr	r0, [r4, #20]
 80029b8:	b130      	cbz	r0, 80029c8 <Vector88+0x58>
    tp->u.rdymsg = msg;
 80029ba:	f04f 33ff 	mov.w	r3, #4294967295
 80029be:	6243      	str	r3, [r0, #36]	; 0x24
    *trp = NULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	6163      	str	r3, [r4, #20]
    (void) chSchReadyI(tp);
 80029c4:	f7fd ffdc 	bl	8000980 <chSchReadyI>
 80029c8:	2300      	movs	r3, #0
 80029ca:	f383 8811 	msr	BASEPRI, r3
}
 80029ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80029d2:	f7fd bf25 	b.w	8000820 <_port_irq_epilogue>
 80029d6:	f7fd bf23 	b.w	8000820 <_port_irq_epilogue>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 80029da:	2202      	movs	r2, #2
 80029dc:	6123      	str	r3, [r4, #16]
 80029de:	7022      	strb	r2, [r4, #0]
 80029e0:	e7e6      	b.n	80029b0 <Vector88+0x40>
 80029e2:	bf00      	nop
 80029e4:	40012000 	.word	0x40012000
 80029e8:	20000878 	.word	0x20000878
 80029ec:	00000000 	.word	0x00000000

080029f0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 80029f0:	b4f0      	push	{r4, r5, r6, r7}
 80029f2:	4e14      	ldr	r6, [pc, #80]	; (8002a44 <__init_ram_areas+0x54>)
 80029f4:	4d14      	ldr	r5, [pc, #80]	; (8002a48 <__init_ram_areas+0x58>)
 80029f6:	4c15      	ldr	r4, [pc, #84]	; (8002a4c <__init_ram_areas+0x5c>)
 80029f8:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <__init_ram_areas+0x60>)
 80029fa:	4916      	ldr	r1, [pc, #88]	; (8002a54 <__init_ram_areas+0x64>)
 80029fc:	f106 0c70 	add.w	ip, r6, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8002a00:	2700      	movs	r7, #0
    while (p < rap->clear_area) {
 8002a02:	429c      	cmp	r4, r3
 8002a04:	d911      	bls.n	8002a2a <__init_ram_areas+0x3a>
 8002a06:	3904      	subs	r1, #4
 8002a08:	461a      	mov	r2, r3
      *p = *tp;
 8002a0a:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8002a0e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
 8002a12:	4294      	cmp	r4, r2
 8002a14:	d8f9      	bhi.n	8002a0a <__init_ram_areas+0x1a>
 8002a16:	43da      	mvns	r2, r3
 8002a18:	4414      	add	r4, r2
 8002a1a:	f024 0403 	bic.w	r4, r4, #3
 8002a1e:	3404      	adds	r4, #4
 8002a20:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
 8002a22:	429d      	cmp	r5, r3
 8002a24:	d903      	bls.n	8002a2e <__init_ram_areas+0x3e>
      *p = 0;
 8002a26:	f843 7b04 	str.w	r7, [r3], #4
    while (p < rap->no_init_area) {
 8002a2a:	429d      	cmp	r5, r3
 8002a2c:	d8fb      	bhi.n	8002a26 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8002a2e:	4566      	cmp	r6, ip
 8002a30:	d005      	beq.n	8002a3e <__init_ram_areas+0x4e>
 8002a32:	e9d6 1304 	ldrd	r1, r3, [r6, #16]
 8002a36:	e9d6 4506 	ldrd	r4, r5, [r6, #24]
 8002a3a:	3610      	adds	r6, #16
 8002a3c:	e7e1      	b.n	8002a02 <__init_ram_areas+0x12>
#endif
}
 8002a3e:	bcf0      	pop	{r4, r5, r6, r7}
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	08002bc8 	.word	0x08002bc8
 8002a48:	200050f8 	.word	0x200050f8
 8002a4c:	200050f8 	.word	0x200050f8
 8002a50:	200050f8 	.word	0x200050f8
 8002a54:	08002cf0 	.word	0x08002cf0
	...

08002a60 <__default_exit>:
void __default_exit(void) {
 8002a60:	e7fe      	b.n	8002a60 <__default_exit>
 8002a62:	bf00      	nop
	...

08002a70 <__late_init>:
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
	...

08002a80 <__core_init>:
}
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
